[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    archiveBaseName \u003d \"hirelah\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    archiveVersion \u003d \"1.3.1\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u0027site-name\u0027: \u0027HireLah!\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W15-2/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 2,
      "CornCobs": 2,
      "weiichengg": 4,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.AttributeStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.IntervieweeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.MetricStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.ModelStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.QuestionStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.TranscriptStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        IntervieweeStorage intervieweeStorage \u003d new IntervieweeStorage(userPrefs.getIntervieweeDirectory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        QuestionStorage questionStorage \u003d new QuestionStorage(userPrefs.getQuestionDirectory());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        AttributeStorage attributeStorage \u003d new AttributeStorage(userPrefs.getAttributeDirectory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        MetricStorage metricStorage \u003d new MetricStorage(userPrefs.getMetricDirectory());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        TranscriptStorage transcriptStorage \u003d new TranscriptStorage(userPrefs.getTranscriptDirectory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        ModelStorage modelStorage \u003d new ModelStorage(userPrefs.getModelDirectory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, intervieweeStorage, attributeStorage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                questionStorage, metricStorage, transcriptStorage, modelStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a {@code ModelManager} with {@code userPrefs}. Components of the model (IntervieweeList, etc.) start"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * empty and are populated once a session is loaded."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cIntervieweeList\u003e intervieweeListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cAttributeList\u003e attributeListOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cQuestionList\u003e questionListOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cMetricList\u003e metricListOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cBoolean\u003e modelOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        IntervieweeList initialInterviewees;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        AttributeList initialAttributes;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        QuestionList initialQuestions;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        MetricList initialMetrics;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Boolean initialModel;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            attributeListOptional \u003d storage.readAttribute();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            questionListOptional \u003d storage.readQuestion();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            modelOptional \u003d storage.readModel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (modelOptional.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                logger.info(\"model data file not found. Will be starting with an empty model file\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (attributeListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                logger.info(\"Attributes data file not found. Will be starting with an empty attribute file\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (questionListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                logger.info(\"Question data file not found. Will be starting with an empty question file\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialModel \u003d modelOptional.orElse(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialAttributes \u003d attributeListOptional.orElse(new AttributeList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialQuestions \u003d questionListOptional.orElse(new QuestionList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            // when the the model is not finalised, it will not initialise metric and transcript"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (!initialModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                initialMetrics \u003d new MetricList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                metricListOptional \u003d storage.readMetric();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                initialMetrics \u003d metricListOptional.orElse(new MetricList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            intervieweeListOptional \u003d storage.readInterviewee(initialQuestions, initialAttributes, initialModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialInterviewees \u003d intervieweeListOptional.orElse(new IntervieweeList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (intervieweeListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                logger.info(\"Interviewees data file not found. Will be starting with an empty interviewee file\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Interview Session\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialInterviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialAttributes \u003d new AttributeList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialQuestions \u003d new QuestionList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialMetrics \u003d new MetricList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialModel \u003d false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new ModelManager(userPrefs, initialInterviewees, initialAttributes,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                initialQuestions, initialMetrics, initialModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "weiichengg": 70,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Checks that the {@code Model} has been finalised (via finalise command)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param model the Model to check."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param errorMessage the message if the model is finalised."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandException if model has been finalised."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static void checkFinalised(Model model, String errorMessage) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (model.isFinalisedInterviewProperties()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(errorMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 15,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ModelUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * A container for Model specific utility functions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class ModelUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MODEL_HAS_BEEN_FINALISED \u003d \"This interview session has been finalized. You can no \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"longer make changes to attributes and questions.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MODEL_HAS_NOT_BEEN_FINALISED \u003d \"This interview session has not been finalized. You \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"can\u0027t create metrics, conduct interviews, or find best interviewees.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Validates whether the Model isFinalized state, matches to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * what the command desires."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param model The corresponding model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param isFinalised The boolean flag to determine whether a command wants to be executed in finalized mode or not."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws CommandException If the desired flag does not match with the current model state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static void validateFinalisation(Model model, boolean isFinalised) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!isFinalised \u0026\u0026 model.isFinalisedInterviewProperties()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(MODEL_HAS_BEEN_FINALISED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (isFinalised \u0026\u0026 !model.isFinalisedInterviewProperties()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(MODEL_HAS_NOT_BEEN_FINALISED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 28,
      "bscrow": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the list of attributes */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cAttribute\u003e getAttributeListView();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of interviewees */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the list of questions */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionListView();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the list of metrics */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    ObservableList\u003cMetric\u003e getMetricListView();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns the Interviewee currently being looked at*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    Interviewee getCurrentInterviewee();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Sets the currentInterviewee."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    void setCurrentInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    ObservableList\u003cIntervieweeToScore\u003e getBestNIntervieweesView();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the user prefs\u0027 sessions directory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 2,
      "bscrow": 18,
      "CornCobs": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.parser.InterviewParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.parser.NormalParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final InterviewParser interviewParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final NormalParser normalParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewParser \u003d new InterviewParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        normalParser \u003d new NormalParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (model.getAppPhase()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command \u003d normalParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command \u003d interviewParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalArgumentException(\"Impossible enum case\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        commandResult \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storage.saveInterviewee(model.getIntervieweeList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storage.saveAttribute(model.getAttributeList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storage.saveQuestion(model.getQuestionList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storage.saveMetric(model.getMetricList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storage.saveModel(model.isFinalisedInterviewProperties());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IOException | IllegalValueException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getAttributeListView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getAttributeListView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionListView() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getQuestionListView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ObservableList\u003cMetric\u003e getMetricListView() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return model.getMetricListView();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public Interviewee getCurrentInterviewee() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getCurrentInterviewee();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void setCurrentInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        model.setCurrentInterviewee(interviewee);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ObservableList\u003cIntervieweeToScore\u003e getBestNIntervieweesView() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return model.getBestNInterviewees();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getSessionsDirectory();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5,
      "bscrow": 21,
      "CornCobs": 27,
      "weiichengg": 9,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAttributeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add an attribute to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddAttributeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New attribute added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"add \" + COMMAND_WORD + \" \u003cattribute\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Adds an attribute to the Attribute list.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD + \" leadership\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddAttributeCommand to add the specified {@code Attribute}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddAttributeCommand(String attribute) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        toAdd \u003d attribute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            attributes.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, toAdd), ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAttributeCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 43,
      "CornCobs": 11,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddIntervieweeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add an interviewee to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddIntervieweeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New interviewee added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"add \" + COMMAND_WORD + \" \u003cfull name\u003e [-aka \u003calias\u003e]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Adds an interviewee to the Interviewee list.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \" Jane Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + PREFIX_ALIAS + \" Doe\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddIntervieweeCommand to add the specified {@code Interviewee}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AddIntervieweeCommand(String fullName, String... optionalAlias) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (optionalAlias.length !\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            this.alias \u003d optionalAlias[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            this.alias \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isEmptyAlias()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewees.addInterviewee(fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewees.addIntervieweeWithAlias(fullName, alias);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } catch (IllegalActionException | IllegalValueException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, fullName), ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 fullName.equals(((AddIntervieweeCommand) other).fullName)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 alias.equals(((AddIntervieweeCommand) other).alias));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isEmptyAlias() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.alias.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 60,
      "agnesnatasya": 6,
      "CornCobs": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMetricCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddMetricCommand describes the behavior of HireLah!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when a user wants to delete the metric from the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddMetricCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"metric\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New metric added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"add \" + COMMAND_WORD + \" \u003cmetric\u003e [-a \u003cattribute\u003e -w \u003cscore\u003e]...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Adds a metric to the Metric list.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: new \" + COMMAND_WORD + \" extremeLeader -a leadership -w 0.7 -a tenacity -w 0.6\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final List\u003cString\u003e attributePrefixes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final List\u003cDouble\u003e addedWeights;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddMetricCommand to add the specified {@code Metric}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddMetricCommand(String toAdd, List\u003cString\u003e attributePrefixes, List\u003cDouble\u003e addedWeights) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefixes \u003d attributePrefixes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.addedWeights \u003d addedWeights;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList metrics \u003d model.getMetricList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            metrics.add(toAdd, attributes, attributePrefixes, addedWeights);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, toAdd), ToggleView.METRIC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 53,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add a question to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddQuestionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Adds an question to the Question list.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"add \" + COMMAND_WORD + \"\u003cquestion description\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD + \" what is this question?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddQuestionCommand to add the specified {@code Question}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddQuestionCommand(String question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            questions.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, toAdd), ToggleView.QUESTION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 48,
      "CornCobs": 3,
      "agnesnatasya": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.BestParameter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * BestCommand describes the behavior of the command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * that sorts the interviewees based on a certain parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class BestCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"best\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SIZE_NOT_A_NUMBER \u003d \"The size of the interviewees provided is not a number.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_NON_POSITIVE_SIZE \u003d \"The size of the interviewees provided must be positive.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_PARAM_NOT_FOUND \u003d \"The parameter provided: %s is not found.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the best %s interviewees.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d COMMAND_WORD + \"\u003cnumber of interviewees\u003e \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"[-a \u003cattribute\u003e] [-m \u003cmetrics\u003e]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Finds best N candidates from the list.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"e.g. best 3 -a leadership\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String numberOfInterviewees;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String paramPrefix;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final BestParameter paramType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public BestCommand(String numberOfInterviewees, BestParameter paramType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.numberOfInterviewees \u003d numberOfInterviewees;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.paramPrefix \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.paramType \u003d paramType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public BestCommand(String numberOfInterviewees, String paramPrefix, BestParameter paramType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.numberOfInterviewees \u003d numberOfInterviewees;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.paramPrefix \u003d paramPrefix;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.paramType \u003d paramType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Executes the best command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding CommandResult instance."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws CommandException If there is an invalid parameter entered by the client."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        int size \u003d parseNumberOfInterviewees(numberOfInterviewees);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Comparator\u003cInterviewee\u003e comparator;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            switch (paramType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            case METRIC:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                comparator \u003d getComparatorByMetric(model.getMetricList(), paramPrefix);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            case ATTRIBUTE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                comparator \u003d getComparatorByAttribute(model.getAttributeList(), paramPrefix);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                comparator \u003d getOverallComparator(model.getAttributeList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            getBestN(comparator, size, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PARAM_NOT_FOUND, paramPrefix));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new ToggleCommandResult("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_SUCCESS, numberOfInterviewees), ToggleView.BEST_INTERVIEWEE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Fills the list of best interviewees with the top N interviewees using the given comparator."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * The interviewees shown could be more than N if ties."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param comparator the comparator to compare interviewees."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param size the number of interviewees to fill into bestNInterviewees."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param model The model of the app."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void getBestN(Comparator\u003cInterviewee\u003e comparator, int size, Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ObservableList\u003cInterviewee\u003e observableInterviewees \u003d model.getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ObservableList\u003cIntervieweeToScore\u003e bestNInterviewees \u003d model.getBestNInterviewees();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        bestNInterviewees.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        FilteredList\u003cInterviewee\u003e filtered \u003d new FilteredList\u003c\u003e(observableInterviewees, Interviewee::isInterviewed);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        SortedList\u003cInterviewee\u003e sorted \u003d new SortedList\u003c\u003e(filtered, comparator);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int n \u003d Math.min(size, sorted.size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            bestNInterviewees.add(new IntervieweeToScore(sorted.get(i), getScore(sorted.get(i), model)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Interviewee lastBest \u003d bestNInterviewees.get(n - 1).getInterviewee();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        while (bestNInterviewees.size() \u003c sorted.size()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 comparator.compare(sorted.get(bestNInterviewees.size()), lastBest) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            lastBest \u003d sorted.get(bestNInterviewees.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            bestNInterviewees.add(new IntervieweeToScore(lastBest, getScore(lastBest, model)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double getScore(Interviewee interviewee, Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case METRIC:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return computeByMetric(interviewee, model.getMetricList(), paramPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case ATTRIBUTE:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return computeByAttribute(interviewee, model.getAttributeList(), paramPrefix);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return getOverallScore(model.getAttributeList(), interviewee);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Computes the score of an interviewee based on the Metric provided."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param interviewee The interviewee that his score wants to be computed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metrics The metric list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param paramPrefix The prefix of the metric name."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding score"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the prefix of the metric is not found or there are multiple metrics with the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * same prefix."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double computeByMetric(Interviewee interviewee, MetricList metrics, String paramPrefix)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.find(paramPrefix).computeScore(interviewee);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Computes the score of an interviewee based on the Metric provided."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param interviewee The interviewee that his score wants to be computed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The attribute list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param paramPrefix The prefix of the attribute name."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding score."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the prefix of the attribute is not found or there are multiple attributes with"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * the same prefix."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double computeByAttribute(Interviewee interviewee,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                                       AttributeList attributes, String paramPrefix)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return interviewee.getScore(attributes.find(paramPrefix));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Gets the Interviewee Comparator based on the Metric provided."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metrics The metric list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param paramPrefix The prefix of the metric name."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding comparator."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the prefix of the metric is not found or there are multiple metrics with the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * same prefix."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private Comparator\u003cInterviewee\u003e getComparatorByMetric(MetricList metrics, String paramPrefix)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.find(paramPrefix).getComparator();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Gets the Interviewee Comparator based on the Attribute provided."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The attribute list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param paramPrefix The prefix of the attribute name."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding comparator."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the prefix of the attribute is not found or there are multiple attributes with"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * the same prefix."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private Comparator\u003cInterviewee\u003e getComparatorByAttribute(AttributeList attributes, String paramPrefix)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute attribute \u003d attributes.find(paramPrefix);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return (interviewee, anotherInterviewee) -\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreFirst \u003d interviewee.getScore(attribute);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreSecond \u003d anotherInterviewee.getScore(attribute);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return totalScoreSecond - totalScoreFirst \u003c 0 ? -1 : totalScoreFirst \u003d\u003d totalScoreSecond ? 0 : 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Gets the Interviewee Comparator based on their overall performances."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The attribute list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding comparator."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private Comparator\u003cInterviewee\u003e getOverallComparator(AttributeList attributes) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return (interviewee, anotherInterviewee) -\u003e {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreFirst \u003d getOverallScore(attributes, interviewee);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreSecond \u003d getOverallScore(attributes, anotherInterviewee);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return totalScoreSecond - totalScoreFirst \u003c 0 ? -1 : totalScoreFirst \u003d\u003d totalScoreSecond ? 0 : 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Computes the total overall score of an interviewee."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The attribute list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param interviewee The interviewee."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The overall score of the interviewee."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double getOverallScore(AttributeList attributes, Interviewee interviewee) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ObservableList\u003cAttribute\u003e observableList \u003d attributes.getObservableList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (Attribute attribute: observableList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            totalScore +\u003d interviewee.getScore(attribute);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses the number of interviewees entered by the client to the corresponding integer."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param numberOfInterviewees The String representing the size of the interviewees entered by the client."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding integer value."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws CommandException If the value entered is not a number or the number is less than or equal to zero."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private int parseNumberOfInterviewees(String numberOfInterviewees) throws CommandException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int result \u003d Integer.parseInt(numberOfInterviewees);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (result \u003c\u003d 0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new CommandException(MESSAGE_NON_POSITIVE_SIZE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(MESSAGE_SIZE_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof BestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 numberOfInterviewees.equals(((BestCommand) other).numberOfInterviewees)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 paramType.equals(((BestCommand) other).paramType));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 214,
      "CornCobs": 17,
      "agnesnatasya": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the storage to save the model using."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public abstract CommandResult execute(Model model, Storage storage) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.setFeedbackToUser(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return feedbackToUser.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 7,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAttributeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete an attribute from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteAttributeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"delete \" + COMMAND_WORD + \" \u003cattribute\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Deletes the attribute identified by its name.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" leadership\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRIBUTE_SUCCESS \u003d \"Deleted attribute: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String attributePrefix;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteAttributeCommand(String attributePrefix) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefix \u003d attributePrefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.delete(attributePrefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_DELETE_ATTRIBUTE_SUCCESS, attribute),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 attributePrefix.equals(((DeleteAttributeCommand) other).attributePrefix)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 47,
      "CornCobs": 4,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIntervieweeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete an interviewee from the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteIntervieweeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted interviewee: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"delete \" + COMMAND_WORD + \" \u003cinterviewee\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Deletes an interviewee to the Interviewee list.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" Doe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an DeleteIntervieweeCommand to delete the specified {@code Interviewee}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteIntervieweeCommand(String identifier) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            interviewees.deleteInterviewee(identifier);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, identifier), ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 identifier.equals(((DeleteIntervieweeCommand) other).identifier));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 46,
      "CornCobs": 3,
      "agnesnatasya": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMetricCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteMetricCommand describes the behavior when the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete an attribute from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteMetricCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"metric\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"delete \" + COMMAND_WORD + \"\u003cmetric\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Deletes the metric identified by its name.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" extremeDictatorship\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_METRIC_SUCCESS \u003d \"Deleted metric: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String metricPrefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteMetricCommand(String metricPrefix) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.metricPrefix \u003d metricPrefix;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList metrics \u003d model.getMetricList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Metric metric \u003d metrics.delete(metricPrefix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_DELETE_METRIC_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    metric), ToggleView.METRIC);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteMetricCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 metricPrefix.equals(((DeleteMetricCommand) other).metricPrefix)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 48,
      "CornCobs": 3,
      "agnesnatasya": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete a question from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteQuestionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"delete \" + COMMAND_WORD + \" \u003cquestion number\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \": Deletes the question identified by its index number in the question list.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted question: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final int questionIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteQuestionCommand(int questionIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    questions.delete(questionIndex)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    ToggleView.QUESTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 questionIndex \u003d\u003d (((DeleteQuestionCommand) other).questionIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 46,
      "bscrow": 1,
      "CornCobs": 4,
      "agnesnatasya": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAttributeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update an attribute from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditAttributeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"edit \" + COMMAND_WORD + \" \u003cold attribute\u003e -a \u003cnew attribute\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Edits the attribute identified by the name.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: edit \" + COMMAND_WORD + \" leadership -a tenacity\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRIBUTE_SUCCESS \u003d \"Edited attribute: %s to %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String attributePrefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedAttribute;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditAttributeCommand(String attributePrefix, String updatedAttribute) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefix \u003d attributePrefix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedAttribute \u003d updatedAttribute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.edit(attributePrefix, updatedAttribute);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_EDIT_ATTRIBUTE_SUCCESS, attribute, updatedAttribute),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 attributePrefix.equals(((EditAttributeCommand) other).attributePrefix)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedAttribute.equals(((EditAttributeCommand) other).updatedAttribute)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 51,
      "bscrow": 1,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditIntervieweeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update an intervewee\u0027s name from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditIntervieweeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"edit \" + COMMAND_WORD + \" \u003cinterviewee\u003e [-n \u003cnew name\u003e] \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"[-aka \u003cnew alias\u003e]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Edits the interviewee\u0027s name and/or alias.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: edit \" + COMMAND_WORD + \" Doe -n Janice Doe -aka JDoe\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERVIEWEE_SUCCESS \u003d \"Edited interviewee: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedAlias;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditIntervieweeCommand(String identifier, String updatedName, String updatedAlias) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedName \u003d updatedName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedAlias \u003d updatedAlias;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (updatedName.equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                interviewees.setAlias(identifier, updatedAlias);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else if (updatedAlias.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewees.setName(identifier, updatedName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                interviewees.setNameAndAlias(identifier, updatedName, updatedAlias);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException | IllegalValueException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_EDIT_INTERVIEWEE_SUCCESS, identifier),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 identifier.equals(((EditIntervieweeCommand) other).identifier)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedName.equals(((EditIntervieweeCommand) other).updatedName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedAlias.equals(((EditIntervieweeCommand) other).updatedAlias)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 56,
      "bscrow": 1,
      "CornCobs": 6,
      "agnesnatasya": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditMetricCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditMetricCommand describes the behavior of HireLah!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when a user wants to edit a metric."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditMetricCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"metric\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"edit \" + COMMAND_WORD + \"\u003cmetric\u003e [-n \u003cmetric name\u003e] [-a \u003cattribute\u003e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \" -w \u003cscore\u003e]...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Edits the metric.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: edit \" + COMMAND_WORD + \" extremeLeadership -n extremeDictatorship -a leadership -w 100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_EDIT_METRIC_SUCCESS \u003d \"Edited metric: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final List\u003cString\u003e attributePrefixes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final List\u003cDouble\u003e weightages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditMetricCommand(String toEdit, String updatedName, List\u003cString\u003e attributePrefixes,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                             List\u003cDouble\u003e weightages) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.toEdit \u003d toEdit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedName \u003d updatedName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefixes \u003d attributePrefixes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.weightages \u003d weightages;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList metrics \u003d model.getMetricList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            String name \u003d metrics.edit(toEdit, updatedName, attributes, attributePrefixes, weightages);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new ToggleCommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    String.format(MESSAGE_EDIT_METRIC_SUCCESS, name), ToggleView.METRIC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 52,
      "CornCobs": 2,
      "agnesnatasya": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update a question from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"edit \" + COMMAND_WORD + \" \u003cquestion number\u003e \u003cedited question\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Edits the question\u0027s description, identified by its number.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: edit \" + COMMAND_WORD + \" 1 what the heck is this question?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_QUESTION_SUCCESS \u003d \"Edited question %s to %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final int questionIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditQuestionCommand(int questionIndex, String updatedDescription) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedDescription \u003d updatedDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d questions.edit(questionIndex, updatedDescription);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_EDIT_QUESTION_SUCCESS, questionIndex,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    updatedDescription), ToggleView.QUESTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 questionIndex \u003d\u003d ((EditQuestionCommand) other).questionIndex"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedDescription.equals(((EditQuestionCommand) other).updatedDescription)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 54,
      "CornCobs": 2,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ExitCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof ExitCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 3,
      "agnesnatasya": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A CommandResult that causes the app to exit."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ExitCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ExitCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super.displayResult(mainWindow);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.handleExit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FinaliseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * FinaliseCommand finalises the properties of an interview session"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * which includes the attributes, the questions and interviewees."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class FinaliseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finalise\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attributes and questions of this interview session\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \" has been finalised. You cannot change them anymore.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Finalises the attributes and questions \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"of an interview session.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        model.finaliseInterviewProperties();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof FinaliseCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 34,
      "CornCobs": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Opens the User Guide to help the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof HelpCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 4,
      "agnesnatasya": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A CommandResult that opens the User Guide to help the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public HelpCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super.displayResult(mainWindow);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.handleHelp();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAttributeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the attributes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class ListAttributeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of attributes:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": List the attribute from the Attribute list.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListAttributeCommand to list the {@code Attribute}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListAttributeCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListAttributeCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 35,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListIntervieweeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the interviewees."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class ListIntervieweeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of interviewees:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": List the interviewee from the Interviewee list.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListIntervieweeCommand to list the {@code Interviewee}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListIntervieweeCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListIntervieweeCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 35,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMetricCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListMetricCommand describes the behavior when the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the metrics available."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class ListMetricCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"metric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of metrics:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": List the metrics from the Metric list.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListMetricCommand to list the {@code Metric}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListMetricCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, ToggleView.METRIC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 28,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the questions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class ListQuestionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of questions:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": List the questions from the Question list.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListQuestionCommand to list the {@code Question}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListQuestionCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, ToggleView.QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListQuestionCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 35,
      "CornCobs": 3,
      "agnesnatasya": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NavigationCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Constructs a {@code NavigationCommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * and index as specified to enable ToggleView Transcript to navigate to the particular index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class NavigationCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * The index of a remark for ToggleView Transcript"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public NavigationCommandResult(String feedbackToUser, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super.displayResult(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.scrollTranscriptTo(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the index of this {@code NavigationCommandResult}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * which is the index of the remark to be navigated to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return index of the {@code NavigationCommandResult}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 30,
      "CornCobs": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NavigationQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * NavigationQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * client wants to navigate to a certain remark of the interview."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class NavigationQuestionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"q\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"goto \" + COMMAND_WORD + \"\u003cquestionNumber\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \": Navigate to a particular answer of a question from an interviewee.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Parameters: questionNumber\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Example:  \" + COMMAND_WORD + \" q10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_NAVIGATION_QUESTION_SUCCESS \u003d \"Here is the remark of question %d!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final int questionIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public NavigationQuestionCommand(int questionIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!model.hasCurrentInterviewee()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new CommandException(\"You need to open a transcript of a particular interviewee \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    + \"to go to the answer of a question.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            int remarkIndex \u003d model.getCurrentTranscript().getIndexOfQuestion(questionIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new NavigationCommandResult(String.format(MESSAGE_NAVIGATION_QUESTION_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    questionIndex), remarkIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } catch (IllegalValueException | IllegalActionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof NavigationQuestionCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 questionIndex \u003d\u003d ((NavigationQuestionCommand) other).questionIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 53,
      "CornCobs": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NavigationTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * NavigationTimeCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * client wants to navigate to a certain remark of the interview."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class NavigationTimeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \".\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"goto \u003cminutes\u003e\" + COMMAND_WORD + \"\u003cseconds\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Navigate to a particular time of an interviewee\u0027s interview.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            + \"Parameters: TIME (in the format mm.ss)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Example:  \" + COMMAND_WORD + \" 30.00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_NAVIGATION_TIME_SUCCESS \u003d \"Here is the remark at time %d.%s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Duration timeQuery;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public NavigationTimeCommand(Duration timeQuery) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.timeQuery \u003d timeQuery;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!model.hasCurrentInterviewee()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new CommandException(\"You need to open a transcript of a particular interviewee \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    + \"to go to the answer of a question.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        int remarkIndex \u003d model.getCurrentTranscript().getIndexAtTime(timeQuery);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new NavigationCommandResult(String.format(MESSAGE_NAVIGATION_TIME_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                timeQuery.toMinutes(), String.format(\"%02d\", timeQuery.toSecondsPart())), remarkIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof NavigationTimeCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 timeQuery.equals(((NavigationTimeCommand) other).timeQuery));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 50,
      "CornCobs": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * OpenReportCommand describes the behavior when the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * client wants to open an interview report of an interviewee."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class OpenReportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_NOT_INTERVIEWED \u003d \"%s has not completed their interview.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_FUNCTION \u003d \": Opens the interview report of an interviewee.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Parameters: IDENTIFIER\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" John Doe\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully opened Interviewee report: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Creates an OpenReportCommand to open"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * the report of an {@code Interviewee}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public OpenReportCommand(String identifier) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee \u003d interviewees.getInterviewee(identifier);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (!interviewee.isInterviewed()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOT_INTERVIEWED, interviewee));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            model.setCurrentInterviewee(interviewee);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, interviewee),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ToggleView.TRANSCRIPT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof OpenReportCommand // handles null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 identifier.equals(((OpenReportCommand) other).identifier)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 48,
      "CornCobs": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Opens the resume of the given interviewee, using the System default PDF viewer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class OpenResumeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resume\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Resume of %s opened.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_NO_RESUME \u003d \"No resume uploaded!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_RESUME_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \"Cannot find a resume at %s!\\nPlease upload a resume via the upload command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String identifier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public OpenResumeCommand(String identifier) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee \u003d model.getIntervieweeList().getInterviewee(identifier);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        File resume \u003d interviewee.getResume().orElseThrow(() -\u003e new CommandException(MESSAGE_NO_RESUME));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!resume.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_RESUME_NOT_FOUND, resume));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        openFile(resume);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, identifier));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Opens a file that exists."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param resume a file that is guaranteed to exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandException if Desktop is not supported on the platform the app is running on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void openFile(File resume) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            new Thread(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    Desktop.getDesktop().open(resume);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }).start();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(\"Cannot open pdf files!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof OpenResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 identifier.equals(((OpenResumeCommand) other).identifier));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 63,
      "agnesnatasya": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StartInterviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import static seedu.address.commons.util.ModelUtil.validateFinalisation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Changes the app to the interview phase to interview the given interviewee. Fails if no interviewee can"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * be identified via the String given, or the interviewee is already interviewed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class StartInterviewCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Interview with %s started!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public static final boolean DESIRED_MODEL_FINALIZED_STATE \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String identifier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public StartInterviewCommand(String identifier) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        validateFinalisation(model, DESIRED_MODEL_FINALIZED_STATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee interviewee \u003d model.getIntervieweeList().getInterviewee(identifier);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            model.startInterview(interviewee);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ToggleCommandResult(String.format(MESSAGE_SUCCESS, interviewee), ToggleView.TRANSCRIPT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                || (other instanceof StartInterviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                \u0026\u0026 identifier.equals(((StartInterviewCommand) other).identifier));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 4,
      "CornCobs": 32,
      "agnesnatasya": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ToggleCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A CommandResult that changes the main view of the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ToggleCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final ToggleView toggleView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a {@code ToggleCommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * that will toggle the UI to the given ToggleView."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ToggleCommandResult(String feedbackToUser, ToggleView toggleView) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.toggleView \u003d toggleView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super.displayResult(mainWindow);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.handleToggle(toggleView);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ToggleView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Enum representing what information HireLah is supposed to display."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public enum ToggleView {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    ATTRIBUTE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    INTERVIEWEE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    METRIC,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    QUESTION,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    TRANSCRIPT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    BEST_INTERVIEWEE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 2,
      "bscrow": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UploadResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Adds a pdf resume file to the given Interviewee."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class UploadResumeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"upload\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added the resume!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Could not find the file!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String identifier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public UploadResumeCommand(String identifier, String path) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee \u003d model.getIntervieweeList().getInterviewee(identifier);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        File resume;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (path \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fileChooser.setTitle(\"Select a pdf file\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fileChooser.setSelectedExtensionFilter(new FileChooser.ExtensionFilter(\"PDF files\", \"*.pdf\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            resume \u003d fileChooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            resume \u003d new File(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (resume \u003d\u003d null || !resume.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewee.setResume(resume);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interview/EndCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.ToggleCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.ToggleView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Ends the current interview and returns to the Interviewee page. Will throw an error if the interviewee still"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * has missing attributes without a score."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ended interview with %s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SCORELESS_ATTRIBUTES \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \"Unable to finish interview with some attributes not scored yet!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Transcript transcript \u003d model.getCurrentTranscript();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Attribute attribute : model.getAttributeList()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (!transcript.isAttributeScored(attribute)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new CommandException(MESSAGE_SCORELESS_ATTRIBUTES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        transcript.complete();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        CommandResult result \u003d new ToggleCommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getCurrentInterviewee()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveTranscript(model.getCurrentInterviewee());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(\"Error occurred while saving data!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        model.endInterview();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interview/RemarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Remark command is an Interview phase command that adds a Remark at the current interview time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * to the Interviewee\u0027s Transcript."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added the remark.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public RemarkCommand(String remark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (remark.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new CommandException(\"Remark can not be blank.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        model.getCurrentTranscript().addRemark(this.remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveTranscript(model.getCurrentInterviewee());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(\"Error occurred while saving data!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 33,
      "agnesnatasya": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interview/ScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Attempts to find the attribute specified by the user, and update the score of that attribute for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * the currently interviewed interviewee."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scored %.2f to %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MESSAGE_SCORE_OUT_OF_BOUND \u003d \"The score provided: %s is out of range. The score \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"should ranges from 0 to 10, inclusive.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String attributePrefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private double score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ScoreCommand(String attributePrefix, double score) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributePrefix \u003d attributePrefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Attribute attribute;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (score \u003c 0 || score \u003e 10) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SCORE_OUT_OF_BOUND, score));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            attribute \u003d model.getAttributeList().find(attributePrefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        model.getCurrentTranscript().setAttributeScore(attribute, this.score);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveTranscript(model.getCurrentInterviewee());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(\"Error occurred while saving data!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.score, attribute));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 6,
      "CornCobs": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interview/StartQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.commands.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Marks the beginning of the answer to a question in the Interview transcript."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class StartQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Marked the start of question %d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int questionNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public StartQuestionCommand(int questionNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        QuestionList questionList \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Question question \u003d questionList.find(questionNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            model.getCurrentTranscript().startQuestion(questionNumber, question);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException | IllegalActionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveTranscript(model.getCurrentInterviewee());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(\"Error while saving data!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, questionNumber));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddAttributeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.AddMetricCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new object of type AddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String EXPECTED_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            AddAttributeCommand.MESSAGE_FORMAT + AddAttributeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + AddIntervieweeCommand.MESSAGE_FORMAT + AddIntervieweeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + AddMetricCommand.MESSAGE_FORMAT + AddMetricCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + AddQuestionCommand.MESSAGE_FORMAT + AddQuestionCommand.MESSAGE_FUNCTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Pattern.compile(\"(?\u003caddCommandWord\u003e\\\\S+)(?\u003caddArguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String addCommandWord \u003d matcher.group(\"addCommandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String addArguments \u003d matcher.group(\"addArguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (addCommandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(addArguments, AddAttributeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddAttributeCommand(addArguments.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommandParser().parse(addArguments.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(addArguments, AddQuestionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddQuestionCommand(addArguments.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case AddMetricCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(addArguments, AddMetricCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new AddMetricCommandParser().parse(addArguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5,
      "agnesnatasya": 36,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddIntervieweeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new object of type AddIntervieweeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddIntervieweeCommandParser implements Parser\u003cAddIntervieweeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Missing argument for alias of the interviewee.\\n%s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIntervieweeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an AddIntervieweeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AddIntervieweeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_ALIAS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (!argMultimap.arePrefixesPresent(PREFIX_ALIAS)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommand(arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ALIAS).get().equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        String.format(MESSAGE_INCOMPLETE_ARGUMENT, AddIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommand(argMultimap.getPreamble(), argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMetricCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHTAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.AddMetricCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Parses input arguments and creates a new object of type AddMetricCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AddMetricCommandParser implements Parser\u003cAddMetricCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Missing attribute and weightage details.\\n%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MESSAGE_INVALID_WEIGHTAGE_FORMAT \u003d \"There is an invalid format of the weightage.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Please ensure your weightage are in numbers.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMetricCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * and returns an AddMetricCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddMetricCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_ATTRIBUTE, PREFIX_WEIGHTAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMetricCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (!argMultimap.arePrefixesPresent(PREFIX_ATTRIBUTE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || !argMultimap.arePrefixesPresent(PREFIX_WEIGHTAGE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    String.format(MESSAGE_INCOMPLETE_ARGUMENT, AddMetricCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            List\u003cString\u003e weightages \u003d argMultimap.getAllValues(PREFIX_WEIGHTAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                List\u003cDouble\u003e castedWeightages \u003d weightages.stream().map(Double::valueOf).collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                return new AddMetricCommand(argMultimap.getPreamble(), argMultimap.getAllValues(PREFIX_ATTRIBUTE),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                        castedWeightages);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_WEIGHTAGE_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.model.hirelah.BestParameter.ATTRIBUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.model.hirelah.BestParameter.METRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.model.hirelah.BestParameter.OVERALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.BestCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * BestParser describes the behavior of the parser that is assigned"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * to parse the command for finding best interviewees."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class BestCommandParser implements Parser\u003cBestCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_PARAMETERS_PROVIDED \u003d \"Multiple parameters for comparisons provided.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses the argument provided by the client."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param arguments The argument entered by the client."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding BestCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException If there is an invalid argument entered by the client."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public BestCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(arguments, PREFIX_METRIC, PREFIX_ATTRIBUTE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            List\u003cString\u003e metricPrefixes \u003d argMultimap.getAllValues(PREFIX_METRIC);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            List\u003cString\u003e attributePrefixes \u003d argMultimap.getAllValues(PREFIX_ATTRIBUTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int numOfParams \u003d getNumberOfTotalParams(metricPrefixes, attributePrefixes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (numOfParams \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new ParseException(MESSAGE_MULTIPLE_PARAMETERS_PROVIDED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else if (numOfParams \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                return new BestCommand(argMultimap.getPreamble(), OVERALL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                if (metricPrefixes.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    return new BestCommand(argMultimap.getPreamble(), metricPrefixes.get(0), METRIC);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    return new BestCommand(argMultimap.getPreamble(), attributePrefixes.get(0), ATTRIBUTE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Obtain the number of parameters a client provides."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefixes The metrics\u0027 prefixes list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefixes The attributes\u0027 prefixes lsit."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The number of total parameters provided by the client."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private int getNumberOfTotalParams(List\u003cString\u003e metricPrefixes, List\u003cString\u003e attributePrefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metricPrefixes.size() + attributePrefixes.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 63,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"-aka\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Prefix PREFIX_OLD \u003d new Prefix(\"-o\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Prefix PREFIX_NEW \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_ATTRIBUTE \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_WEIGHTAGE \u003d new Prefix(\"-w\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_METRIC \u003d new Prefix(\"-m\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"-q\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 6,
      "agnesnatasya": 2,
      "CornCobs": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandSupplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CommandSupplier"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CommandSupplier is a functional interface to abstract the supplying"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * of the command after parsing the command word."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public interface CommandSupplier {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Command getCommand(String args) throws ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 24,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteAttributeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.DeleteMetricCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String EXPECTED_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            DeleteAttributeCommand.MESSAGE_FORMAT + DeleteAttributeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + DeleteIntervieweeCommand.MESSAGE_FORMAT + DeleteIntervieweeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + DeleteMetricCommand.MESSAGE_FORMAT + DeleteMetricCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + DeleteQuestionCommand.MESSAGE_FORMAT + DeleteQuestionCommand.MESSAGE_FUNCTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_QUESTION_NUMBER_MESSAGE \u003d \"The question number provided is invalid.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Pattern.compile(\"(?\u003cdeleteCommandWord\u003e\\\\S+)(?\u003cdeleteArguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_DELETE_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String deleteCommandWord \u003d matcher.group(\"deleteCommandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String deleteArguments \u003d matcher.group(\"deleteArguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (deleteCommandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(deleteArguments, DeleteAttributeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new DeleteAttributeCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(deleteArguments, DeleteIntervieweeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new DeleteIntervieweeCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ParserUtil.checkEmptyArgument(deleteArguments, DeleteQuestionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                int index \u003d Integer.parseInt(deleteArguments.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                return new DeleteQuestionCommand(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                throw new ParseException(INVALID_QUESTION_NUMBER_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case DeleteMetricCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new DeleteMetricCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 11,
      "agnesnatasya": 42,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAttributeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditAttributeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditAttributeCommandParser implements Parser\u003cEditAttributeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Incomplete input format for editing an attribute.\\n%s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAttributeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditAttributeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public EditAttributeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_ATTRIBUTE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ATTRIBUTE).get().equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new EditAttributeCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                argMultimap.getValue(PREFIX_ATTRIBUTE).get()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 7,
      "agnesnatasya": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.EditMetricCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String EXPECTED_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            EditAttributeCommand.MESSAGE_FORMAT + EditAttributeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + EditIntervieweeCommand.MESSAGE_FORMAT + EditIntervieweeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + EditMetricCommand.MESSAGE_FORMAT + EditMetricCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + EditQuestionCommand.MESSAGE_FORMAT + EditQuestionCommand.MESSAGE_FUNCTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_EDIT_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003ceditCommandWord\u003e\\\\S+) (?\u003ceditArguments\u003e.+)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_EDIT_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String editCommandWord \u003d matcher.group(\"editCommandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String editArguments \u003d matcher.group(\"editArguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (editCommandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new EditAttributeCommandParser().parse(editArguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new EditIntervieweeCommandParser().parse(editArguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new EditQuestionCommandParser().parse(editArguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case EditMetricCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new EditMetricCommandParser().parse(editArguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5,
      "agnesnatasya": 30,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditIntervieweeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditIntervieweeCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditIntervieweeCommandParser implements Parser\u003cEditIntervieweeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Incomplete input format for editing an interviewee.\\n%s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditIntervieweeCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditIntervieweeCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public EditIntervieweeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_ALIAS, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkArgument(argMultimap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return new EditIntervieweeCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                argMultimap.getValue(PREFIX_NAME).orElse(\"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                argMultimap.getValue(PREFIX_ALIAS).orElse(\"\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks whether the argument is satisfied or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param argMultimap The argument multimap."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException If the argument is incomplete."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkArgument(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME) \u0026\u0026 !argMultimap.arePrefixesPresent(PREFIX_ALIAS)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argMultimap.getPreamble().equals(\"\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            || (argMultimap.getValue(PREFIX_ALIAS).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_ALIAS).get().equals(\"\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            || (argMultimap.getValue(PREFIX_NAME).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_NAME).get().equals(\"\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 19,
      "agnesnatasya": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditMetricCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHTAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.EditMetricCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Parses input arguments and creates a new object of type EditMetricCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class EditMetricCommandParser implements Parser\u003cEditMetricCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Missing name, attribute and weightage details.\\n%s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String MESSAGE_INVALID_WEIGHTAGE_FORMAT \u003d \"There is an invalid format of the weightage.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Please ensure your weightage are in numbers.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditMetricCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * and returns an EditMetricCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditMetricCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_ATTRIBUTE, PREFIX_WEIGHTAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMetricCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (!argMultimap.arePrefixesPresent(PREFIX_WEIGHTAGE, PREFIX_ATTRIBUTE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 argMultimap.arePrefixesPresent(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new EditMetricCommand(argMultimap.getPreamble(), argMultimap.getValue(PREFIX_NAME).get(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (argMultimap.arePrefixesPresent(PREFIX_WEIGHTAGE, PREFIX_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            List\u003cString\u003e weightages \u003d argMultimap.getAllValues(PREFIX_WEIGHTAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                List\u003cDouble\u003e castedWeightages \u003d weightages.stream().map(Double::valueOf).collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                return new EditMetricCommand(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                        argMultimap.arePrefixesPresent(PREFIX_NAME) ? argMultimap.getValue(PREFIX_NAME).get()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                                                    : \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                        argMultimap.getAllValues(PREFIX_ATTRIBUTE), castedWeightages);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_WEIGHTAGE_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditMetricCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditQuestionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditQuestionCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditQuestionCommandParser implements Parser\u003cEditQuestionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_ARGUMENT \u003d \"Incomplete input format for editing a question.\\n%s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_QUESTION_NUMBER_MESSAGE \u003d \"The question number provided is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditQuestionCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditQuestionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditQuestionCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_QUESTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_QUESTION)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).get().equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new EditQuestionCommand(index, argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(INVALID_QUESTION_NUMBER_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 13,
      "agnesnatasya": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FinaliseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.FinaliseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new FinaliseCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class FinaliseCommandParser implements Parser\u003cFinaliseCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FinaliseCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns a FinaliseCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public FinaliseCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinaliseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new FinaliseCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InterviewParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.OpenResumeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.interview.EndCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.interview.RemarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.interview.ScoreCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.interview.StartQuestionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * InterviewParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * InterviewParser parses the input entered by the client"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when HireLah! is not in interviewing mode."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class InterviewParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final Pattern SCORE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Pattern.compile(\":(?\u003cattribute\u003e[\\\\p{Alpha}][\\\\p{Alpha} ]*?)\\\\s+(?\u003cscore\u003e\\\\d+(\\\\.\\\\d+)?)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final Pattern START_QUESTION_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Pattern.compile(\":start q(?\u003cquestionNumber\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (userInput.startsWith(\":\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return parseSpecialCommand(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (userInput.startsWith(\"resume\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new OpenResumeCommand(arguments.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return new RemarkCommand(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Parses non-remark commands during the interview."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param userInput the user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws ParseException if the command word cannot be identified with any command or attribute to score."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Command parseSpecialCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (userInput.equals(\":end\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new EndCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Matcher startQuestionMatcher \u003d START_QUESTION_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (startQuestionMatcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int questionNumber \u003d Integer.parseInt(startQuestionMatcher.group(\"questionNumber\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new StartQuestionCommand(questionNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Matcher scoreMatcher \u003d SCORE_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (scoreMatcher.matches()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            double score \u003d Double.parseDouble(scoreMatcher.group(\"score\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ScoreCommand(scoreMatcher.group(\"attribute\"), score);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 53,
      "CornCobs": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListAttributeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListIntervieweeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.ListMetricCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListQuestionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Parses input command and creates a new ListCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class ListCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String EXPECTED_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            ListAttributeCommand.MESSAGE_FORMAT + ListAttributeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + ListIntervieweeCommand.MESSAGE_FORMAT + ListIntervieweeCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + ListMetricCommand.MESSAGE_FORMAT + ListMetricCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + ListQuestionCommand.MESSAGE_FORMAT + ListQuestionCommand.MESSAGE_FUNCTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Parses the given {@code String} of commandWord in the context of the ListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param commandWord the command word to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @throws ParseException if the user input is not a valid command word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Command parse(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        final String listCommandWord \u003d commandWord.trim().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        switch (listCommandWord) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListAttributeCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListIntervieweeCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case ListMetricCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new ListMetricCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListQuestionCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 4,
      "bscrow": 37,
      "agnesnatasya": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NavigationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.NavigationQuestionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.NavigationTimeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input command and creates a new Command object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class NavigationCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String EXPECTED_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            NavigationQuestionCommand.MESSAGE_FORMAT + NavigationQuestionCommand.MESSAGE_FUNCTION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + NavigationTimeCommand.MESSAGE_FORMAT + NavigationTimeCommand.MESSAGE_FUNCTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of commandWord in the context of the Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an Command object that will navigate to a certain part"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * of an interviewee\u0027s remark for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param commandWord the command word to be parsed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input is not a valid command word"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Command parse(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String navigationCommandWord \u003d commandWord.trim().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Pattern question \u003d Pattern.compile(\"q(?\u003cquestionNumber\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Pattern time \u003d Pattern.compile(\"(?\u003cminutes\u003e\\\\d+)\\\\.(?\u003cseconds\u003e[0-9][0-9])\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final Matcher questionMatcher \u003d question.matcher(navigationCommandWord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final Matcher timeMatcher \u003d time.matcher(navigationCommandWord);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (questionMatcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            int questionNumber \u003d Integer.parseInt(questionMatcher.group(\"questionNumber\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new NavigationQuestionCommand(questionNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (timeMatcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int minutes \u003d Integer.parseInt(timeMatcher.group(\"minutes\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int seconds \u003d Integer.parseInt(timeMatcher.group(\"seconds\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Duration minutesDuration \u003d Duration.ofMinutes(minutes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Duration secondsDuration \u003d Duration.ofSeconds(seconds);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Duration query \u003d minutesDuration.plus(secondsDuration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new NavigationTimeCommand(query);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 52,
      "CornCobs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NormalParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.OpenResumeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.StartInterviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * NormalParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * NormalParser parses the input entered by the client"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when HireLah! is not in interviewing mode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class NormalParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final HashMap\u003cString, CommandSupplier\u003e suppliers \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"add\", args -\u003e new AddCommandParser().parse(args));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"edit\", args -\u003e new EditCommandParser().parse(args));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"delete\", args -\u003e new DeleteCommandParser().parse(args));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"list\", args -\u003e new ListCommandParser().parse(args));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            put(\"finalise\", args -\u003e new FinaliseCommandParser().parse(args));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            put(\"open\", args -\u003e new OpenReportCommandParser().parse(args));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            put(\"goto\", args -\u003e new NavigationCommandParser().parse(args));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            put(\"best\", args -\u003e new BestCommandParser().parse(args));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"interview\", args -\u003e new StartInterviewCommand(args.trim()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"exit\", args -\u003e new ExitCommand());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"help\", args -\u003e new HelpCommand());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"upload\", args -\u003e new UploadResumeCommandParser().parse(args.trim()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"resume\", args -\u003e new OpenResumeCommand(args.trim()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (suppliers.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return suppliers.get(commandWord).getCommand(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 58,
      "agnesnatasya": 8,
      "CornCobs": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.OpenReportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input command and creates a new OpenReportCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class OpenReportCommandParser implements Parser\u003cOpenReportCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of identifier in the context of the OpenReportCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an OpenReportCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the identifier of the Interviewee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input is not a valid command word"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public OpenReportCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new OpenReportCommand(arguments.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /** Checks whether the argument has any content."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be checked"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return boolean whether the argument has any content"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static boolean isEmptyArgument (String arguments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return (arguments.trim().equals(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /** Raises exception when the argument has no content."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param checkedString the message to be checked"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param messageUsage the message to be displayed if the string is empty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if there is no content"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static void checkEmptyArgument (String checkedString, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (ParserUtil.isEmptyArgument(checkedString)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 15,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UploadResumeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.UploadResumeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Parses the UploadResumeCommand with the identifier and optionally the path to the file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class UploadResumeCommandParser implements Parser\u003cUploadResumeCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public UploadResumeCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_PATH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String path \u003d argMultimap.getValue(PREFIX_PATH).orElse(null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new UploadResumeCommand(argMultimap.getPreamble(), path);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.AppPhase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setSessionsDirectory(Path sessionsDirectory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the attribute list */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cAttribute\u003e getAttributeListView();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the question list */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionListView();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the filtered interviewee list */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the metric list */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    ObservableList\u003cMetric\u003e getMetricListView();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of interviewees for the current interview session */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    IntervieweeList getIntervieweeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of attributes to score interviewees by */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    AttributeList getAttributeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of questions to ask during interviews */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    QuestionList getQuestionList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /** Returns the list of metrics that describes certain weight */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    MetricList getMetricList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /** Returns the list of best N interviewees based on certain measures */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    ObservableList\u003cIntervieweeToScore\u003e getBestNInterviewees();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Sets the current mode of the App */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setAppPhase(AppPhase phase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the current mode of the App */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    AppPhase getAppPhase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the interviewee currently in focus, either when viewing his/her transcript or"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * when interviewing him/her."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setCurrentInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the interviewee currently in focus */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Interviewee getCurrentInterviewee();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /** Checks whether there is an interviewee on focus at the current state */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    boolean hasCurrentInterviewee();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the transcript of the current interviewee */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Transcript getCurrentTranscript();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Starts an interview with the given interviewee. Error if the interviewee has been interviewed. */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void startInterview(Interviewee interviewee) throws IllegalActionException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Indicates that the interview has ended */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void endInterview();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /** Finalizes the interviewees, questions and attributes so they do not change between interviews */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    void finaliseInterviewProperties();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /** Checks whether the interviewees, questions and attributes has been finalised */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    boolean isFinalisedInterviewProperties();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 11,
      "bscrow": 3,
      "agnesnatasya": 14,
      "CornCobs": 36,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.AppPhase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private boolean finalisedInterviewProperties;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private AppPhase appPhase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Interviewee currentInterviewee;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final IntervieweeList intervieweeList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final AttributeList attributeList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final QuestionList questionList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final MetricList metricList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ObservableList\u003cIntervieweeToScore\u003e bestNIntervieweeList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.appPhase \u003d AppPhase.NORMAL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributeList \u003d new AttributeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.metricList \u003d new MetricList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.bestNIntervieweeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs, IntervieweeList initialInterviewees,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                        AttributeList initialAttributes, QuestionList initialQuestions,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                        MetricList initialMetrics, Boolean finalised) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.appPhase \u003d AppPhase.NORMAL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.finalisedInterviewProperties \u003d finalised;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.intervieweeList \u003d initialInterviewees;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeList \u003d initialAttributes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.questionList \u003d initialQuestions;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.metricList \u003d initialMetrics;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.bestNIntervieweeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return userPrefs.getSessionsDirectory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d App state setters/getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setAppPhase(AppPhase phase) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.appPhase \u003d phase;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the current mode of the App"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AppPhase getAppPhase() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return appPhase;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the interviewee currently in focus, either when viewing his/her transcript or"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * when interviewing him/her."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewee the interviewee in focus."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setCurrentInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.currentInterviewee \u003d interviewee;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee getCurrentInterviewee() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return currentInterviewee;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks whether there is an interviewee currently in focus"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return boolean whether there is an interviewee in focus."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean hasCurrentInterviewee() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return !(this.currentInterviewee \u003d\u003d null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * A utility to get the Transcript of the current Interviewee (guaranteed to exist)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Do not use when there is no interviewee."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Transcript getCurrentTranscript() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return currentInterviewee.getTranscript().get();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void startInterview(Interviewee interviewee) throws IllegalActionException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (interviewee.isInterviewed()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"Interviewee has been interviewed already!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setCurrentInterviewee(interviewee);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (currentInterviewee.getTranscript().isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            currentInterviewee.setTranscript(new Transcript(questionList, attributeList));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setAppPhase(AppPhase.INTERVIEW);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void endInterview() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Transcript transcript \u003d getCurrentTranscript();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        currentInterviewee.setTranscript(null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        currentInterviewee.setTranscript(transcript);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setCurrentInterviewee(null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setAppPhase(AppPhase.NORMAL);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Observable accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getAttributeListView() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributeList.getObservableList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionListView() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questionList.getObservableList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return intervieweeList.getObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ObservableList\u003cMetric\u003e getMetricListView() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return metricList.getObservableList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Model component accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AttributeList getAttributeList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributeList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public QuestionList getQuestionList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public MetricList getMetricList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metricList;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ObservableList\u003cIntervieweeToScore\u003e getBestNInterviewees() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return bestNIntervieweeList;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Finalizes the questions and attributes so they do not change between interviews."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void finaliseInterviewProperties() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.finalisedInterviewProperties \u003d true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Checks whether the questions and attributes has been finalised */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isFinalisedInterviewProperties() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.finalisedInterviewProperties;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 19,
      "bscrow": 14,
      "agnesnatasya": 18,
      "CornCobs": 85,
      "weiichengg": 14,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Path sessionsDirectory \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setSessionsDirectory(newUserPrefs.getSessionsDirectory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return sessionsDirectory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getIntervieweeDirectory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"interviewee.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getAttributeDirectory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"attribute.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getQuestionDirectory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"question.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getMetricDirectory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"metric.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getTranscriptDirectory() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"transcript\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getModelDirectory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sessionsDirectory.resolve(\"model.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory(Path sessionsDirectory) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireNonNull(sessionsDirectory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.sessionsDirectory \u003d sessionsDirectory;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 sessionsDirectory.equals(o.sessionsDirectory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return Objects.hash(guiSettings, sessionsDirectory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        sb.append(\"\\nLocal data directory location : \" + sessionsDirectory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 10,
      "weiichengg": 17,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AppPhase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * An enum indicating the mode the app is operating in currently, affecting the Parser used and thus the commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * understood by the app"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eNormal - After a session is opened. Can perform most CRUD operations with the Model\u003c/li\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eInterview - During an interview. Can record remarks, score attributes and answer questions\u003c/li\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public enum AppPhase {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    INTERVIEW"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Attribute.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Attribute"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttribute class represents the parameters that are"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * taken into account to assess the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Attribute {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            \"A name of attribute should only contain alphabet characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs an Attribute instance. Use the static factory method {@link #of(String)} for unvalidated input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the attribute."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs an Attribute with validation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The name of the attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The created attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the name is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static Attribute of(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!isValidAttributeName(name)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new Attribute(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static boolean isValidAttributeName(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Attribute // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Attribute) other).name)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 50,
      "CornCobs": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AttributeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeList class manages the list of attributes that have been"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. AttributeList can retrieve the attributes using"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class AttributeList implements Iterable\u003cAttribute\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String ALREADY_EXISTS \u003d \"This attribute is already exists!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple attributes with the same prefix.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No attributes with the entered name or prefix.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cAttribute\u003e attributes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs an AttributeList instance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AttributeList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getObservableList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(attributes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the attribute to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributeName The attribute name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the attribute already exists, or the name is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void add(String attributeName) throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Attribute attribute \u003d Attribute.of(attributeName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (isDuplicate(attribute)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.add(attribute);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Find the attribute based on its full name, then by prefix if no match is found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute find(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute toFind \u003d Attribute.of(attributePrefix); // not inserted, need not validate"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (attributes.contains(toFind)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return toFind;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Match the string as a prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        List\u003cAttribute\u003e matches \u003d attributes.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .filter(attr -\u003e attr.toString().startsWith(attributePrefix))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (matches.size() \u003e 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } else if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return matches.get(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Edits the attribute based on its full name, then by prefix if no match is found."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param updatedAttribute The name of the updated attribute."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The edited attribute."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute edit(String attributePrefix, String updatedAttribute) throws IllegalValueException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute newAttribute \u003d Attribute.of(updatedAttribute);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (isDuplicate(newAttribute)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute currentAttribute \u003d find(attributePrefix);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        int index \u003d attributes.indexOf(currentAttribute);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.set(index, new Attribute(updatedAttribute));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return currentAttribute;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes the attribute by its full name, then by prefix if no match is found."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The deleted attribute"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute delete(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute attribute \u003d find(attributePrefix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.remove(attribute);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean isDuplicate(Attribute attribute) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributes.contains(attribute);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Iterator\u003cAttribute\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributes.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return attributes.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                || (other instanceof AttributeList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 attributes.equals(((AttributeList) other).attributes)); // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 86,
      "CornCobs": 43,
      "weiichengg": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/BestParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * BestParameter describes the possible parameters"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * to sort the interviewees."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public enum BestParameter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    OVERALL,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    ATTRIBUTE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    METRIC"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Interviewee.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A class to represent Interviewee candidates in a Session. They have"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003ea unique ID per session.\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003ethe candidate\u0027s full name.\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eoptionally, an alias to refer to the candidate.\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eoptionally, a resume (a file object).\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003ea Transcript if they have been interviewed.\u003c/li\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Interviewee {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \"Names and aliases should not be numbers, eg. 12345, and should not be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final StringProperty fullName \u003d new SimpleStringProperty(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final StringProperty alias \u003d new SimpleStringProperty(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final ObjectProperty\u003cFile\u003e resume \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final ObjectProperty\u003cTranscript\u003e transcript \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates a new Interviewee in the system which starts with no alias, no resume and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * being not yet interviewed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName The interviewee\u0027s full name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param id The interviewee\u0027s unique interviewee id."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee(String fullName, int id) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setFullName(fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return fullName.getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the full name. Allows renaming of Interviewees."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName the new name of the interviewee."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the alias given is an invalid identifier."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setFullName(String fullName) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName.setValue(fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public StringProperty fullNameProperty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cString\u003e getAlias() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return Optional.ofNullable(alias.getValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the alias of the interviewee if absent, or modifies it if present."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The new alias to refer to this interviewee."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the alias given is an invalid identifier."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setAlias(String alias) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(alias);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.alias.setValue(alias);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public StringProperty aliasProperty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cFile\u003e getResume() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return Optional.ofNullable(resume.getValue());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setResume(File resume) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.resume.setValue(resume);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObjectProperty\u003cFile\u003e resumeProperty() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cTranscript\u003e getTranscript() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return Optional.ofNullable(transcript.getValue());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setTranscript(Transcript transcript) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assert this.transcript.getValue() \u003d\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.transcript.setValue(transcript);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObjectProperty\u003cTranscript\u003e transcriptProperty() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcript;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Checks if an interviewee has completed their interview. {@code getScore} can be called if this is true."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if the interview has been completed, false otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isInterviewed() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return getTranscript().map(Transcript::isCompleted).orElse(false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Gets the score of an interviewee that has already been interviewed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * It is guaranteed that this method is only called on Interviewees that have been interviewed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param attribute the Attribute to retrieve the score for."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the score of the given Attribute."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws NullPointerException if Interviewee has not been interviewed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                              However, it is guaranteed not to occur at runtime"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                              as the IntervieweeList is filtered before sorting by score."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public double getScore(Attribute attribute) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcript.getValue().getAttributeScore(attribute);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Validates a string meant to be used as an alias or the full name to ensure it is"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * not a valid number, and is not the empty string. Any other string will be considered valid,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * since there are names that contain punctuation, non-ascii characters and even numbers."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier the alias or name to validate."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if identifier is empty, or is a valid number"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkValidIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If successfully parsed as an integer, reject the identifier"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If identifier only contains whitespace or is an empty string, reject it"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (identifier.isBlank()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return getFullName();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (other \u003d\u003d this) { // short circuit if it is the same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } else if (!(other instanceof Interviewee)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Interviewee interviewee \u003d (Interviewee) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return interviewee.toString().equals(toString())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 interviewee.getAlias().equals(getAlias())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 (interviewee.getId() \u003d\u003d getId())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 interviewee.isInterviewed() \u003d\u003d isInterviewed()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 interviewee.getTranscript().equals(getTranscript())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 interviewee.getResume().equals(getResume());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return Objects.hash(fullName, id, alias, resume, transcript);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 1,
      "CornCobs": 161,
      "weiichengg": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/IntervieweeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A collection of Interviewees that does not allow 2 Interviewees with the exact same full name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * It exposes a single accessor method, getInterviewee, which handles all forms of access by id,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * alias or full name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IntervieweeList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The unique ID assigned to an interviewee for the entire session. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private int uniqueIntervieweeId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The actual collection of interviewees. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cInteger, Interviewee\u003e interviewees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* Mappings from aliases and full names to the interviewee indices for efficient lookup. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cString, Integer\u003e identifierIndices;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cInterviewee\u003e observableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes an IntervieweeList with data from a saved session."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param uniqueIntervieweeId The next id to assign from the previous session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewees The collection of interviewees from the previous session."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifierIndices The identifiers of interviewees from the previous session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList(int uniqueIntervieweeId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cInteger, Interviewee\u003e interviewees,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cString, Integer\u003e identifierIndices) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.uniqueIntervieweeId \u003d uniqueIntervieweeId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.interviewees \u003d interviewees;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifierIndices \u003d identifierIndices;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.observableList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee -\u003e new Observable[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewee.fullNameProperty(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewee.aliasProperty(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewee.resumeProperty(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                interviewee.transcriptProperty()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.observableList.addAll(interviewees.values());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new empty IntervieweeList with no interviewees. uniqueInterviewId starts at 1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(1, new TreeMap\u003c\u003e(), new TreeMap\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Restores an IntervieweeList from saved session."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param id the current uniqueIntervieweeId."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param storedInterviewees the list of stored interviewees."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return The restored {@code IntervieweeList}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if the saved interviewees result in an invalid IntervieweeList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static IntervieweeList fromList(int id, List\u003cInterviewee\u003e storedInterviewees) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        IntervieweeList intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        intervieweeList.uniqueIntervieweeId \u003d id;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (Interviewee interviewee : storedInterviewees) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (interviewee.getId() \u003e\u003d id"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    || intervieweeList.interviewees.containsKey(interviewee.getId())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                throw new IllegalValueException(\"Illegal interviewee id value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            intervieweeList.interviewees.put(interviewee.getId(), interviewee);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (intervieweeList.identifierIndices.containsKey(interviewee.getFullName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    || (interviewee.getAlias().isPresent()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    \u0026\u0026 intervieweeList.identifierIndices.containsKey(interviewee.getAlias().get()))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                throw new IllegalValueException(\"Duplicate identifiers\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            intervieweeList.identifierIndices.put(interviewee.getFullName(), interviewee.getId());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            interviewee.getAlias().ifPresent(alias -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    intervieweeList.identifierIndices.put(alias, interviewee.getId()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        intervieweeList.observableList.addAll(intervieweeList.interviewees.values());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getObservableList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(observableList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int getUniqueIntervieweeId() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.uniqueIntervieweeId;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to create a new Interviewee object and add it to the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException In the following situations:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is already taken."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is invalid (is either blank or is a number)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d createInterviewee(name);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.put(interviewee.getId(), interviewee);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(name, interviewee.getId());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        observableList.add(interviewee);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * A convenience function to add an interviewee and assign an alias immediately. It can fail after"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * adding the interviewee, while assigning the alias, if the alias is already taken. In that case,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * the interviewee is still added, but the alias is not assigned."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name or alias is already taken or invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException Should not be thrown as the interviewee definitely exists, and does"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                not have an alias when initially created."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addIntervieweeWithAlias(String name, String alias)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        addInterviewee(name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setAlias(name, alias);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets an alias for the given interviewee which can be used to retrieve said interviewee via getInterviewee."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the alias is already taken, or is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException In the following situations:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setAlias(String identifier, String alias) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(alias);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Store old alias before overwriting, to delete old alias from identifierIndices after setting"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // in case the new alias is invalid and Interviewee#setAlias throws an Exception."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Optional\u003cString\u003e oldAlias \u003d interviewee.getAlias();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewee.setAlias(alias);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        oldAlias.ifPresent(old -\u003e identifierIndices.remove(old));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(alias, interviewee.getId());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the full name of the given interviewee."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName The new name to overwrite the interviewee\u0027s previous full name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If fullName is already taken, or is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException In the following situations:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setName(String identifier, String fullName) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(fullName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Store old full name before overwriting, to delete from identifierIndices after setting"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // in case the new full name is invalid and Interviewee#setFullName throws an Exception."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String oldName \u003d interviewee.getFullName();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewee.setFullName(fullName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.remove(oldName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(fullName, interviewee.getId());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void setNameAndAlias(String identifier, String fullName, String alias) throws IllegalValueException,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            IllegalActionException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkDuplicateIdentifier(fullName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkDuplicateIdentifier(alias);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Interviewee interviewee \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // Store old full name before overwriting, to delete from identifierIndices after setting"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // in case the new full name is invalid and Interviewee#setFullName throws an Exception."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        String oldName \u003d interviewee.getFullName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        interviewee.setFullName(fullName);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        interviewee.setAlias(alias);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        identifierIndices.remove(oldName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        identifierIndices.put(fullName, interviewee.getId());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes an Interviewee with the given identifier."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void deleteInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee toDelete \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.remove(toDelete.getId());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.remove(toDelete.getFullName());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        observableList.remove(toDelete);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        toDelete.getAlias().ifPresent(alias -\u003e identifierIndices.remove(alias));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves an Interviewee given a unique identifier, which can be the Interviewee\u0027s id, full name or alias."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The Interviewee\u0027s id, full name or an alias."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The retrieved Interviewee."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee getInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee result;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // attempts to parse identifier as an interviewee id"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int id \u003d Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // if not an id, attempts to match identifier with either full name or alias"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer id \u003d identifierIndices.get(identifier);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalActionException(\"No interviewee with the given identifier can be found\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"No interviewee with this id can be found\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates an Interviewee with the given name, assigning it the next uniqueIntervieweeId."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Only increments the id if the interviewee was created successfully."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The name of the interviewee."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return A new Interviewee object."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name given is an invalid name."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Interviewee createInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d new Interviewee(name, uniqueIntervieweeId);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Only increment id if interviewee was successfully created"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        uniqueIntervieweeId++;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interviewee;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkDuplicateIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (identifierIndices.containsKey(identifier)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"An Interviewee with this name or alias already exists!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                || (other instanceof IntervieweeList // instanceof handles nulls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 interviewees.equals(((IntervieweeList) other).interviewees)); // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return observableList.hashCode();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 16,
      "CornCobs": 204,
      "weiichengg": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/IntervieweeToScore.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * IntervieweeToScore class maps the interviewee to a certain"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * score, based on which parameter the user provides."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class IntervieweeToScore {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private Interviewee interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double score;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public IntervieweeToScore(Interviewee interviewee, double score) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Interviewee getInterviewee() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.interviewee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public double getScore() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof IntervieweeToScore"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 interviewee.equals(((IntervieweeToScore) other).interviewee)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 score \u003d\u003d ((IntervieweeToScore) other).score);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Metric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Metric"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetric class abstracts the comparator of the interviewee"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * based on the respective weight of the attributes.\u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Metric {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            \"A name of metric should only contain alphabet characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private HashMap\u003cAttribute, Double\u003e attributeToWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Metric instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the metric."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric(String name, HashMap\u003cAttribute, Double\u003e attributeToWeight) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight \u003d attributeToWeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Metric with validation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the metric."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The created metric."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the name is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static Metric of(String name, HashMap\u003cAttribute, Double\u003e attributeToWeight) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!isValidMetricName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return new Metric(name, attributeToWeight);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * used when storing the current instance of"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Metric into its Json file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * For example,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Efficient-a4.0-a"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return String representation of the hashmap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public String hashMapToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (Map.Entry\u003cAttribute, Double\u003e entry : attributeToWeight.entrySet()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            String key \u003d entry.getKey().toString() + \"-a\"; //\"-a\" is used as seperater"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            sb.append(key);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            String value \u003d entry.getValue().toString() + \"-a\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            sb.append(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Get the name given to a metric."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @return String name of the metric"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Get the map of attribute to weight."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @return HashMap of Attribute to Weight."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public HashMap\u003cAttribute, Double\u003e getMap() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return this.attributeToWeight;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static boolean isValidMetricName(String test) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric setName(String updatedName) throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return Metric.of(updatedName, new HashMap\u003c\u003e(attributeToWeight));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Set a particular attribute to a value."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attribute The attribute that the value wants to be set."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param value The value of the attribute."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String setValueToAttribute(Attribute attribute, double value) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight.put(attribute, value);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully set the value of attribute %s to %.2f\", attribute, value);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a Comparator for Interviewee based on the weighted score."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The Comparator instance."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Comparator\u003cInterviewee\u003e getComparator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return (interviewee, anotherInterviewee) -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreFirst \u003d computeScore(interviewee);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreSecond \u003d computeScore(anotherInterviewee);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return totalScoreSecond - totalScoreFirst \u003c 0 ? -1 : totalScoreFirst \u003d\u003d totalScoreSecond ? 0 : 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Computes the final score of an interviewee. Can only be called on Interviewees that have been"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * interviewed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewee The interviewee to be computed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The score of the interviewee based on the metric."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public double computeScore(Interviewee interviewee) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Map.Entry\u003cAttribute, Double\u003e mapElement : attributeToWeight.entrySet()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Attribute attribute \u003d mapElement.getKey();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            double weight \u003d mapElement.getValue();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            totalScore +\u003d weight * interviewee.getScore(attribute);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Metric // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Metric) other).name)); // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 109,
      "bscrow": 19,
      "CornCobs": 15,
      "weiichengg": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/MetricList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * MetricList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetricList class manages the list of metrics that have been"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. MetricList can retrieve the attributes using"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class MetricList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String ALREADY_EXISTS_MESSAGE \u003d \"This metric is already exists!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple metrics with the same prefix.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String INCOMPLETE_MESSAGE \u003d \"The number of attributes and the number of weights is not equal.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No metrics with the entered name or prefix.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ObservableList\u003cMetric\u003e metrics;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a MetricList instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public MetricList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.metrics \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ObservableList\u003cMetric\u003e getObservableList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        //return FXCollections.unmodifiableObservableList(metrics);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return metrics;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the metric to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricName The metric name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the name of the metric already exists."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add(String metricName, AttributeList attributes,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    List\u003cString\u003e attributePrefixes, List\u003cDouble\u003e weightages) throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!isEqualSizeMapping(attributePrefixes, weightages)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(INCOMPLETE_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        HashMap\u003cAttribute, Double\u003e attributeToScore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (int i \u003d 0; i \u003c attributePrefixes.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.find(attributePrefixes.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            attributeToScore.put(attribute, weightages.get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric metric \u003d Metric.of(metricName, attributeToScore);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        boolean isDuplicate \u003d isDuplicate(metric);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        metrics.add(metric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Edits the name or the weightage of a metric."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the current metric."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param updatedName The updated name of the metric."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The list of attributes that is available in a sessiong."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefixes The list of attribute prefixes."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param weightages The list of the weightages that wants to be added."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If there is a formatting error in the command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String edit(String metricPrefix, String updatedName, AttributeList attributes,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                     List\u003cString\u003e attributePrefixes, List\u003cDouble\u003e weightages) throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric metric \u003d find(metricPrefix);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric updatedMetric \u003d metric.setName(updatedName.equals(\"\") ? metric.getName() : updatedName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!updatedName.equals(\"\") \u0026\u0026 isDuplicate(updatedMetric)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS_MESSAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (int i \u003d 0; i \u003c attributePrefixes.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.find(attributePrefixes.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            updatedMetric.setValueToAttribute(attribute, weightages.get(i));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        int index \u003d metrics.indexOf(metric);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        metrics.set(index, updatedMetric);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metric.getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Find the metric based on its full name, then by prefix if no match is found."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the metric."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric find(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Optional\u003cMetric\u003e exactMetric \u003d metrics.stream().filter(metric -\u003e metric.toString()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .equals(metricPrefix))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (exactMetric.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            checkPrefix(metricPrefix);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return metrics.stream().filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    .get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return exactMetric.get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes the metric by its full name, then by prefix if no match is found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric delete(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric metric \u003d find(metricPrefix);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        metrics.remove(metric);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metric;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks the number of metrics that starts with the prefix."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkPrefix(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        long startWithPrefix \u003d metrics.stream()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (startWithPrefix \u003e 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (startWithPrefix \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isEqualSizeMapping(List\u003cString\u003e attributePrefixes, List\u003cDouble\u003e weightages) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attributePrefixes.size() \u003d\u003d weightages.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks whether the checklist is complete or not."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param checklist The checklist of whether all attributes are listed by the client."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isNotCompleteChecklist(HashMap\u003cAttribute, Boolean\u003e checklist) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (Map.Entry\u003cAttribute, Boolean\u003e entry : checklist.entrySet()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            result \u003d result \u0026\u0026 entry.getValue();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return !result;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Builds a checklist from the attribute list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributes The attribute list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The checklist of whether an attribute\u0027s score is stated."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private HashMap\u003cAttribute, Boolean\u003e initiateChecklist(AttributeList attributes) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        ObservableList\u003cAttribute\u003e attributeList \u003d attributes.getObservableList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        HashMap\u003cAttribute, Boolean\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (Attribute attribute: attributeList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            hashMap.put(attribute, false);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return hashMap;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Metric metric) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.stream().anyMatch(x -\u003e x.getName().equals(metric.getName()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                || (other instanceof MetricList // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 metrics.equals(((MetricList) other).metrics)); // state check"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return metrics.hashCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 189,
      "CornCobs": 10,
      "weiichengg": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Question"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestion class represents the questions that wants to be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * asked to the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Question instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param description The description of the question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 description.equals(((Question) other).description)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 42,
      "CornCobs": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/QuestionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * QuestionList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestionList class manages the list of questions that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * have been added by the interviewer. Questions can be retrieved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * by their ordering.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String ALREADY_EXISTS \u003d \"This question is already exists!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(questions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the question to the list, if the input is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionDescription The question."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the question already exists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void add(String questionDescription) throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question question \u003d new Question(questionDescription);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (isDuplicate(question)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        questions.add(question);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the number of questions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the number of questions in QuestionList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questions.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Finds the question based on its index, if the index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param index The index of the question."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Question instance."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question find(int index) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"No such question exists!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return questions.get(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the question based on its index, if the index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param index The index that wants to be deleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The deleted question."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question delete(int index) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"No such question exists!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question question \u003d questions.get(index - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questions.remove(index - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Edits the question based on its index with a new description,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * if the index string entered is a valid integer string."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param index The index of the question that wants to be edited."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param description The updated description of the question."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding question."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question edit(int index, String description) throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"No such question exists!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question newQuestion \u003d new Question(description);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (isDuplicate(newQuestion)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(ALREADY_EXISTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question current \u003d questions.get(index - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question question \u003d new Question(description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        questions.set(index - 1, question);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean isDuplicate(Question question) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questions.stream().anyMatch(question::equals);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questions.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                \u0026\u0026 questions.equals(((QuestionList) other).questions)); // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 93,
      "CornCobs": 25,
      "weiichengg": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/QuestionRemark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A marker in the RemarkList to indicate when the questions were answered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class QuestionRemark extends Remark {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private int questionNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public QuestionRemark(Duration time, int questionNumber, Question question) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(time, question.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getQuestionNumber() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questionNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                || (other instanceof QuestionRemark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 this.getTime().equals(((QuestionRemark) other).getTime())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 this.getMessage().equals(((QuestionRemark) other).getMessage())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 this.getQuestionNumber() \u003d\u003d ((QuestionRemark) other).getQuestionNumber());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Stores the remark message that are inserted by the interviewer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * at any given time of the interview. It can be a part of an answer to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * a particular question, or just a normal remark."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final Duration time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a {@code Remark} with the given message at given time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param time The time when the remark was made."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param message The remark message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Remark(Duration time, String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves the time of the interview when this {@code Remark}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was created."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return  The Duration since interview start when this {@code Remark} was created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Duration getTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Formats the time in a readable format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the formatted time string in minutes and seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"%d:%02d\", time.toMinutes(), time.toSecondsPart());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (other instanceof Remark) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Remark otherRemark \u003d ((Remark) other);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return time.equals(otherRemark.getTime())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    \u0026\u0026 message.equals(otherRemark.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 25,
      "agnesnatasya": 35,
      "weiichengg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/RemarkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * A list of remarks that are associated  with a particular interview session of an {@code Interviewee}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Some remarks are associated with a question, as it is part of the answer to a question, and some remarks do not."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Both are able to be inserted to this remark list. Once a remark has been added, it cannot be removed from the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * @see Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class RemarkList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final Instant startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final ObservableList\u003cRemark\u003e remarks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int[] questionIndices;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public RemarkList(int questionsCount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(questionsCount, Instant.now());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public RemarkList(int questionsCount, Instant startTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questionIndices \u003d new int[questionsCount + 1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the remark list encapsulated by {@code RemarkList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cRemark\u003e getRemarks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(remarks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Adds a remark to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message The message of the remark to be added to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addRemark(String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        remarks.add(new Remark(Duration.between(startTime, Instant.now()), message));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Adds a remark to the list with given time. Used in storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void addRemark(String message, Duration time) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        remarks.add(new Remark(time, message));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates the beginning of an answer to a question by inserting a QuestionRemark into the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param questionNumber the question number."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param question the question being asked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void startQuestion(int questionNumber, Question question)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (isQuestionAnswered(questionNumber)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"Question is already answered!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questionIndices[questionNumber] \u003d remarks.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        remarks.add(new QuestionRemark(Duration.between(startTime, Instant.now()), questionNumber, question));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Adds a question remark to the list with given time. Used in storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void startQuestion(int questionNumber, Question question, Duration time)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (isQuestionAnswered(questionNumber)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalActionException(\"Question is already answered!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        questionIndices[questionNumber] \u003d remarks.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        remarks.add(new QuestionRemark(time, questionNumber, question));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the number of {@code Remark}s in {@code RemarkList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The number of {@code Remark}s in this {@code RemarkList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private int size() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return this.remarks.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves index of {@code Remark} created around the given time."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param time Time queried."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The index of the {@code Remark} at or just after time, or the last index"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         if time exceeds the interview duration."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getIndexAtTime(Duration time) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return IntStream.range(0, size())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .filter(i -\u003e remarks.get(i).getTime().compareTo(time) \u003e\u003d 0)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .orElse(size() - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks if a question is answered during the interview"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * by checking whether there is a {@code Remark} that is associated with it."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param questionNumber Question that is checked against."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return Whether the question has {@code Remark} associated with it."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean isQuestionAnswered(int questionNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return questionIndices[questionNumber] !\u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    \"There are only %d questions in this interview session.\", questionIndices.length - 1)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves the index of the Remark when this {@code Question}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * was first asked."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param questionIndex Question number that is queried."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The index of the {@code Remark} in the RemarkList"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         that was first associated with this {@code Question}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws IllegalActionException If the question queried has not been answered."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public int getIndexOfQuestion(int questionIndex) throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!isQuestionAnswered(questionIndex)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"This question was not answered!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return questionIndices[questionIndex];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public int getNumbOfQns() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questionIndices.length;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Instant getStartTime() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 68,
      "CornCobs": 57,
      "weiichengg": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Transcript.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Encapsulates all the details that are put by the interviewer during the interview session"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * for a particular {@code Interviewee}. It stores the {@code RemarkList} which contains all {@code Remark}s"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * of this interview, the {@code File} of the audio recorded for this interview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * and the attribute scores inside a HashMap."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Transcript {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final RemarkList remarkList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final ObservableMap\u003cAttribute, Double\u003e attributeToScoreMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final ObservableList\u003cAttribute\u003e attributes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final ObservableList\u003cDouble\u003e scores;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Transcript} object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * that are associated with a particular interviewee, starting now."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public Transcript(QuestionList questions, AttributeList attributes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this(questions, attributes, Instant.now());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code Transcript} object associated with a particular interviewee."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Transcript(QuestionList questions, AttributeList attributes, Instant startTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.remarkList \u003d new RemarkList(questions.size(), startTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributeToScoreMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        for (Attribute attribute : attributes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            attributeToScoreMap.put(attribute, Double.NaN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        scores \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.attributes \u003d attributes.getObservableList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        for (Attribute attribute : attributes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            scores.add(Double.NaN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Instant getStartTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return remarkList.getStartTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an unmodifiable view of the {@code RemarkList} associated with this {@code Transcript}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return An {@code ObservableList} tracking changes to the RemarkList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cRemark\u003e getRemarkListView() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(remarkList.getRemarks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an unmodifiable view of the attributes and scores associated with this {@code Transcript}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return An {@code ObservableMap} tracking changes to the scores."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableMap\u003cAttribute, Double\u003e getAttributeToScoreMapView() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableMap(attributeToScoreMap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getAttributesToBeScored() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return FXCollections.unmodifiableObservableList(attributes);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ObservableList\u003cDouble\u003e getAttributeScores() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return FXCollections.unmodifiableObservableList(scores);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Sets an {@code Attribute} of this {@code Interviewee} to have a certain score."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute that is to be updated."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param score The score of this {@code Attribute}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void setAttributeScore (Attribute attribute, Double score) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap.put(attribute, score);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.scores.set(this.attributes.indexOf(attribute), score);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the score of this {@code Attribute} of this {@code Interviewee}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute whose score is to be retrieved."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The score of the given attribute as recorded in the interview."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public double getAttributeScore(Attribute attribute) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // return this.attributeToScoreMap.get(attribute);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return scores.get(attributes.indexOf(attribute));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates if an attribute has been scored yet."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param attribute the attribute to check."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if attribute has a score, false otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isAttributeScored(Attribute attribute) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //return this.attributeToScoreMap.containsKey(attribute);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //return !scores.get(attributes.indexOf(attribute)).isNaN();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return !this.attributeToScoreMap.get(attribute).isNaN();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Adds a remark to the {@code RemarkList} in this {@code Transcript}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message the message of the remark to add."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addRemark(String message) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        remarkList.addRemark(message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Adds a remark to the Transcript with given time. Used in storage."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void addRemark(String message, Duration time) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        remarkList.addRemark(message, time);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Marks the beginning of a {@code Question} in this {@code Transcript}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void startQuestion(int questionNumber, Question question)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        remarkList.startQuestion(questionNumber, question);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Marks the beginning of a {@code Question} in this {@code Transcript} with given time. Used in storage."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void startQuestion(int questionNumber, Question question, Duration time)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        remarkList.startQuestion(questionNumber, question, time);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves index of {@code Remark} created around the given time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param time Time queried."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The index of the {@code Remark} at or just after time, or the last index"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         if time exceeds the interview duration."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getIndexAtTime(Duration time) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return remarkList.getIndexAtTime(time);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves the index of the Remark when this {@code Question}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * was first asked."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param questionIndex Index of the question that is queried."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The index of the {@code QuestionRemark} in the RemarkList associated with this question."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public int getIndexOfQuestion(int questionIndex) throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarkList.getIndexOfQuestion(questionIndex);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 26,
      "CornCobs": 62,
      "agnesnatasya": 49,
      "weiichengg": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/exceptions/IllegalActionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Signals that a method was invoked that results in an illegal model state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IllegalActionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message should contain relevant information on the illegal operation attempted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IllegalActionException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/AttributeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * AttributeStorage containing the file path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * to store the attributes objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class AttributeStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AttributeStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * constructor to initialise the Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param newPath path"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public AttributeStorage(Path newPath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.path \u003d newPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * get the path of the attribute directory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalAttributeList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error when processing the fille"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cAttributeList\u003e readAttribute(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableAttributes\u003e jsonAttribute \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableAttributes.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonAttribute.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonAttribute.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Attribute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  source of the data. Cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveAttributes(AttributeList source) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAttributes(source), path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/IntervieweeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * IntervieweeStorage containing the file path"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * to store the Interviewee objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class IntervieweeStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IntervieweeStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public IntervieweeStorage(Path newPath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.path \u003d newPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Interviewee."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalIntervieweeList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error when reading the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cIntervieweeList\u003e readInterviewee(Path filePath, QuestionList questionList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     AttributeList attributeList, Boolean finalised,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     TranscriptStorage storage) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableInterviewee\u003e jsonInterviewee \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableInterviewee.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonInterviewee.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonInterviewee.get().toModelType(questionList, attributeList, storage, finalised));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Interviewee"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  source of the data. Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveInterview(IntervieweeList source) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInterviewee(source), path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedAttributes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Attribute}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonAdaptedAttributes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final String attribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedAttributes(@JsonProperty(\"attribute\") String attribute) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedAttributes(Attribute attribute) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attribute \u003d attribute.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted Attribute object into the model\u0027s {@code Attribute} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attribute."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Attribute toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (attribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid Attribute.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Attribute(attribute);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedInterviewee.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Interviewee}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonAdaptedInterviewee {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Integer id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String resume;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final boolean transcript;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterviewee} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedInterviewee(@JsonProperty(\"fullName\") String fullName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                  @JsonProperty(\"id\") int id, @JsonProperty(\"alias\") String alias,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                  @JsonProperty(\"resume\") String resume,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                  @JsonProperty(\"transcript\") boolean transcript) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.resume \u003d resume;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.transcript \u003d transcript;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedInterviewee(Interviewee source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        fullName \u003d source.getFullName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        alias \u003d source.getAlias().orElse(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        resume \u003d source.getResume().map(File::getAbsolutePath).orElse(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        transcript \u003d source.getTranscript().isPresent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Interviewee} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return the stored Interviewee."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Interviewee toModelType(QuestionList questionList, AttributeList attributeList,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                   TranscriptStorage storage, Boolean finalised)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Interviewee interviewee \u003d new Interviewee(fullName, id);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (alias !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee.setAlias(alias);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (resume !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewee.setResume(new File(resume));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (transcript) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (!finalised) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalValueException(\"Model not finalised, illegal transcript detected\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Optional\u003cTranscript\u003e transcript \u003d storage.readTranscript(id, questionList, attributeList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (transcript.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                throw new IllegalValueException(\"There is is an error in loading the transcript for \" + fullName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            interviewee.setTranscript(transcript.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return interviewee;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 18,
      "weiichengg": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedMetric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Metric}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonAdaptedMetric {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private String attributeToWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedMetric} with the the relevant details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedMetric(@JsonProperty(\"name\") String source,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                             @JsonProperty(\"attributeToWeight\") String attributeToWeight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.name \u003d source;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeToWeight \u003d attributeToWeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedMetric(Metric source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.name \u003d source.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeToWeight \u003d source.hashMapToString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted metric object into the model\u0027s {@code Metric} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted metric."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Metric toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid name for the matric\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (attributeToWeight \u003d\u003d null || attributeToWeight.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid Attribute to weight pair stored!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        String[] source \u003d attributeToWeight.split(\"-a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        HashMap\u003cAttribute, Double\u003e destination \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (int i \u003d 0; i \u003c source.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Attribute key \u003d new Attribute(source[i++]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Double value \u003d Double.parseDouble(source[i]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            destination.put(key, value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Metric(name, destination);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedQuestions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonAdaptedQuestions {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedQuestions(@JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedQuestions(Question source) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        description \u003d source.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid Question\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Question(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedRemark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionRemark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * A class to represent {@code Remark} and its subclass {@code QuestionRemark} in JSON."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonAdaptedRemark {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Duration time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Integer questionNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedRemark(@JsonProperty(\"time\") Duration time, @JsonProperty(\"message\") String message,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                             @JsonProperty(\"questionNumber\") Integer questionNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedRemark(Remark source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        time \u003d source.getTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        message \u003d source.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (source instanceof QuestionRemark) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            questionNumber \u003d ((QuestionRemark) source).getQuestionNumber();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            questionNumber \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Duration getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Integer getQuestionNumber() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questionNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableAttributes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * An Immutable JsonAdaptedAttributes that is serializable to JSON format {@link JsonAdaptedAttributes}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "@JsonRootName(value \u003d \"attributes\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonSerializableAttributes {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedAttributes\u003e attributes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts a given {@code AttributeList} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableAttributes(@JsonProperty(\"attributes\") List\u003cJsonAdaptedAttributes\u003e source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributes.addAll(source);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableAttributes(AttributeList source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cAttribute\u003e convertedList \u003d source.getObservableList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        attributes.addAll(convertedList.stream().map(JsonAdaptedAttributes::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts into the model\u0027s {@code AttributeList} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public AttributeList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        AttributeList newData \u003d new AttributeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedAttributes jsonAdaptedattributes : attributes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Attribute attribute \u003d jsonAdaptedattributes.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (newData.isDuplicate(attribute)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            newData.add(attribute.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return newData;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableInterviewee.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * An Immutable InterviewList that is serializable to JSON format {@link IntervieweeList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "@JsonRootName(value \u003d \"interviewees\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonSerializableInterviewee {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final int uniqueIntervieweeId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewee\u003e interviewees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * used to deserialise the interviewee"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * object from json file to java object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param interviewees list of object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableInterviewee(@JsonProperty(\"uniqueIntervieweeId\") int uniqueIntervieweeId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                       @JsonProperty(\"interviewees\") List\u003cJsonAdaptedInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.uniqueIntervieweeId \u003d uniqueIntervieweeId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.interviewees \u003d interviewees;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableInterviewee(IntervieweeList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.uniqueIntervieweeId \u003d source.getUniqueIntervieweeId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cInterviewee\u003e convertedList \u003d source.getObservableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.interviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        interviewees.addAll(convertedList.stream().map(JsonAdaptedInterviewee::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts into an IntervieweeList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public IntervieweeList toModelType(QuestionList questionList, AttributeList attributeList,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                       TranscriptStorage storage, Boolean finalised)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cInterviewee\u003e storedInterviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedInterviewee jsonInterviewee : interviewees) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            storedInterviewees.add(jsonInterviewee.toModelType(questionList, attributeList, storage, finalised));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return IntervieweeList.fromList(uniqueIntervieweeId, storedInterviewees);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableMetric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * An Immutable JsonAdaptedMetrics that is serializable to JSON format {@link JsonAdaptedMetric}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "@JsonRootName(value \u003d \"metrics\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonSerializableMetric {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedMetric\u003e metrics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts a given {@code MetricList} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableMetric(@JsonProperty(\"metrics\") List\u003cJsonAdaptedMetric\u003e source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.metrics.addAll(source);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableMetric(MetricList source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cMetric\u003e convertedList \u003d source.getObservableList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        metrics.addAll(convertedList.stream().map(JsonAdaptedMetric::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts into an MetricList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public MetricList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        MetricList newData \u003d new MetricList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedMetric jsonAdaptedmetrics : metrics) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Metric metric \u003d jsonAdaptedmetrics.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            newData.getObservableList().add(metric);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return newData;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * A class to represent Model state in JSON."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonSerializableModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final boolean finalised;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableModel(@JsonProperty(\"finalised\") boolean finalised) { //potential error"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.finalised \u003d finalised;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public boolean toModelType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.finalised;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * An Immutable QuestionList that is serializable to JSON format {@link QuestionList}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "@JsonRootName(value \u003d \"questions\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonSerializableQuestion {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"QUESTION LIST CONTAINS DUPLICATES\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedQuestions\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableQuestion(@JsonProperty(\"questions\") List\u003cJsonAdaptedQuestions\u003e source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.questions.addAll(source);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableQuestion(QuestionList source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cQuestion\u003e convertedList \u003d source.getObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        questions.addAll(convertedList.stream().map(JsonAdaptedQuestions::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public QuestionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        QuestionList newData \u003d new QuestionList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedQuestions jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (newData.isDuplicate(question)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            newData.add(question.toString()); // temporary only store the name first"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return newData;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableTranscript.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * A class to represent a Transcript in JSON."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonSerializableTranscript {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final HashMap\u003cString, Double\u003e attributeToScore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedRemark\u003e remarkList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Instant startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final boolean completed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableTranscript(@JsonProperty(\"attributeToScore\") HashMap\u003cString, Double\u003e attributeToScore ,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                      @JsonProperty(\"remarkList\") List\u003cJsonAdaptedRemark\u003e remarkList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                      @JsonProperty(\"completed\") boolean completed,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                      @JsonProperty(\"startTime\") Instant startTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeToScore \u003d attributeToScore;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.remarkList \u003d remarkList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableTranscript(Transcript transcript) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeToScore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        transcript.getAttributeToScoreMapView()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .forEach((attribute, score) -\u003e this.attributeToScore.put(attribute.toString(), score));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.remarkList \u003d transcript.getRemarkListView().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .map(JsonAdaptedRemark::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.startTime \u003d transcript.getStartTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.completed \u003d transcript.isCompleted();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts the JsonSerializableTranscript to a Transcript with validation of Questions and Attributes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param questions the questions of the session."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param attributes the attributes of the session."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return the Transcript restored from json."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if saved Transcript represents an illegal state."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalActionException if saved Transcript represents an illegal state."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Transcript toModelType(QuestionList questions, AttributeList attributes)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Transcript transcript \u003d new Transcript(questions, attributes, startTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        loadRemarks(transcript, questions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        loadScores(transcript, attributes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            transcript.complete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcript;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Loads saved remarks into the given Transcript. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void loadRemarks(Transcript transcript, QuestionList questions)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedRemark remark : remarkList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (remark.getQuestionNumber() \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                transcript.addRemark(remark.getMessage(), remark.getTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                Question questionToCheck \u003d questions.find(remark.getQuestionNumber());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                if (questionToCheck.toString().equals(remark.getMessage())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    transcript.startQuestion(remark.getQuestionNumber(), questionToCheck, remark.getTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                    throw new IllegalValueException(\"Question in Transcript does not match question list!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Loads saved scores into the given Transcript. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void loadScores(Transcript transcript, AttributeList attributes) throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Attribute attribute : attributes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (!attributeToScore.containsKey(attribute.toString())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalValueException(\"Missing attribute: \" + attribute);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            transcript.setAttributeScore(attribute, attributeToScore.get(attribute.toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 22,
      "weiichengg": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/MetricStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * MetricStorage containing the file path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * to store the metric objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class MetricStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MetricStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public MetricStorage(Path newPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.path \u003d newPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Metric."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalMetricList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error in reading the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cMetricList\u003e readMetric(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableMetric\u003e jsonMetric \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableMetric.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonMetric.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonMetric.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Metric"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  source of the data. Cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveMetrics(MetricList source) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMetric(source), path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/ModelStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * A class to store Model state, which is only a single boolean to indicate if it is finalised."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class ModelStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public ModelStorage(Path newPath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.path \u003d newPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalModelList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error when reading the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cBoolean\u003e readModel(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableModel\u003e jsonModel \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableModel.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonModel.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return Optional.of(jsonModel.get().toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  source of the data. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveModel(boolean source) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModel(source), path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/QuestionStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * QuestionStorage containing the file path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * to store the question objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class QuestionStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(QuestionStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public QuestionStorage(Path newPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.path \u003d newPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cQuestionList\u003e readQuestion() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readQuestion(this.path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Question."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalQuestionList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error in reading the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cQuestionList\u003e readQuestion(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableQuestion\u003e jsonQuestion \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableQuestion.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonQuestion.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonQuestion.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Question"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  source of the data. Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveQuestions(QuestionList source) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuestion(source), path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * I am still allowing the structure of the previous addressbook to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * prevent any bugs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveInterviewee(IntervieweeList source) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cIntervieweeList\u003e readInterviewee(QuestionList questionList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                              AttributeList attributeList,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                              Boolean initialModel) throws DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveAttribute(AttributeList source) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cAttributeList\u003e readAttribute() throws DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveQuestion(QuestionList source) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cQuestionList\u003e readQuestion() throws DataConversionException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveMetric(MetricList source) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cMetricList\u003e readMetric() throws DataConversionException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void saveTranscript(Interviewee source) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveModel(Boolean model) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cBoolean\u003e readModel() throws DataConversionException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "weiichengg": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Manages storage of different Sessions data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.model.hirelah.storage.StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private IntervieweeStorage intervieweeStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private AttributeStorage attributeStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private QuestionStorage questionStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private MetricStorage metricStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private TranscriptStorage transcriptStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private ModelStorage modelStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage, IntervieweeStorage intervieweeStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                          AttributeStorage attributeStorage, QuestionStorage questionStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                          MetricStorage metricStorage, TranscriptStorage transcriptStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                          ModelStorage modelStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.intervieweeStorage \u003d intervieweeStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeStorage \u003d attributeStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.questionStorage \u003d questionStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.metricStorage \u003d metricStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.transcriptStorage \u003d transcriptStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.modelStorage \u003d modelStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InterviewStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Save all the IntervieweeList into their Json file*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveInterviewee(IntervieweeList source) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Interviewee data file: \" + getIntervieweeDirectory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        intervieweeStorage.saveInterview(source);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cIntervieweeList\u003e readInterviewee(QuestionList questionList,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     AttributeList attributeList,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     Boolean initialModel) throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readInterviewee(intervieweeStorage.getPath(), questionList, attributeList, initialModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Reads the Json file and converts them to Interviewee objects*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cIntervieweeList\u003e readInterviewee(Path filepath, QuestionList questionList,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     AttributeList attributeList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                                                     Boolean initialModel) throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to read data from Interviewee file: \" + filepath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return intervieweeStorage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .readInterviewee(filepath, questionList, attributeList, initialModel, this.transcriptStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getIntervieweeDirectory() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return intervieweeStorage.getPath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttributeStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Save all the AttributeList into their Json file*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveAttribute(AttributeList source) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Attribute data file: \" + getAttributeDirectory());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        attributeStorage.saveAttributes(source);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cAttributeList\u003e readAttribute() throws DataConversionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readAttribute(attributeStorage.getPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Reads the Json file and converts them to Interviewee objects*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cAttributeList\u003e readAttribute(Path filepath) throws DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to read data from Attribute file: \" + filepath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return attributeStorage.readAttribute(filepath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getAttributeDirectory() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return attributeStorage.getPath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuestionStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Save all the QuestionList into their Json file*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveQuestion(QuestionList source) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Metric data file: \" + getQuestionDirectory());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        questionStorage.saveQuestions(source);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cQuestionList\u003e readQuestion() throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readQuestion(questionStorage.getPath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Reads the Json file and converts them to Interviewee objects*/"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cQuestionList\u003e readQuestion(Path filepath) throws DataConversionException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to read data from Question file: \" + filepath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questionStorage.readQuestion(filepath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getQuestionDirectory() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return questionStorage.getPath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MetricStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Save all the MetricList into their Json file*/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveMetric(MetricList source) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Metric data file: \" + getMetricDirectory());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        metricStorage.saveMetrics(source);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cMetricList\u003e readMetric() throws DataConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readMetric(metricStorage.getPath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Reads the Json file and converts them to Interviewee objects */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cMetricList\u003e readMetric(Path filepath) throws DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to read data from Metric file: \" + filepath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return metricStorage.readMetric(filepath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getMetricDirectory() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return metricStorage.getPath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TranscriptStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Save all the MetricList into their Json file */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveTranscript(Interviewee source) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Transcript data file: \" + getMetricDirectory());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        transcriptStorage.saveTranscript(source);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getTranscriptDirectory() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcriptStorage.getPath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModelStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getModelDirectory() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return modelStorage.getPath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Saves the Model state to hard disk."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param model the model state - whether the model is finalised."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IOException if an error occurs while writing the file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveModel(Boolean model) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to write to Model data file: \" + getModelDirectory());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        modelStorage.saveModel(model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cBoolean\u003e readModel() throws DataConversionException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return readModel(getModelDirectory());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Reads the Model finalised state from memory."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cBoolean\u003e readModel(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        logger.fine(\"Attempting to read data from Model file: \" + filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return modelStorage.readModel(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefsStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 6,
      "weiichengg": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/TranscriptStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * A class that handles saving to and read from the transcript directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class TranscriptStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TranscriptStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Path directory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public TranscriptStorage(Path newDirectory) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.directory \u003d newDirectory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return this.directory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * retrieve all the information regarding Transcript."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return OptionalTranscriptList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException error when reading the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cTranscript\u003e readTranscript(int id, QuestionList questionList, AttributeList attributeList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Path filePath \u003d directory.resolve(id + \".json\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableTranscript\u003e jsonTranscript \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableTranscript.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonTranscript.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonTranscript.get().toModelType(questionList, attributeList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException | IllegalActionException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the information of the Transcript"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param interviewee of the data. Cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveTranscript(Interviewee interviewee) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(interviewee);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(directory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Path path \u003d directory.resolve(interviewee.getId() + \".json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Transcript transcript \u003d interviewee.getTranscript().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTranscript(transcript), path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 5,
      "weiichengg": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttributeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of attributes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class AttributeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"TextListView.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttributeListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cAttribute\u003e textListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public AttributeListPanel(ObservableList\u003cAttribute\u003e attributeList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        title.setText(\"Attributes\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setItems(attributeList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // Below solution adapted from https://stackoverflow.com/questions/31992698/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.getItems().addListener("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                (ListChangeListener\u003cAttribute\u003e) c -\u003e textListView.scrollTo(c.getList().size() - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BestIntervieweeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeToScore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Panel containing the list of interviewees."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class BestIntervieweeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String FXML \u003d \"CardListView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    protected Label title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IntervieweeListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ListView\u003cIntervieweeToScore\u003e cardListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public BestIntervieweeListPanel(ObservableList\u003cIntervieweeToScore\u003e intervieweeList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                    CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        title.setText(\"Best Interviewees\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        cardListView.setItems(intervieweeList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new IntervieweeToScoreListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        cardListView.getItems().addListener("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                (ListChangeListener\u003cIntervieweeToScore\u003e) c -\u003e cardListView.scrollTo(c.getList().size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //this.getRoot().setOnKeyPressed(key -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //    KeyCode keyCode \u003d key.getCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //    if (keyCode \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //            commandExecutor.execute(\"open \" + this.interviewee.getFullName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //cardListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener\u003cIntervieweeToScore\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    public void changed("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            ObservableValue\u003c? extends IntervieweeToScore\u003e observable,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            IntervieweeToScore oldValue, IntervieweeToScore newValue) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            commandExecutor.execute(\"open \" + newValue.getInterviewee().getFullName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Interviewee} using a {@code IntervieweeCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    class IntervieweeToScoreListViewCell extends ListCell\u003cIntervieweeToScore\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        protected void updateItem(IntervieweeToScore score, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            super.updateItem(score, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (empty || score \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                setGraphic(new IntervieweeCard(score.getInterviewee(), commandExecutor, score.getScore()).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 71,
      "CornCobs": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Represents a function that can execute commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public interface CommandExecutor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    void execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DetailedIntervieweeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.geometry.Bounds;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.chart.XYChart.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of a {@code Interviewee}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class DetailedIntervieweeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"DetailedIntervieweeCard.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Interviewee interviewee;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final ObservableList\u003cAttribute\u003e attributes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final ObservableList\u003cDouble\u003e scores;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private VBox detailedIntervieweePane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label alias;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Button viewResume;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private StackPane attributeScore;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private BarChart\u003cString, Double\u003e scoreChart;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private VBox listContainer;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cAttribute\u003e attributeList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cDouble\u003e scoreList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public DetailedIntervieweeCard(Interviewee interviewee, CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.attributes \u003d interviewee.getTranscript().get().getAttributesToBeScored();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.scores \u003d interviewee.getTranscript().get().getAttributeScores();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        name.setText(interviewee.getFullName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        id.setText(\"ID:         \" + interviewee.getId());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        alias.setText(\"Alias:     \" + interviewee.getAlias().orElse(\"No alias has been set.\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        viewResume.setText(interviewee.getResume().isPresent() ? \"View Resume\" : \"No Resume\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (interviewee.getTranscript().get().isCompleted()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            attributeScore.getChildren().remove(listContainer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            initialiseChart(attributes, scores);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            attributeScore.getChildren().remove(scoreChart);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            initialiseLists(attributes, scores);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        viewResume.setOnAction(en -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                commandExecutor.execute(\"resume \" + this.interviewee.getFullName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Initialises the ListViews for the attribute scores for this card. A listener is added to the ObservableMap so"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * that the change made by any put operation is reflected in the ListViews."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private void initialiseLists(ObservableList\u003cAttribute\u003e attributes, ObservableList\u003cDouble\u003e scores) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // ObservableList\u003cString\u003e attributes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // ObservableList\u003cString\u003e scores \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // for (Map.Entry\u003cAttribute, Double\u003e entry : attributeToScoreMapView.entrySet()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    attributes.add(truncateAttributeName(entry.getKey().toString()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    scores.add(scoreToString(entry.getValue()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeList.setItems(attributes);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeList.setCellFactory(listView -\u003e new AttributeToBeScoredViewCell());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        scoreList.setItems(scores);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        scoreList.setCellFactory(listView -\u003e new AttributeScoresViewCell());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //attributeToScoreMapView.addListener((MapChangeListener\u003cAttribute, Double\u003e) change -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    if (change.wasAdded()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        String attributeAdded \u003d truncateAttributeName(change.getKey().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        String newScore \u003d scoreToString(change.getValueAdded());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        scores.set(attributes.indexOf(attributeAdded), newScore);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Initialises the BarChart for this card."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private void initialiseChart(ObservableList\u003cAttribute\u003e attributes, ObservableList\u003cDouble\u003e scores) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // ObservableList\u003cXYChart.Data\u003cString, Double\u003e\u003e data \u003d convertMapToList(attributeToScoreMapView);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        ObservableList\u003cXYChart.Data\u003cString, Double\u003e\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        for (Attribute attribute : attributes) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            data.add(new Data\u003c\u003e(truncateAttributeName(attribute.toString()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    scores.get(attributes.indexOf(attribute))));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        for (XYChart.Data\u003cString, Double\u003e bar : data) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            bar.nodeProperty().addListener(new ChangeListener\u003cNode\u003e() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                @Override public void changed(ObservableValue\u003c? extends Node\u003e ov, Node oldNode, final Node node) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    if (node !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                        displayLabelForData(bar);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        XYChart.Series\u003cString, Double\u003e attributeData \u003d new XYChart.Series\u003c\u003e(\"Attributes\", data);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // setAll method should be safe in our usage but it raises an Unchecked varargs warning"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        scoreChart.getData().setAll(attributeData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        scoreChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        yAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        yAxis.setLowerBound(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        yAxis.setUpperBound(12.4);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        yAxis.setTickUnit(2.5);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        yAxis.setLabel(\"Scores\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        xAxis.setLabel(\"Attributes\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        xAxis.setAnimated(false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        xAxis.setMinWidth(data.size() * 30);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        xAxis.setMaxHeight(20);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Adds a label to the top of every bar, showing the numerical value of the bar."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Solution retrieved from https://stackoverflow.com/questions/15237192"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param data the Data object representing a bar in the BarChart."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private void displayLabelForData(XYChart.Data\u003cString, Double\u003e data) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        final Node node \u003d data.getNode();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        final Text dataText \u003d new Text(data.getYValue() + \"\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        node.parentProperty().addListener(new ChangeListener\u003cParent\u003e() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            @Override public void changed(ObservableValue\u003c? extends Parent\u003e ov, Parent oldParent, Parent parent) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                Group parentGroup \u003d (Group) parent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                parentGroup.getChildren().add(dataText);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        node.boundsInParentProperty().addListener(new ChangeListener\u003cBounds\u003e() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            @Override public void changed(ObservableValue\u003c? extends Bounds\u003e ov, Bounds oldBounds, Bounds bounds) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                dataText.setLayoutX("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                        Math.round("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                                bounds.getMinX() + bounds.getWidth() / 2 - dataText.prefWidth(-1) / 2"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                );"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                dataText.setLayoutY("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                        Math.round("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                                bounds.getMinY() - dataText.prefHeight(-1) * 0.2"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                );"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Truncates the input xTicks if it is longer than 20 characters."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param xTick String representing a tick on the X axis."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @return String of the tick after truncation."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private String truncateAttributeName(String xTick) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (xTick.length() \u003e 20) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return xTick.substring(0, 17) + \"...\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return xTick;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Converts and formats a Double score into a String."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param score Double score associated with an attribute."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @return String representation of the score."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private String scoreToString(Double score) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (Double.isNaN(score)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return String.format(\"%.4f\", score);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Converts the ObservableMap of Attribute to Score to an ObservableList of XYChart.Data of type String, Double,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * used t0 plot a BarChart. A listener is added to the ObservableMap so that the change made by any put operation is"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * reflected in the BarChart."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param mapToScore ObservableMap of Attribute to Score."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @return ObservableList XYChart.Data String, Double  used as data input for BarChart."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ObservableList\u003cXYChart.Data\u003cString, Double\u003e\u003e convertMapToList("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            ObservableMap\u003cAttribute, Double\u003e mapToScore) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        ObservableList\u003cXYChart.Data\u003cString, Double\u003e\u003e attributeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        for (Map.Entry\u003cAttribute, Double\u003e entry : mapToScore.entrySet()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            attributeList.add(new Data\u003c\u003e(truncateAttributeName(entry.getKey().toString()), entry.getValue()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // // No longer necessary as data passed to the Bar Chart is final."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //mapToScore.addListener((MapChangeListener\u003cAttribute, Double\u003e) change -\u003e {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    if (change.wasAdded()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        String attributeAdded \u003d truncateAttributeName(change.getKey().toString());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        for (int i \u003d 0; i \u003c attributeList.size(); i++) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //            if (attributeList.get(i).getXValue().equals(attributeAdded)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //                attributeList.remove(i);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        attributeList.add(new Data\u003c\u003e(attributeAdded, change.getValueAdded()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return attributeList;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the Attribute to be scored."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class AttributeToBeScoredViewCell extends ListCell\u003cAttribute\u003e {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Attribute attribute, boolean empty) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(attribute, empty);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || attribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(truncateAttributeName(attribute.toString()));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setPrefWidth(100.0);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the scores for each attribute."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class AttributeScoresViewCell extends ListCell\u003cDouble\u003e {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Double score, boolean empty) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(score, empty);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || score \u003d\u003d null) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(scoreToString(score));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setPrefWidth(100.0);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 307
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntervieweeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of a {@code Interviewee}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class IntervieweeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"IntervieweeListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String STATUS_DONE \u003d \"/images/done.png\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String STATUS_PENDING \u003d \"/images/pending.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String STATUS_EMPTY \u003d \"/images/empty.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Interviewee interviewee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label alias;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ImageView interviewStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ImageView resumeStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public IntervieweeCard(Interviewee interviewee, CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        name.setText(interviewee.getFullName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        id.setText(\"ID:         \" + interviewee.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        alias.setText(\"Alias:     \" + interviewee.getAlias().orElse(\"No alias has been set.\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        score.setVisible(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (interviewee.getTranscript().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            interviewStatus.setImage(new Image(getClass().getResourceAsStream(STATUS_EMPTY)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else if (interviewee.getTranscript().get().isCompleted()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            interviewStatus.setImage(new Image(getClass().getResourceAsStream(STATUS_DONE)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            interviewStatus.setImage(new Image(getClass().getResourceAsStream(STATUS_PENDING)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (interviewee.getResume().isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            resumeStatus.setImage(new Image(getClass().getResourceAsStream(STATUS_DONE)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            resumeStatus.setImage(new Image(getClass().getResourceAsStream(STATUS_EMPTY)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.getRoot().setOnKeyPressed(key -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            KeyCode keyCode \u003d key.getCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (keyCode \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    commandExecutor.execute(\"open \" + this.interviewee.getFullName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.getRoot().setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                commandExecutor.execute(\"open \" + this.interviewee);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public IntervieweeCard(Interviewee interviewee, CommandExecutor commandExecutor, double score) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this(interviewee, commandExecutor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.score.setVisible(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.score.setText(\"Score:     \" + score);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (!(other instanceof IntervieweeCard)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        IntervieweeCard card \u003d (IntervieweeCard) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u0026\u0026 interviewee.equals(card.interviewee);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 9,
      "bscrow": 93,
      "CornCobs": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntervieweeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of interviewees."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class IntervieweeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"CardListView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    protected Label title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IntervieweeListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cInterviewee\u003e cardListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public IntervieweeListPanel(ObservableList\u003cInterviewee\u003e intervieweeList, CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        title.setText(\"Interviewees\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setItems(intervieweeList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new IntervieweeListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.getItems().addListener("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                (ListChangeListener\u003cInterviewee\u003e) c -\u003e cardListView.scrollTo(c.getList().size() - 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //this.getRoot().setOnKeyPressed(key -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    KeyCode keyCode \u003d key.getCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    if (keyCode \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //            commandExecutor.execute(\"open \" + this.interviewee.getFullName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //cardListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener\u003cInterviewee\u003e() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    public void changed("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            ObservableValue\u003c? extends Interviewee\u003e observable, Interviewee oldValue, Interviewee newValue) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //                commandExecutor.execute(\"open \" + newValue.getFullName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //                e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Interviewee} using a {@code IntervieweeCard}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class IntervieweeListViewCell extends ListCell\u003cInterviewee\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Interviewee interviewee, boolean empty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(interviewee, empty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || interviewee \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(new IntervieweeCard(interviewee, commandExecutor).getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 4,
      "bscrow": 66,
      "CornCobs": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ToggleView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private IntervieweeListPanel intervieweeListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private BestIntervieweeListPanel bestNIntervieweesPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private RemarkListPanel remarkListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private AttributeListPanel attributeListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private MetricListPanel metricListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    // SecondWindow for displaying additional information during interview phase."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private SecondWindow secondWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    // On startup, HireLah shows the list of interviewees"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ToggleView toggleView \u003d ToggleView.INTERVIEWEE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private StackPane listPanelStackPane;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeListPanel \u003d new AttributeListPanel(logic.getAttributeListView());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        intervieweeListPanel \u003d new IntervieweeListPanel(logic.getFilteredIntervieweeListView(), this::executeCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        bestNIntervieweesPanel \u003d new BestIntervieweeListPanel(logic.getBestNIntervieweesView(), this::executeCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributeListPanel \u003d new AttributeListPanel(logic.getAttributeListView());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        metricListPanel \u003d new MetricListPanel(logic.getMetricListView());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getQuestionListView());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        secondWindow \u003d new SecondWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().add(intervieweeListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getSessionsDirectory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Sets what is displayed in the listPanelStackPane based on the toggle."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param toggleView enum representing what should be displayed"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void handleToggle(ToggleView toggleView) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Short circuit if no change to the view, unless currently viewing transcript"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // which may change if it is a different interviewee\u0027s transcript"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (this.toggleView \u003d\u003d toggleView \u0026\u0026 toggleView !\u003d ToggleView.TRANSCRIPT) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.toggleView \u003d toggleView;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        secondWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // Clear the current interviewee and close SecondWindow if not viewing a report"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (this.toggleView !\u003d ToggleView.TRANSCRIPT) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            logic.setCurrentInterviewee(null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        switch (toggleView) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ATTRIBUTE: // attribute"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(attributeListPanel.getRoot());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case INTERVIEWEE: // interviewee"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(intervieweeListPanel.getRoot());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case METRIC: // metrics"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(metricListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case QUESTION: // questions"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case TRANSCRIPT: // transcript"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee currentInterviewee \u003d logic.getCurrentInterviewee();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            DetailedIntervieweeCard detailedIntervieweeCard \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    new DetailedIntervieweeCard(currentInterviewee, this::executeCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            remarkListPanel \u003d new RemarkListPanel(currentInterviewee, logic.getQuestionListView());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().addAll(remarkListPanel.getRoot(), detailedIntervieweeCard.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            StackPane.setAlignment(detailedIntervieweeCard.getRoot(), Pos.TOP_CENTER);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            StackPane.setAlignment(remarkListPanel.getRoot(), Pos.CENTER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            // show second window"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (!currentInterviewee.getTranscript().get().isCompleted()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                secondWindow.show(questionListPanel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        case BEST_INTERVIEWEE:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            bestNIntervieweesPanel \u003d new BestIntervieweeListPanel(logic.getBestNIntervieweesView(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    this::executeCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            listPanelStackPane.getChildren().add(bestNIntervieweesPanel.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Opens the user guide PDF on help command. Adapted from https://stackoverflow.com/questions/15654154."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            String inputPdf \u003d \"/help/UserGuide.pdf\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            Path tempOutput \u003d Files.createTempFile(\"Temp\", \".pdf\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            tempOutput.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            System.out.println(\"tempOutput: \" + tempOutput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            InputStream is \u003d getClass().getResourceAsStream(inputPdf);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            Files.copy(is, tempOutput, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            Desktop.getDesktop().open(tempOutput.toFile());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        secondWindow.hide();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets feedback in the result display."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param feedback the feedback to display."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setFeedbackToUser(String feedback) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        resultDisplay.setFeedbackToUser(feedback);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Scrolls the Transcript to the given index."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param index the index to scroll to."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void scrollTranscriptTo(int index) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        remarkListPanel.scrollTo(index);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            commandResult.displayResult(this);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 10,
      "bscrow": 83,
      "CornCobs": 27,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MetricCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of an {@code Interviewee}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class MetricCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"MetricListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Metric metric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label metricName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private TableView\u003cMap.Entry\u003cAttribute, Double\u003e\u003e attributeToWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Constructs a metric card which shows the weight assigned to each attribute for the interview."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param metric Metric object to take information from."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public MetricCard(Metric metric) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.metric \u003d metric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        metricName.setText(this.metric.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        ObservableList\u003cMap.Entry\u003cAttribute, Double\u003e\u003e items \u003d FXCollections.observableArrayList(metric"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                .getMap()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                .entrySet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeToWeight.setItems(items);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        TableColumn\u003cMap.Entry\u003cAttribute, Double\u003e, Attribute\u003e attributeColumn \u003d new TableColumn\u003c\u003e(\"Attribute:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeColumn.setCellValueFactory(p -\u003e new SimpleObjectProperty\u003c\u003e(p.getValue().getKey()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeToWeight.getColumns().set(0, attributeColumn);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        TableColumn\u003cMap.Entry\u003cAttribute, Double\u003e, Double\u003e weightColumn \u003d new TableColumn\u003c\u003e(\"Weight:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        weightColumn.setCellValueFactory(p -\u003e new SimpleObjectProperty\u003c\u003e(p.getValue().getValue()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeToWeight.getColumns().set(1, weightColumn);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeColumn.prefWidthProperty().bind(attributeToWeight.widthProperty().multiply(0.48));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        weightColumn.prefWidthProperty().bind(attributeToWeight.widthProperty().multiply(0.48));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeColumn.setResizable(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        weightColumn.setResizable(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributeToWeight.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MetricListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Metric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of metrics."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class MetricListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"CardListView.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MetricListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cMetric\u003e cardListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public MetricListPanel(ObservableList\u003cMetric\u003e metricList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        title.setText(\"Metrics\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setItems(metricList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new MetricListPanel.MetricListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // cardListView.getItems().addListener("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        //         (ListChangeListener\u003cMetric\u003e) c -\u003e cardListView.scrollTo(c.getList().size()-1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Metric} using a {@code MetricCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class MetricListViewCell extends ListCell\u003cMetric\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Metric metric, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(metric, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || metric \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(new MetricCard(metric).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bscrow": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of questions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"TextListView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cQuestion\u003e textListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        title.setText(\"Questions\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setItems(questionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.getItems().addListener("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                (ListChangeListener\u003cQuestion\u003e) c -\u003e textListView.scrollTo(c.getList().size() - 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Custom {@code ListCell} that displays the Question text with the question number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int questionNumber \u003d getIndex() + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            setText(question \u003d\u003d null ? \"\" : questionNumber + \". \" + question.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setPrefWidth(150.0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setWrapText(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 37,
      "CornCobs": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionRemarkCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.QuestionRemark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of an {@code Remark}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class QuestionRemarkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"QuestionRemarkCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final QuestionRemark questionRemark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private VBox remarkCardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label questionHeader;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label underline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Constructs a question remark header in a RemarkList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param remark remark object to take information from."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public QuestionRemarkCard(Remark remark, ObservableList\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.questionRemark \u003d (QuestionRemark) remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        question \u003d questions.get(questionRemark.getQuestionNumber() - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        String questionText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (question.toString().length() \u003c 40) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            questionText \u003d question.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            questionText \u003d question.toString().substring(0, 38) + \"...\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        questionHeader.setText(\"Question \" + questionRemark.getQuestionNumber() + \": \" + questionText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RemarkCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of an {@code Remark}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class RemarkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"RemarkCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Remark remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private VBox remarkCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label timestamp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Constructs a remark card based on the data stored in a Remark object. Implementation may change?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param remark remark object to take information from."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public RemarkCard(Remark remark) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        timestamp.setText(remark.getTimeString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        content.setText(remark.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.getRoot().prefWidthProperty().bind(remarkCardPane.widthProperty().subtract(30));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (!(other instanceof RemarkCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        RemarkCard card \u003d (RemarkCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return timestamp.getText().equals(card.timestamp.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u0026\u0026 content.getText().equals(card.content.getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RemarkListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.QuestionRemark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of remarks for an interviewee."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class RemarkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"RemarkCardListView.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RemarkListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ObservableList\u003cRemark\u003e remarkList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ObservableList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cRemark\u003e remarkCardListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public RemarkListPanel(Interviewee interviewee, ObservableList\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.questions \u003d questions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (interviewee.getTranscript().isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            remarkList \u003d interviewee.getTranscript().get().getRemarkListView();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            remarkList \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        remarkCardListView.setItems(remarkList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        remarkCardListView.setCellFactory(listView -\u003e new RemarkListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        remarkCardListView.getItems().addListener("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            (ListChangeListener\u003cRemark\u003e) c -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                remarkCardListView.scrollTo(c.getList().size() - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void scrollTo(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        remarkCardListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Remark} using a {@code RemarkCard}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class RemarkListViewCell extends ListCell\u003cRemark\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Remark remark, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(remark, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                if (remark instanceof QuestionRemark) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    setGraphic(new QuestionRemarkCard(remark, questions).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    setGraphic(new RemarkCard(remark).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SecondWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Second Window, currently for showing the lists of Questions during interviews."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class SecondWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"SecondWindow.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private StackPane listPanelStackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public SecondWindow(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public SecondWindow() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Fills up the Node to show and shows this window."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void show(UiPart\u003cRegion\u003e n) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().add(n.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.getRoot().show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Removes all Nodes being shown on this window and hides this window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.getRoot().hide();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    // Icon made by Freepik from www.flaticon.com"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/HireLah.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 2,
      "CornCobs": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CardListView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c!--For ListViews that displays list of cards--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003cBorderPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003ccenter\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cListView fx:id\u003d\"cardListView\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/center\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003ctop\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cHBox prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/top\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 17,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DetailedIntervieweeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cVBox fx:id\u003d\"detailedIntervieweePane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" layoutX\u003d\"20.0\" layoutY\u003d\"10.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cGridPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cLabel fx:id\u003d\"alias\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$alias\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cButton fx:id\u003d\"viewResume\" alignment\u003d\"CENTER_RIGHT\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"25.0\" prefWidth\u003d\"138.0\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" layoutX\u003d\"20.0\" layoutY\u003d\"35.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cStackPane fx:id\u003d\"attributeScore\" prefHeight\u003d\"180\" prefWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003cVBox fx:id\u003d\"listContainer\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003ccenter\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                      \u003cListView fx:id\u003d\"attributeList\" orientation\u003d\"HORIZONTAL\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003c/center\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003cleft\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                     \u003cLabel maxWidth\u003d\"70.0\" minWidth\u003d\"70.0\" text\u003d\"Attributes:\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003c/left\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003ccenter\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                      \u003cListView fx:id\u003d\"scoreList\" orientation\u003d\"HORIZONTAL\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003c/center\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003cleft\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                     \u003cLabel maxWidth\u003d\"70.0\" minWidth\u003d\"70.0\" text\u003d\"Scores:\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                  \u003c/left\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cBarChart fx:id\u003d\"scoreChart\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cxAxis\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003cyAxis\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 64
    }
  },
  {
    "path": "src/main/resources/view/IntervieweeListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cLabel fx:id\u003d\"alias\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$alias\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        \u003cLabel fx:id\u003d\"score\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$score\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_RIGHT\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Interviewed:   \"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Resume:        \"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cImageView fx:id\u003d\"interviewStatus\" fitHeight\u003d\"24.0\" fitWidth\u003d\"24.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cImageView fx:id\u003d\"resumeStatus\" fitHeight\u003d\"24.0\" fitWidth\u003d\"24.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 1,
      "bscrow": 25,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         title\u003d\"Hirelah!\" minWidth\u003d\"600\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cImage url\u003d\"@/images/HireLah.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003cVBox fx:id\u003d\"listPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelStackPane\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 3,
      "weiichengg": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/MetricListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003ccenter\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "          \u003cVBox prefHeight\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003cTableView fx:id\u003d\"attributeToWeight\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                 \u003cTableColumn text\u003d\"Attribute\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                 \u003cTableColumn text\u003d\"Weight\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "             \u003c/TableView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/center\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cPane prefWidth\u003d\"60.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cLabel fx:id\u003d\"metricName\" alignment\u003d\"CENTER\" layoutX\u003d\"-53.0\" layoutY\u003d\"64.0\" prefHeight\u003d\"53.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                   prefWidth\u003d\"160.0\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/Pane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 29
    }
  },
  {
    "path": "src/main/resources/view/QuestionRemarkCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cVBox fx:id\u003d\"questionRemarkCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cLabel text\u003d\" \"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionHeader\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 14
    }
  },
  {
    "path": "src/main/resources/view/RemarkCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cVBox fx:id\u003d\"remarkCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cLabel fx:id\u003d\"timestamp\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cLabel fx:id\u003d\"content\" text\u003d\"Text\" prefWidth\u003d\"1000\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 10
    }
  },
  {
    "path": "src/main/resources/view/RemarkCardListView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cListView fx:id\u003d\"remarkCardListView\" minHeight\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cPane minHeight\u003d\"225.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 14
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" wrapText\u003d\"true\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/SecondWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         title\u003d\"Interview Questions\" minWidth\u003d\"200\" minHeight\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cImage url\u003d\"@/images/HireLah.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003cVBox fx:id\u003d\"listPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelStackPane\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 30
    }
  },
  {
    "path": "src/main/resources/view/TextListView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c!--For ListViews that displays list of text based information--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003cBorderPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003ccenter\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cListView fx:id\u003d\"textListView\" prefHeight\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/center\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003ctop\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003cHBox prefHeight\u003d\"25.0\" prefWidth\u003d\"200\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "               \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003c/top\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 17,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/HireLah.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void execute_commandExecutionError_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseException(deleteCommand,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /*private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "   /*private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /*private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /*private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "   /* private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "agnesnatasya": 3,
      "weiichengg": 11,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(commandResult, new CommandResult(\"feedback\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Model expectedModel, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model, Storage)}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Model expectedModel, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 6,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtility.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Contains helper fields for testing commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class CommandTestUtility {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_FINALISE \u003d \"finalise\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_OPEN \u003d \"open\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_GOTO \u003d \"goto\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_INTERVIEW \u003d \"interview\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_RESUME \u003d \"resume\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_BEST \u003d \"best\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_INTERVIEWEE \u003d \"interviewee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_ATTRIBUTE \u003d \"attribute\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_QUESTION \u003d \"question\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ALIAS_JANE \u003d \"Jane\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_INTERVIEWEE_JANE \u003d \"Jane Doe\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_INTERVIEWEE_JANICE \u003d \"Janice Doe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ATTRIBUTE_TEAM_WORK \u003d \"team work\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ATTRIBUTE_PERSISTENCE \u003d \"persistence\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ATTRIBUTE_INTEGRITY \u003d \"integrity\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_QUESTION_WHAT \u003d \"What is this question?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_NUMBER_1 \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_QUESTION_NUMBER_14 \u003d \"q14\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_QUESTION_NUMBER_1 \u003d \"q1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_TIME_30 \u003d \"30.00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_TIME_123 \u003d \"123.45\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_QUESTION_NUMBER_1 \u003d \"q14a\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_QUESTION_NUMBER_2 \u003d \"qabc\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_TIME_123 \u003d \"123,2\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_TIME_1234 \u003d \"1234\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String INVALID_DUMMY_VALUE \u003d \"dummy\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_WHAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddAttributeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + \"Jane\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\", \"Jane\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddAttributeCommand(\"persistence\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_QUESTION"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddQuestionCommand(\"What is this question?\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 42,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddIntervieweeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ALIAS_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class AddIntervieweeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private AddIntervieweeCommandParser parser \u003d new AddIntervieweeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\", \"Jane\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_QUESTION_NUMBER_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.DeleteCommandParser.INVALID_QUESTION_NUMBER_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteAttributeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new DeleteIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new DeleteAttributeCommand(\"persistence\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidField_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE + INVALID_QUESTION_NUMBER_1,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                INVALID_QUESTION_NUMBER_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 45,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditAttributeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_TEAM_WORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.EditAttributeCommandParser.MESSAGE_INCOMPLETE_ARGUMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditAttributeCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private EditAttributeCommandParser parser \u003d new EditAttributeCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_ATTRIBUTE_TEAM_WORK"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ATTRIBUTE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditAttributeCommand(\"team work\", \"persistence\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldFieldMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + PREFIX_ATTRIBUTE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ATTRIBUTE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_prefixMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ATTRIBUTE_TEAM_WORK,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_INTEGRITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NAME + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\", \"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ATTRIBUTE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ATTRIBUTE_INTEGRITY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditAttributeCommand(\"persistence\", \"integrity\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 12,
      "agnesnatasya": 30,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditIntervieweeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ALIAS_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.EditIntervieweeCommandParser.MESSAGE_INCOMPLETE_ARGUMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditIntervieweeCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private EditIntervieweeCommandParser parser \u003d new EditIntervieweeCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NAME + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\", \"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditIntervieweeCommand(\"Jane Doe\", \"\", \"Jane\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldFieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + PREFIX_ALIAS + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_prefixMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditQuestionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_QUESTION_NUMBER_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_NUMBER_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_WHAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.EditQuestionCommandParser.INVALID_QUESTION_NUMBER_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.EditQuestionCommandParser.MESSAGE_INCOMPLETE_ARGUMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditQuestionCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private EditQuestionCommandParser parser \u003d new EditQuestionCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_NUMBER_1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_QUESTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditQuestionCommand(1, VALID_QUESTION_WHAT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_questionNumberFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + PREFIX_QUESTION"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidQuestionNumber_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_QUESTION_NUMBER_1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_QUESTION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                INVALID_QUESTION_NUMBER_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_questionDescriptionFieldMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_NUMBER_1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_QUESTION"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INCOMPLETE_ARGUMENT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_prefixMissing_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_NUMBER_1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FinaliseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_DUMMY_VALUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.FinaliseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class FinaliseCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private FinaliseCommandParser parser \u003d new FinaliseCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_noFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new FinaliseCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_fieldsPresent_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_DUMMY_VALUE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinaliseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ALIAS_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListAttributeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListIntervieweeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListQuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validCommand_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListIntervieweeCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListAttributeCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_QUESTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListQuestionCommand());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidCommand_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NavigationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_DUMMY_VALUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_QUESTION_NUMBER_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_QUESTION_NUMBER_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_TIME_123;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_TIME_1234;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_NUMBER_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_NUMBER_14;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_TIME_123;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_TIME_30;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.NavigationQuestionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.NavigationTimeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class NavigationCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private NavigationCommandParser parser \u003d new NavigationCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_allFieldsPresentNavigationQuestion_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_QUESTION_NUMBER_14,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new NavigationQuestionCommand(14));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_QUESTION_NUMBER_1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new NavigationQuestionCommand(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_allFieldsPresentNavigationTime_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Duration thirtyMin \u003d Duration.ofMinutes(30);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_TIME_30,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new NavigationTimeCommand(thirtyMin));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Duration hundredTwentyThreeMin \u003d Duration.ofMinutes(123);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Duration hundredTwentyThreeMinFortyFiveSec \u003d hundredTwentyThreeMin.plusSeconds(45);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_TIME_123,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new NavigationTimeCommand(hundredTwentyThreeMinFortyFiveSec));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_invalidFieldsNavigationQuestion_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_QUESTION_NUMBER_1,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_QUESTION_NUMBER_2,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_invalidFieldsNavigationTime_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_TIME_123,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_TIME_1234,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + INVALID_DUMMY_VALUE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigationCommandParser.EXPECTED_INPUT_FORMAT));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NormalParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.INVALID_DUMMY_VALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_ADD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_BEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_EDIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_EXIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_FINALISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_GOTO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_HELP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_INTERVIEW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_OPEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_RESUME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_NUMBER_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_NUMBER_14;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.BestCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.FinaliseCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListIntervieweeCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.NavigationQuestionCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.OpenReportCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.OpenResumeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.StartInterviewCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.BestParameter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class NormalParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private NormalParser parser \u003d new NormalParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validAddCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_ADD + WHITESPACE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validEditCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_EDIT + WHITESPACE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_INTERVIEWEE_JANE + WHITESPACE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + PREFIX_NAME + VALID_INTERVIEWEE_JANICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\", \"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validDeleteCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_DELETE + WHITESPACE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new DeleteIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validOpenCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_OPEN + WHITESPACE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new OpenReportCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validFinaliseCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_FINALISE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new FinaliseCommand());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validListCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_LIST"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + VALID_PROPERTY_INTERVIEWEE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new ListIntervieweeCommand());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validNavigationCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_GOTO + WHITESPACE + VALID_QUESTION_NUMBER_14);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new NavigationQuestionCommand(14));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validStartInterviewCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_INTERVIEW + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new StartInterviewCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validExitCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_EXIT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new ExitCommand());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validHelpCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_HELP);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new HelpCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validOpenResumeCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_RESUME + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new OpenResumeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validBestCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_BEST + WHITESPACE + VALID_NUMBER_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new BestCommand(\"1\", BestParameter.OVERALL));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(INVALID_DUMMY_VALUE + WHITESPACE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + VALID_INTERVIEWEE_JANICE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenReportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.OpenReportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class OpenReportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private OpenReportCommandParser parser \u003d new OpenReportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new OpenReportCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_fieldsMissing_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new IntervieweeList(), modelManager.getIntervieweeList()); TODO: override equals on model classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new AttributeList(), modelManager.getAttributeList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new QuestionList(), modelManager.getQuestionList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(Paths.get(\"hirelah/file/path\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(Paths.get(\"new/hirelah/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setSessionsDirectory(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_validPath_setsSessionsDirectory() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        modelManager.setSessionsDirectory(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(path, modelManager.getSessionsDirectory());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 10,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setSessionsDirectory(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            new AttributeList().add(\"courage\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateAttribute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Attribute(\"courage\"), list.find(\"cou\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyAttributeList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"co\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            list.delete(\"cou\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyAttributeList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new AttributeList().delete(\"cou\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_noAttributeFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"cou\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"co\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 108,
      "CornCobs": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeTest class tests the methods implemented in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the Attribute class.\u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void of_invalidAttributeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Attribute.of(\"1234\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void isValidAttributeName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"curiosity*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"toughness 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"Mario Lorenzo Jr the 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"toughness\")); // alphabets only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"Mario Lorenzo\")); // with capital letters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 44,
      "CornCobs": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_validNames_intervieweeAdded() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Sarah O\u0027Conner\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"King Henry the 3rd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"-155\"); // Allow anything as long as it is not parsed by Integer#parseUnsignedInt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"Sarah O\u0027Conner\", interviewees.getInterviewee(\"1\").getFullName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"King Henry the 3rd\", interviewees.getInterviewee(\"2\").getFullName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_invalidNames_exceptionThrown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"15\"); // numeric names are disallowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"\"); // empty strings are disallowed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(interviewees.getObservableList().isEmpty()); // Should still be empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addIntervieweeWithAlias_validNameInvalidAlias_exceptionThrownButIntervieweeAdded()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalActionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addIntervieweeWithAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertDoesNotThrow(() -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setAlias_duplicateName_exceptionThrown() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Tom\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.setAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setAlias_oldAliasDeleted() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Bob Dylan\", \"Bob\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Tom Marvolo Riddle\", \"Riddle\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.setAlias(\"Riddle\", \"Tom\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.getInterviewee(\"Riddle\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"No interviewee with the given identifier can be found\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setName_oldNameDeleted() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Bob Dylan\", \"Bob\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Tom Marvolo Riddle\", \"Riddle\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.setName(\"Riddle\", \"Tom Riddle\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.getInterviewee(\"Tom Marvolo Riddle\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"No interviewee with the given identifier can be found\", e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void deleteInterviewee_validIdentifier_intervieweeDeleted() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Tom\", \"T\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"1\"); // delete Bob by id"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Bob\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"T\"); // delete Tom by alias"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getInterviewee_idAndFullName_sameIntervieweeReturned() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee a \u003d interviewees.getInterviewee(\"1\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee b \u003d interviewees.getInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(a, b);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getObservableList_increasingIdOrder() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"A\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"B\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"C\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"D\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"E\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"D\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int previous \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Interviewee i : interviewees.getObservableList()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertTrue(i.getId() \u003e previous);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            previous \u003d i.getId();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void constructor_invalidName_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"12345\", 4); // test numeric name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"\", 4); // test empty string name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setAlias_validIdentifier_hasAlias() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee i \u003d new Interviewee(\"Bob\", 4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        i.setAlias(\"Bo\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(i.getAlias().isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//public class MetricListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            assertEquals(\"Successfully added metric: extremeSkewed\", new MetricList().add(\"extremeSkewed\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void add_duplicateMetric() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            assertEquals(new Metric(\"extremeSkewed\"), list.find(\"ex\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_emptyMetricList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"ex\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"someWeight\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"ex\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_duplicateMetricPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"wei\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            assertEquals(\"Successfully removed metric: extremeSkewed\", list.delete(\"ex\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_emptyMetricList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e new MetricList().delete(\"ex\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_noMetricFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"ex\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"we\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//public class QuestionListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            new QuestionList().add(\"what is this question?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void add_duplicateQuestion() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            assertEquals(new Question(\"what is this question?\"), list.find(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_inputNotANumber() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"wha\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_inputNegativeIndex() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"-1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_inputOutOfBound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"5\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void find_emptyList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.find(\"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_emptyList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_inputNotANumber() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"what\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_inputNegativeIndex() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"-1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    public void delete_inputOutOfBound() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//            list.delete(\"5\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getRemarks_retrieveRemarks_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(actualRemarks.getRemarks().isEmpty());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getIndexAtTime_getFirstRemark_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList(3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_START.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_EARLIER.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_MIDDLE.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_LATER.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int result \u003d actualRemarks.getIndexAtTime(RemarkTest.DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(0, result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isQuestionAnswered_noAnswer_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList(3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_START.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_MIDDLE.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_LATER.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertFalse(actualRemarks.isQuestionAnswered(3));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getIndexOfQuestion_firstQuestion_success() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList(3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_START.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.startQuestion(1, new Question(\"How are you?\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_MIDDLE.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualRemarks.addRemark(RemarkTest.REMARK_LATER.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(1, actualRemarks.getIndexOfQuestion(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 25,
      "CornCobs": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Duration DEFAULT_START_TIME \u003d Duration.ofSeconds(0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Duration DEFAULT_EARLIER_TIME \u003d DEFAULT_START_TIME.plusSeconds(43);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Duration DEFAULT_MIDDLE_TIME \u003d DEFAULT_START_TIME.plusSeconds(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Duration DEFAULT_LATER_TIME \u003d DEFAULT_START_TIME.plusSeconds(1003);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Remark REMARK_START \u003d new Remark(DEFAULT_START_TIME, \"Start\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Remark REMARK_EARLIER \u003d new Remark(DEFAULT_EARLIER_TIME, \"Earlier\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Remark REMARK_MIDDLE \u003d new Remark(DEFAULT_MIDDLE_TIME, \"Random remark\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Remark REMARK_LATER \u003d new Remark(DEFAULT_LATER_TIME, \"Stop\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTime_maxTime_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(DEFAULT_MIDDLE_TIME, REMARK_MIDDLE.getTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getTimeString_formattedProperly() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"0:00\", REMARK_START.getTimeString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"0:43\", REMARK_EARLIER.getTimeString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"1:40\", REMARK_MIDDLE.getTimeString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"16:43\", REMARK_LATER.getTimeString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void equals_sameMessageAndTime_true() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Remark remark1 \u003d new Remark(DEFAULT_EARLIER_TIME, \"Remark\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Remark remark2 \u003d new Remark(DEFAULT_EARLIER_TIME, \"Remark\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(remark1, remark2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 20,
      "CornCobs": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/TranscriptTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class TranscriptTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Transcript getTranscript() throws IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        QuestionList questions \u003d new QuestionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questions.add(\"One\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questions.add(\"Two\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        AttributeList attributes \u003d new AttributeList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributes.add(\"Attribute one\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        attributes.add(\"Attribute two\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new Transcript(questions, attributes);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getIndexAtTime_beyondLastTime_returnLastIndex() throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Transcript actualTranscript \u003d getTranscript();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualTranscript.addRemark(RemarkTest.REMARK_START.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualTranscript.addRemark(RemarkTest.REMARK_EARLIER.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(1, actualTranscript.getIndexAtTime(Duration.ofSeconds(10000)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getTranscriptAtQuestion_unansweredQuestion_failure() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Transcript actualTranscript \u003d getTranscript();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                actualTranscript.getIndexOfQuestion(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getTranscriptAtQuestion_answeredQuestion_success() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Transcript actualTranscript \u003d getTranscript();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualTranscript.addRemark(RemarkTest.REMARK_START.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualTranscript.startQuestion(1, new Question(\"What\u0027s your name?\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        actualTranscript.addRemark(RemarkTest.REMARK_LATER.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(1, actualTranscript.getIndexOfQuestion(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 4,
      "agnesnatasya": 22,
      "CornCobs": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.MetricList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.AttributeStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.IntervieweeStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.MetricStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.ModelStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.QuestionStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.TranscriptStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * the following is a sample of the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * AttributeList, Questionlist,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * MetricList, IntervieweeList and model that will be used"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * for testing of the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private IntervieweeList intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private AttributeList attributeList \u003d new AttributeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private QuestionList questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private MetricList metricList \u003d new MetricList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private boolean model \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Setting up of the respective fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * needed for the testing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        /** populating the different lists with initial values for testing.*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.attributeList.add(\"Productivity\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.intervieweeList.addInterviewee(\"John Doe\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.questionList.add(\"How can you contribute to the company?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cString\u003e alias \u003d List.of(\"Produc\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        List\u003cDouble\u003e weights \u003d List.of(2.0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.metricList.add(\"Team player\", this.attributeList, alias, weights);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        /**Initialising the different components of the Storage*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        IntervieweeStorage intervieweeStorage \u003d new IntervieweeStorage(getTempFilePath(\"interviewees\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        AttributeStorage attributeStorage \u003d new AttributeStorage(getTempFilePath(\"attributes\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        QuestionStorage questionStorage \u003d new QuestionStorage(getTempFilePath(\"questions\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        MetricStorage metricStorage \u003d new MetricStorage(getTempFilePath(\"metrics\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        TranscriptStorage transcriptStorage \u003d new TranscriptStorage(getTempFilePath(\"transcripts\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        ModelStorage modelStorage \u003d new ModelStorage(getTempFilePath(\"model\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, intervieweeStorage, attributeStorage, questionStorage,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                metricStorage, transcriptStorage, modelStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** Provide custom path based on input String. */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** The following tests check if all the different components of Storage can save and retrieve the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * various fields accurately.*/"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void intervieweesReadSave() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storageManager.saveInterviewee(intervieweeList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        IntervieweeList retrieved \u003d storageManager.readInterviewee(questionList, attributeList, model).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertEquals(this.intervieweeList, retrieved);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void attributesReadSave() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storageManager.saveAttribute(attributeList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        AttributeList retrieved \u003d storageManager.readAttribute().get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertEquals(attributeList, retrieved);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void metricsReadSave() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storageManager.saveMetric(this.metricList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        MetricList retrieved \u003d storageManager.readMetric().get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertEquals(metricList, retrieved);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void modelSaveRead() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storageManager.saveModel(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        boolean retrieved \u003d storageManager.readModel().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertEquals(model, retrieved);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /** The following tests are to check that StorageManager can return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * the a valid path for the various components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getModelPath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getModelDirectory());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getTranscriptPath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getTranscriptDirectory());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getIntervieweePath() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getIntervieweeDirectory());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getQuestionsPath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getQuestionDirectory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getAttributesPath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getAttributeDirectory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void getUserPrefsPath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 104,
      "-": 50
    }
  }
]
