[
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        model \u003d initModelManager(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a {@code ModelManager} with {@code userPrefs}. Components of the model (IntervieweeList, etc.) start"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * empty and are populated once a session is loaded."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Model initModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new ModelManager(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 6,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the list of attributes */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cAttribute\u003e getAttributeListView();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of interviewees */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the list of questions */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionListView();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /** Returns an unmodifiable view of the transcripts entries of an interviewee."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param interviewee The interviewee whose transcript we are interested in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cTranscript\u003e getTranscriptListView(Interviewee interviewee);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the user prefs\u0027 sessions directory."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 13,
      "CornCobs": 6,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.parser.InterviewParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.parser.NormalParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final InterviewParser interviewParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final NormalParser normalParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewParser \u003d new InterviewParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        normalParser \u003d new NormalParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (model.getAppPhase()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case PRE_SESSION:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // TODO: PreSession parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command \u003d normalParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command \u003d interviewParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalArgumentException(\"Impossible enum case\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //} catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //    throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getAttributeListView() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getAttributeListView();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionListView() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getQuestionListView();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cTranscript\u003e getTranscriptListView(Interviewee interviewee) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getTranscriptListView(interviewee);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return model.getSessionsDirectory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 10,
      "CornCobs": 34,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAttributeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add an attribute to the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddAttributeCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New attribute added: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"new \" + COMMAND_WORD + \": Adds an attribute to the Attribute list. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: new \" + COMMAND_WORD + \" leadership\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddAttributeCommand to add the specified {@code Attribute}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddAttributeCommand(String attribute) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        toAdd \u003d attribute;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            attributes.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAttributeCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 43,
      "bscrow": 1,
      "CornCobs": 8,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a property to the current interview session. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Includes: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"adding an Interviewee object\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"adding an Attribute object\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"adding a Question object\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddIntervieweeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add an interviewee to the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddIntervieweeCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String PREFIX_ALIAS \u003d \"-a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New interviewee added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"new \" + COMMAND_WORD + \": Adds an interviewee to the Interviewee list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + PREFIX_ALIAS + \" ALIAS\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: new \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Jane Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + PREFIX_ALIAS + \" Doe\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String fullname;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddIntervieweeCommand to add the specified {@code Interviewee}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddIntervieweeCommand(String fullname, String... optionalAlias) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.fullname \u003d fullname;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (optionalAlias.length !\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            this.alias \u003d optionalAlias[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            this.alias \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isEmptyAlias()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                interviewees.addInterviewee(fullname);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                interviewees.addIntervieweeWithAlias(fullname, alias);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException | IllegalActionException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fullname), ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 fullname.equals(((AddIntervieweeCommand) other).fullname)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 alias.equals(((AddIntervieweeCommand) other).alias));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isEmptyAlias() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.alias.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 71,
      "bscrow": 1,
      "agnesnatasya": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddQuestionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AddQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to add a question to the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddQuestionCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"The question already exists.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"new \" + COMMAND_WORD + \": Adds an question to the Question list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: new \" + COMMAND_WORD + \" what is this question?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an AddQuestionCommand to add the specified {@code Question}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AddQuestionCommand(String question) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            questions.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ToggleView.QUESTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof AddQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 52,
      "bscrow": 1,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final ToggleView toggleView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.toggleView \u003d ToggleView.INTERVIEWEE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, ToggleView toggleView) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.toggleView \u003d toggleView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this(feedbackToUser, false, false, ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult(String feedbackToUser, ToggleView toggleView) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this(feedbackToUser, false, false, toggleView);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ToggleView getToggleView() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return toggleView;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 18,
      "bscrow": 8,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAttributeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete an attribute from the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteAttributeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Deletes the attribute identified by its prefix.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: PREFIX\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" lea\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRIBUTE_SUCCESS \u003d \"Deleted Attribute with prefix: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String attributePrefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteAttributeCommand(String attributePrefix) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefix \u003d attributePrefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.delete(attributePrefix);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ATTRIBUTE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    attribute), ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 attributePrefix.equals(((DeleteAttributeCommand) other).attributePrefix)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 50,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the properties of an interview session \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Includes: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"deleting an Interviewee object\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"deleting an Attribute object\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"deleting a Question object\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIntervieweeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete an interviewee from the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteIntervieweeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted interviewee with identifier: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delete \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Deletes an interviewee to the Interviewee list. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"IDENTIFIER\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" Doe\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates an DeleteIntervieweeCommand to delete the specified {@code Interviewee}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteIntervieweeCommand(String identifier) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            interviewees.deleteInterviewee(identifier);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, identifier), ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 identifier.equals(((DeleteIntervieweeCommand) other).identifier));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 52,
      "bscrow": 1,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteQuestionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * DeleteQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to delete a question from the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class DeleteQuestionCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Deletes the question identified by its index number in the question list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: delete \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted Question: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_INDEX_OUT_OF_BOUND \u003d \"The index is out of bound: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_DELETE_INDEX_NOT_A_NUMBER \u003d \"The index is not a number: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String questionIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public DeleteQuestionCommand(String questionIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS, questions.delete(questionIndex)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    ToggleView.QUESTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof DeleteQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 questionIndex.equals(((DeleteQuestionCommand) other).questionIndex)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 49,
      "bscrow": 1,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAttributeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update an attribute from the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditAttributeCommand extends EditCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Edits the attribute identified by its prefix.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: PREFIX NEW_ATTRIBUTE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: update \" + COMMAND_WORD + \" lea tenacity\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRIBUTE_SUCCESS \u003d \"Successfully edited Attribute with prefix: %s to %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_DUPLICATE_PREFIX \u003d \"There are multiple attributes with prefix: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_NO_PREFIX_FOUND \u003d \"There is no attribute with the given prefix: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String attributePrefix;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedAttribute;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditAttributeCommand(String attributePrefix, String updatedAttribute) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributePrefix \u003d attributePrefix;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedAttribute \u003d updatedAttribute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList attributes \u003d model.getAttributeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d attributes.edit(attributePrefix, updatedAttribute);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_ATTRIBUTE_SUCCESS, attribute, updatedAttribute),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditAttributeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 attributePrefix.equals(((EditAttributeCommand) other).attributePrefix)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedAttribute.equals(((EditAttributeCommand) other).updatedAttribute)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 54,
      "bscrow": 1,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the properties of an interview session \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"Includes: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"editing an Interviewee object\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"editing an Attribute object\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            + \"editing a Question object\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditIntervieweeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update an intervewee\u0027s name from the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditIntervieweeCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Edits the name of the interviewee identified by the identifier.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: IDENTIFIER NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: update \" + COMMAND_WORD + \" Doe Mario Lorenzo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERVIEWEE_SUCCESS \u003d \"Successfully edited Interviewee: %1$s to %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_DUPLICATE_PREFIX \u003d \"There are multiple interviewees with identifier: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditIntervieweeCommand(String identifier, String updatedName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedName \u003d updatedName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        IntervieweeList interviewees \u003d model.getIntervieweeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            interviewees.getInterviewee(identifier).setFullName(updatedName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INTERVIEWEE_SUCCESS, identifier, updatedName),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 identifier.equals(((EditIntervieweeCommand) other).identifier)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedName.equals(((EditIntervieweeCommand) other).updatedName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 53,
      "bscrow": 1,
      "agnesnatasya": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditQuestionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * EditQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to update a question from the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditQuestionCommand extends EditCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": Edits the question identified by its index number in the question list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Parameters: INDEX UPDATED_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: update \" + COMMAND_WORD + \" 1 what the heck is this question?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_EDIT_QUESTION_SUCCESS \u003d \"Successfully edited question: %s to %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String questionIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private final String updatedDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditQuestionCommand(String questionIndex, String updatedDescription) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.updatedDescription \u003d updatedDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList questions \u003d model.getQuestionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d questions.edit(questionIndex, updatedDescription);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_QUESTION_SUCCESS, question, updatedDescription),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    ToggleView.QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof EditQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 questionIndex.equals(((EditQuestionCommand) other).questionIndex)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 updatedDescription.equals(((EditQuestionCommand) other).updatedDescription)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 53,
      "bscrow": 1,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * StartSessionCommand start and create a new Session"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class EndSessionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end session\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully ended the Session\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    //Incomplete class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    //Will update the Command once we confirmed how we going to change the different sessions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new CommandResult(COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAttributeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListAttributeCommand describes the behavior when the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the attributes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class ListAttributeCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attribute\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of attributes:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list \" + COMMAND_WORD + \": List the attribute from the Attribute list. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListAttributeCommand to list the {@code Attribute}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListAttributeCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ToggleView.ATTRIBUTE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListAttributeCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 35,
      "bscrow": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Lists the HireLah data requested by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the HireLah data requested by the user \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"Includes: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"listing Interviewees\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"listing Attributes\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"listing Questions\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"listing Sessions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 8,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListIntervieweeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListIntervieweeCommand describes the behavior when the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the interviewees."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class ListIntervieweeCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interviewee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of interviewees:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \": List the interviewee from the Interviewee list. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListIntervieweeCommand to list the {@code Interviewee}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListIntervieweeCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ToggleView.INTERVIEWEE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListIntervieweeCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 36,
      "bscrow": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListQuestionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * ListQuestionCommand describes the behavior when the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * client wants to list the questions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class ListQuestionCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of questions:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list \" + COMMAND_WORD + \": List the questions from the Question list. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Creates a ListQuestionCommand to list the {@code Question}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public ListQuestionCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ToggleView.QUESTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof ListQuestionCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 35,
      "bscrow": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * ListSessionCommand describes the behavior when the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * client wants to list the sessions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class ListSessionCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"session\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of sessions:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list \" + COMMAND_WORD + \": List the sessions that has been created. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            + \"Example: list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Creates a ListSessionCommand to list the {@code Session}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ListSessionCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ToggleView.SESSION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                || (other instanceof ListSessionCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StartSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * StartSessionCommand start and create a new Session"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class StartSessionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start session\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully Started the Session\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    //Incomplete class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    //Will update the Command once we confirmed how we going to change the different sessions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new CommandResult(COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ToggleView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Enum representing what information HireLah is supposed to display."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public enum ToggleView {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    ATTRIBUTE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    INTERVIEWEE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    QUESTION,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    SESSION,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    TRANSCRIPT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddAttributeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new object of type AddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003caddCommandWord\u003e\\\\S+) (?\u003caddArguments\u003e.+)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AddCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String addCommandWord \u003d matcher.group(\"addCommandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String addArguments \u003d matcher.group(\"addArguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (addCommandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddAttributeCommand(addArguments.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommandParser().parse(addArguments.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case AddQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddQuestionCommand(addArguments.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 27,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddIntervieweeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new object of type AddIntervieweeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AddIntervieweeCommandParser implements Parser\u003cAddIntervieweeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIntervieweeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an AddIntervieweeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AddIntervieweeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(\"\u0027\" + arguments + \"\u0027\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_ALIAS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (!argMultimap.arePrefixesPresent(PREFIX_ALIAS)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommand(arguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ALIAS).get().equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new AddIntervieweeCommand(argMultimap.getPreamble(), argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Prefix PREFIX_OLD \u003d new Prefix(\"-o\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Prefix PREFIX_NEW \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_ATTRIBUTE \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final Prefix PREFIX_WEIGHTAGE \u003d new Prefix(\"-w\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 3,
      "agnesnatasya": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandSupplier.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CommandSupplier"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CommandSupplier is a functional interface to abstract the supplying"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * of the command after parsing the command word."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public interface CommandSupplier {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Command getCommand(String args) throws ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 24,
      "agnesnatasya": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteAttributeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003cdeleteCommandWord\u003e\\\\S+) (?\u003cdeleteArguments\u003e.+)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public DeleteCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_DELETE_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String deleteCommandWord \u003d matcher.group(\"deleteCommandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String deleteArguments \u003d matcher.group(\"deleteArguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (deleteCommandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new DeleteAttributeCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new DeleteIntervieweeCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case DeleteQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new DeleteQuestionCommand(deleteArguments.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 33,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAttributeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditAttributeCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditAttributeCommandParser implements Parser\u003cEditAttributeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /*private static final Pattern BASIC_EDIT_ATTRIBUTE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003coldAttribute\u003e\\\\S+)(?\u003cnewAttribute\u003e)\");*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAttributeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditAttributeCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public EditAttributeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_OLD, PREFIX_NEW);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_OLD, PREFIX_NEW)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OLD).get().equals(\"\") || argMultimap.getValue(PREFIX_NEW).get().equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new EditAttributeCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                argMultimap.getValue(PREFIX_OLD).get(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                argMultimap.getValue(PREFIX_NEW).get()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_EDIT_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003ceditCommandWord\u003e\\\\S+) (?\u003ceditArguments\u003e.+)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public EditCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_EDIT_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String editCommandWord \u003d matcher.group(\"editCommandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String editArguments \u003d matcher.group(\"editArguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        switch (editCommandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new EditAttributeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new EditIntervieweeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        case EditQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return new EditQuestionCommandParser().parse(editArguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 26,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditIntervieweeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditIntervieweeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditIntervieweeCommandParser implements Parser\u003cEditIntervieweeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditIntervieweeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditIntervieweeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public EditIntervieweeCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_OLD, PREFIX_NEW);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_OLD, PREFIX_NEW)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OLD).get().equals(\"\") || argMultimap.getValue(PREFIX_NEW).get().equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return new EditIntervieweeCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                argMultimap.getValue(PREFIX_OLD).get(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                argMultimap.getValue(PREFIX_NEW).get()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditQuestionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Parses input arguments and creates a new EditQuestionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class EditQuestionCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final Pattern BASIC_EDIT_QUESTION_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Pattern.compile(\"(?\u003cquestionNumber\u003e\\\\S+)(?\u003cnewQuestion\u003e.+)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditQuestionCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * and returns an EditQuestionCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public EditQuestionCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Matcher matcher \u003d BASIC_EDIT_QUESTION_COMMAND_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String questionNumber \u003d matcher.group(\"questionNumber\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        final String newQuestion \u003d matcher.group(\"newQuestion\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return new EditQuestionCommand(questionNumber.trim(), newQuestion.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 2,
      "agnesnatasya": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InterviewParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * InterviewParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * InterviewParser parses the input entered by the client"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when HireLah! is not in interviewing mode."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class InterviewParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final HashMap\u003cString, CommandSupplier\u003e suppliers \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            // fill your commands here! e.g. put(\"add\", (x) -\u003e new AddCommand(x[0]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (suppliers.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return suppliers.get(commandWord).getCommand(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 24,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListAttributeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListIntervieweeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListQuestionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ListSessionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Parses input command and creates a new ListCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Parses the given {@code String} of commandWord in the context of the ListCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param commandWord the command word to be parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @throws ParseException if the user input is not a valid command word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public ListCommand parse(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        final String listCommandWord \u003d commandWord.trim().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        switch (listCommandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListAttributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListAttributeCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListIntervieweeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListIntervieweeCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListQuestionCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ListSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return new ListSessionCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NormalParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * NormalParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 13 Mar 2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * NormalParser parses the input entered by the client"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * when HireLah! is not in interviewing mode."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class NormalParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final HashMap\u003cString, CommandSupplier\u003e suppliers \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"add\", args -\u003e new AddCommandParser().parse(args));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"edit\", args -\u003e new EditCommandParser().parse(args));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"delete\", args -\u003e new DeleteCommandParser().parse(args));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            put(\"list\", args -\u003e new ListCommandParser().parse(args));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (suppliers.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return suppliers.get(commandWord).getCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 62,
      "CornCobs": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenSessionParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Parse the user input to open a new Session."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class OpenSessionParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Will fill in the gaps once we confirmed the implementation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * for switching the classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String MESSAGE_NO_ARGUMENTS_BEFORE_PREFIX \u003d \"There is no arguments before prefix\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private static final String PREFIX \u003d \"-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /** Parses the arguments to obtain substring that is before any prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return arguments parsed before prefix"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static String parseArgumentsBeforePrefix (String arguments) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String trimmedArguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String argumentsBeforePrefix \u003d trimmedArguments.substring(0, trimmedArguments.indexOf(PREFIX)).trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argumentsBeforePrefix.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(MESSAGE_NO_ARGUMENTS_BEFORE_PREFIX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return argumentsBeforePrefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /** Parses the arguments to obtain substring that is after the first prefix."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param arguments the arguments to be parsed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return arguments parsed after prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static String parseArgumentsAfterPrefix (String arguments) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String trimmedArguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String argumentsBeforePrefix \u003d trimmedArguments.substring(0, trimmedArguments.indexOf(PREFIX)).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (argumentsBeforePrefix.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new ParseException(MESSAGE_NO_ARGUMENTS_BEFORE_PREFIX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return argumentsBeforePrefix;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 22,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AppPhase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setSessionsDirectory(Path sessionsDirectory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the attribute list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cAttribute\u003e getAttributeListView();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the question list */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionListView();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the transcript list of an interviewee */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cTranscript\u003e getTranscriptListView(Interviewee interviewee);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns an unmodifiable view of the filtered interviewee list */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of interviewees for the current interview session */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    IntervieweeList getIntervieweeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of attributes to score interviewees by */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    AttributeList getAttributeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the list of questions to ask during interviews */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    QuestionList getQuestionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Sets the current interview session */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setSession(Session session);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the session which contains data on where the session data is being stored */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Session getSession();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Sets the current mode of the App */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void setAppPhase(AppPhase phase);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Returns the current mode of the App */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    AppPhase getAppPhase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Finalizes the questions and attributes so they do not change between interviews */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void finalizeQuestionsAndAttributes();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 2,
      "bscrow": 7,
      "CornCobs": 30,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AppPhase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.AttributeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.model.hirelah.IntervieweeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.QuestionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.Session;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Transcript;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private AppPhase appPhase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final IntervieweeList intervieweeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final AttributeList attributeList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final QuestionList questionList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.appPhase \u003d AppPhase.PRE_SESSION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributeList \u003d new AttributeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return userPrefs.getSessionsDirectory();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d App state setters/getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSession(Session session) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Session getSession() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setAppPhase(AppPhase phase) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.appPhase \u003d phase;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the current mode of the App"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AppPhase getAppPhase() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return appPhase;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Observable accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getAttributeListView() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(attributeList.getObservableList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionListView() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(questionList.getObservableList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cTranscript\u003e getTranscriptListView(Interviewee interviewee) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.observableList(List.of());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeListView() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return FXCollections.unmodifiableObservableList(intervieweeList.getObservableList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Model component accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the list of attributes to score interviewees by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AttributeList getAttributeList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributeList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public QuestionList getQuestionList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Finalizes the questions and attributes so they do not change between interviews"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void finalizeQuestionsAndAttributes() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // TODO: add finalizing methods for Questions and Attributes"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 3,
      "bscrow": 9,
      "CornCobs": 60,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    Path getSessionsDirectory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Path sessionsDirectory \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setSessionsDirectory(newUserPrefs.getSessionsDirectory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Path getSessionsDirectory() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return sessionsDirectory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory(Path sessionsDirectory) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        requireNonNull(sessionsDirectory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.sessionsDirectory \u003d sessionsDirectory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 sessionsDirectory.equals(o.sessionsDirectory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return Objects.hash(guiSettings, sessionsDirectory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        sb.append(\"\\nLocal data directory location : \" + sessionsDirectory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AppPhase.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * An enum indicating the mode the app is operating in currently, affecting the Parser used and thus the commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * understood by the app"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003ePreSession - Before a session is created/opened. Can only create or open sessions\u003c/li\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eNormal - After a session is opened. Can perform most CRUD operations with the Model\u003c/li\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *     \u003cli\u003eInterview - During an interview. Can record remarks, score attributes and answer questions\u003c/li\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public enum AppPhase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    PRE_SESSION,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    INTERVIEW"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Attribute.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Attribute"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttribute class represents the parameters that are"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * taken into account to assess the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Attribute {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            \"A name of attribute should only contain alphabet characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs an Attribute instance. Use the static factory method {@link #of(String)} for unvalidated input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the attribute."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs an Attribute with validation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The name of the attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The created attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the name is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static Attribute of(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!isValidAttributeName(name)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new Attribute(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static boolean isValidAttributeName(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Attribute // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Attribute) other).name)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 50,
      "CornCobs": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AttributeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeList class manages the list of attributes that have been"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. AttributeList can retrieve the attributes using"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class AttributeList {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple attributes with the same prefix.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No attributes with the entered prefix.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cAttribute\u003e attributes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs an AttributeList instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AttributeList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.attributes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cAttribute\u003e getObservableList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the attribute to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributeName The attribute name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if the attribute already exists, or the name is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void add(String attributeName) throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Attribute attribute \u003d Attribute.of(attributeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        boolean isDuplicate \u003d isDuplicate(attribute);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.add(attribute);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Find the attribute based on its prefix."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute find(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Optional\u003cAttribute\u003e exactAttribute \u003d attributes.stream().filter(attribute -\u003e attribute.toString()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                                                                              .equals(attributePrefix))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                                                .findFirst();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (exactAttribute.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            checkPrefix(attributePrefix);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return attributes.stream().filter(attribute -\u003e attribute.toString().startsWith(attributePrefix))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    .get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return exactAttribute.get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Edits the attribute based on its prefix."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param updatedAttribute The name of the updated attribute."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The edited attribute."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute edit(String attributePrefix, String updatedAttribute) throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute currentAttribute \u003d find(attributePrefix);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        int index \u003d attributes.indexOf(currentAttribute);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.set(index, new Attribute(updatedAttribute));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return currentAttribute;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the attribute by its prefix."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The deleted attribute"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute delete(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute attribute \u003d find(attributePrefix);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.remove(attribute);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks the number of attributes that starts with the prefix."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkPrefix(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        long startWithPrefix \u003d attributes.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .filter(attribute -\u003e attribute.toString().startsWith(attributePrefix))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (startWithPrefix \u003e 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (startWithPrefix \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Attribute attribute) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attributes.stream().anyMatch(attribute::equals);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 118,
      "CornCobs": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AudioPlayer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.AudioInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.AudioSystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.Clip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.LineUnavailableException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.UnsupportedAudioFileException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Stores the audio file recorded during the interview session of an {@code Interviewee}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Provides functionality to play, pause, resume and jump to a particular time for the audio file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AudioPlayer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    //Solution below adapted from https://www.geeksforgeeks.org/play-audio-file-using-java/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private Long frame;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Clip clip;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private AudioInputStream audioInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final File audioFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs an {@code AudioPlayer} object with the specified audio file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param audioFile The audio file to be encapsulated by the {@code AudioPlayer}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws UnsupportedAudioFileException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws LineUnavailableException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AudioPlayer(File audioFile) throws UnsupportedAudioFileException, IOException, LineUnavailableException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d audioFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        audioInputStream \u003d AudioSystem.getAudioInputStream(audioFile.getAbsoluteFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip \u003d AudioSystem.getClip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.open(audioInputStream);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.loop(Clip.LOOP_CONTINUOUSLY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Plays the audio file at the current frame that it is in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void play() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.start();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Pauses the audio from playing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void pause() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.frame \u003d this.clip.getMicrosecondPosition();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.stop();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Resumes the audio from pausing at the frame when it last was paused."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void resume() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.setMicrosecondPosition(frame);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.play();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Generates a new {@code AudioPlayer} that are set to start a particular time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeInMs The time to be set as the starting time of the audio file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AudioPlayer playAtMs(long timeInMs)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throws UnsupportedAudioFileException, IOException, LineUnavailableException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        frame \u003d timeInMs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        AudioPlayer audioAtTime \u003d new AudioPlayer(this.audioFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        audioAtTime.clip.setMicrosecondPosition(timeInMs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return audioAtTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/InterviewSession.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A simple record class that contains all interview information for a Interviewee - the scores, the transcript"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * and the audio recording."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class InterviewSession {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Transcript transcript;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cAttribute, Double\u003e scores;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private File audioRecording;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public InterviewSession(Transcript transcript, Map\u003cAttribute, Double\u003e scores, File audioRecording) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.transcript \u003d transcript;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.scores \u003d scores;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.audioRecording \u003d audioRecording;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Transcript getTranscript() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcript;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Map\u003cAttribute, Double\u003e getScores() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return scores;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public File getAudioRecording() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return audioRecording;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Interviewee.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A class to represent Interviewee candidates in a Session. They have"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - a unique ID per session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - the candidate\u0027s full name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional, single, alias."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional resume (a file object)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional indicating if they have been interviewed, and containing the interview session data"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *   if they have been interviewed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Interviewee {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \"Names and aliases should not be numbers, eg. 12345, and should not be blank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String fullName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cString\u003e alias \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cFile\u003e resume \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cInterviewSession\u003e interview \u003d Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates a new Interviewee in the system which starts with no alias, no resume and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * being not yet interviewed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName The interviewee\u0027s full name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param id The interviewee\u0027s unique interviewee id."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee(String fullName, int id) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the full name. Allows renaming of Interviewees."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName the new name of the interviewee"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setFullName(String fullName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cString\u003e getAlias() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Gives an alias to the interviewee object if the interviewee has no alias presently."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias the alias referring to this interviewee."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void giveAlias(String alias) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(alias);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (this.alias.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"Interviewee already has an alias\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.alias \u003d Optional.of(alias);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cFile\u003e getResume() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setResume(File resume) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.resume \u003d Optional.ofNullable(resume);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cInterviewSession\u003e getInterview() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interview;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Gets the score of an interviewee that has already been interviewed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * It is guaranteed that this method is only called on Interviewees that have been interviewed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param attribute the Attribute to retrieve the score for."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the score of the given Attribute."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws java.util.NoSuchElementException if Interviewee has not been interviewed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                          However, it is guaranteed not to occur at runtime"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                          as the IntervieweeList is filtered before sorting by score."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public double getScore(Attribute attribute) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interview.get().getScores().get(attribute);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Saves the interview session data, only if there is no previous interview session data, to prevent"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * overwriting the session data accidentally."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param transcript The transcript of remarks taken down during the interview."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param scores the final attribute scores of the candidate."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param audioRecording the .wav file with the audio recording of the interview."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void recordInterview(Transcript transcript, Map\u003cAttribute, Double\u003e scores, File audioRecording) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assert this.interview.isEmpty(); // this method should only be called once"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.interview \u003d Optional.of(new InterviewSession(transcript, scores, audioRecording));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Validates a string meant to be used as an alias or the full name to ensure it is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * not a valid number, and is not the empty string. Any other string will be considered valid,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * since there are names that contain punctuation, non-ascii characters and even numbers."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier the alias or name to validate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if identifier is empty, or is a valid number"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkValidIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If successfully parsed as an integer, reject the identifier"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If identifier only contains whitespace or is an empty string, reject it"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (identifier.isBlank()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 1,
      "CornCobs": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/IntervieweeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A collection of Interviewees that does not allow 2 Interviewees with the exact same full name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * It exposes a single accessor method, getInterviewee, which handles all forms of access by id,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * alias or full name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IntervieweeList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The unique ID assigned to an interviewee for the entire session. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private int uniqueIntervieweeId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The actual collection of interviewees. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cInteger, Interviewee\u003e interviewees;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* Mappings from aliases and full names to the interviewee indices for efficient lookup. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cString, Integer\u003e identifierIndices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cInterviewee\u003e observableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes an IntervieweeList with data from a saved session."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param uniqueIntervieweeId The next id to assign from the previous session."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewees The collection of interviewees from the previous session."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifierIndices The identifiers of interviewees from the previous session."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList(int uniqueIntervieweeId,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cInteger, Interviewee\u003e interviewees,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cString, Integer\u003e identifierIndices) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.uniqueIntervieweeId \u003d uniqueIntervieweeId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.interviewees \u003d interviewees;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifierIndices \u003d identifierIndices;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.observableList \u003d FXCollections.observableArrayList(interviewees.values());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new empty IntervieweeList with no interviewees. uniqueInterviewId starts at 1."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(1, new TreeMap\u003c\u003e(), new TreeMap\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getObservableList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return observableList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to create a new Interviewee object and add it to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException In the following situations:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is already taken."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is invalid (is either blank or is a number)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d createInterviewee(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.put(interviewee.getId(), interviewee);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(name, interviewee.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        observableList.add(interviewee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * A convenience function to add an interviewee and assign an alias immediately. It can fail after"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * adding the interviewee, while assigning the alias, if the alias is already taken. In that case,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * the interviewee is still added, but the alias is not assigned."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name or alias is already taken or invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException Should not be thrown as the interviewee definitely exists, and does"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                not have an alias when initially created."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addIntervieweeWithAlias(String name, String alias)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        addInterviewee(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        addAlias(name, alias);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Adds an alias for the given interviewee which can be used to retrieve said interviewee via getInterviewee."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee, which must either be a full name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                   or the interviewee\u0027s id, since no alias should be given presently."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the alias is already taken, or is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException In the following situations:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The interviewee already has an alias."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addAlias(String identifier, String alias) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(alias);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewee.giveAlias(alias);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(alias, interviewee.getId());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes an Interviewee with the given identifier."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void deleteInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee toDelete \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.remove(toDelete.getId());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.remove(toDelete.getFullName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        observableList.remove(toDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        toDelete.getAlias().ifPresent(alias -\u003e identifierIndices.remove(alias));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves an Interviewee given a unique identifier, which can be the Interviewee\u0027s id, full name or alias."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The Interviewee\u0027s id, full name or an alias."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The retrieved Interviewee."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee getInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee result;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // attempts to parse identifier as an interviewee id"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int id \u003d Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // if not an id, attempts to match identifier with either full name or alias"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer id \u003d identifierIndices.get(identifier);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalActionException(\"No interviewee with the given identifier can be found\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"No interviewee with this id can be found\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates an Interviewee with the given name, assigning it the next uniqueIntervieweeId."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Only increments the id if the interviewee was created successfully."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The name of the interviewee."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return A new Interviewee object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name given is an invalid name."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Interviewee createInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d new Interviewee(name, uniqueIntervieweeId);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Only increment id if interviewee was successfully created"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        uniqueIntervieweeId++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interviewee;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkDuplicateIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (identifierIndices.containsKey(identifier)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"An Interviewee with this name or alias already exists!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Metric.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Metric"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetric class abstracts the comparator of the interviewee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * based on the respective weight of the attributes.\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Metric {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private HashMap\u003cAttribute, Double\u003e attributeToWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Metric instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the metric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Set a particular attribute to a value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attribute The attribute that the value wants to be set."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param value The value of the attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String setValueToAttribute(Attribute attribute, double value) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight.put(attribute, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully set the value of attribute %s to %.2f\", attribute, value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a Comparator for Interviewee based on the weighted score."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The Comparator instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Comparator\u003cInterviewee\u003e getComparator() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return (interviewee, anotherInterviewee) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreFirst \u003d computeScore(interviewee);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreSecond \u003d computeScore(anotherInterviewee);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return totalScoreSecond - totalScoreFirst \u003c 0 ? -1 : totalScoreFirst \u003d\u003d totalScoreSecond ? 0 : 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Computes the final score of an interviewee. Can only be called on Interviewees that have been"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * interviewed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewee The interviewee to be computed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The score of the interviewee based on the metric."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double computeScore(Interviewee interviewee) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Map.Entry\u003cAttribute, Double\u003e mapElement : attributeToWeight.entrySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Attribute attribute \u003d mapElement.getKey();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            double weight \u003d mapElement.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            totalScore +\u003d weight * interviewee.getScore(attribute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Metric // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Metric) other).name)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 79,
      "CornCobs": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/MetricList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * MetricList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetricList class manages the list of metrics that have been"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. MetricList can retrieve the attributes using"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class MetricList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple metrics with the same prefix.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No metrics with the entered prefix.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ArrayList\u003cMetric\u003e metrics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a MetricList instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public MetricList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.metrics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the metric to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricName The metric name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The message outcome."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String add(String metricName) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Metric metric \u003d new Metric(metricName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            boolean isDuplicate \u003d isDuplicate(metric);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isDuplicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            metrics.add(metric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return String.format(\"Successfully added metric: %s\", metric);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Find the metric based on its prefix."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the metric."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric find(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkPrefix(metricPrefix);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.stream().filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                               .findFirst()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                               .get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the metric by its prefix."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String delete(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric metric \u003d find(metricPrefix);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        metrics.remove(metric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully removed metric: %s\", metric);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks the number of metrics that starts with the prefix."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkPrefix(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        long startWithPrefix \u003d metrics.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (startWithPrefix \u003e 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (startWithPrefix \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Metric metric) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.stream().anyMatch(metric::equals);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 107,
      "CornCobs": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Question.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Question"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestion class represents the questions that wants to be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * asked to the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Question instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param description The description of the question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 description.equals(((Question) other).description)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 42,
      "CornCobs": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/QuestionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * QuestionList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestionList class manages the list of questions that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * have been added by the interviewer. Questions can be retrieve"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * by their ordering.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ObservableList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.questions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the question to the list, if the input is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionDescription The question."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the question already exists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void add(String questionDescription) throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Question question \u003d new Question(questionDescription);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        boolean isDuplicate \u003d isDuplicate(question);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"This question is already exists!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        questions.add(question);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Finds the question based on its index, if the index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionIndex The string index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Question instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question find(String questionIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(questionIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"The index is out of bound\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return questions.get(index - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"The input is not a number.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the question based on its index, if the index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionIndex The string index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The deleted question."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question delete(String questionIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(questionIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"The index is out of bound\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d questions.get(index - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            questions.remove(index - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return question;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"The input is not a number.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Edits the question based on its index with a new description,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * if the index string entered is a valid integer string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionIndex The string index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param description The updated description of the question."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding question."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question edit(String questionIndex, String description) throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(questionIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"The index is out of bound\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question current \u003d questions.get(index - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d new Question(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            questions.set(index - 1, question);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return current;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"The input is not a number.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Question question) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return questions.stream().anyMatch(question::equals);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 114,
      "CornCobs": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Stores the remark message that are inserted by the interviewer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * at any given time of the interview. It can be a part of an answer to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * a particular question, or just a normal remark."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Instant time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Remark} which is part of the answer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * to a question of the interview."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param time The time when the remark was made."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param message The remark message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question The question associated with this remark as its answer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Remark(Instant time, String message, Question question) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Remark} which is not part of the answer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * to any question of the interview."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param time The time when the remark was made."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param message The remark message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Remark(Instant time, String message) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.question \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant where this {@code Remark}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return  The Instant when this {@code Remark} was created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Question associated with this {@code Remark}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * if there is any."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Question associated with this {@code Remark} if there is any."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (other instanceof Remark) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Remark otherRemark \u003d ((Remark) other);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (question \u003d\u003d null || otherRemark.getQuestion() \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                return question \u003d\u003d otherRemark.getQuestion();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                return time.equals(otherRemark.time)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        \u0026\u0026 message.equals(otherRemark.message)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        \u0026\u0026 question.equals(otherRemark.question);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 6,
      "agnesnatasya": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/RemarkList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * A list of remarks that are associated  with a particular interview session of an {@code Interviewee}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Some remarks are associated with a question, as it is part of the answer to a question, and some remarks do not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Both are able to be inserted to this remark list. Once a remark has been added, it cannot be removed from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * An interview session always have a start remark and an end remark, thus it minimally has 2 {@code Remark} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * It is assumed that there are no 2 Remarks at any particular time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * @see Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class RemarkList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Map\u003cQuestion, Instant\u003e questionToRemarkMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the remark list encapsulated by {@code RemarkList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public ArrayList\u003cRemark\u003e getRemarks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Adds a remark to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param toAdd The remark to be added to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void add(Remark toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (toAdd.getQuestion() !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (!questionToRemarkMap.containsKey(toAdd.getQuestion())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                questionToRemarkMap.put(toAdd.getQuestion(), toAdd.getTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        remarks.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant of the first remark of {@code RemarkList}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * which is the starting time of the interview."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Instant when the first remark was created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getStartRemarkTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assert (remarks.size() \u003e 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(remarks.get(0).getTime().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks.get(0).getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the number of {@code Remark}s in {@code RemarkList}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The number of {@code Remark}s in this {@code RemarkList}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private int getRemarkListSize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return this.remarks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant of the last remark of {@code RemarkList}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * which is the ending time of the interview."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Instant when the last remark was created."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getLastRemarkTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assert (remarks.size() \u003e 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(remarks.get(getRemarkListSize() - 1).getTime().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks.get(getRemarkListSize() - 1).getTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the duration of the interview."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The duration of the interview session in milliseconds."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public long getInterviewDurationInMs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        long interviewDuration \u003d Math.abs((Duration.between(getStartRemarkTime(), getLastRemarkTime()).toMillis()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return interviewDuration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks if a time is within the duration of the interview."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs Time that is checked."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Whether the time is in the range of the interview duration."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean isTimeInValidRange(long timeMs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return timeMs \u003c\u003d this.getInterviewDurationInMs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are created nearest to the given time."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs Time queried."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that are created nearest to the given time."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getRemarkAtTime(long timeMs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark nearestRemark \u003d remarks.get(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        long minDeviation \u003d Math.abs(timeMs"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                - Math.abs(Duration.between(nearestRemark.getTime(), getStartRemarkTime()).toMillis()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        for (Remark remark : remarks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            long currentDeviation \u003d Math.abs(("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    timeMs - Math.abs((Duration.between(getStartRemarkTime(), remark.getTime()).toMillis())))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (remark !\u003d remarks.get(0) \u0026\u0026 (currentDeviation \u003c minDeviation)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                minDeviation \u003d currentDeviation;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                nearestRemark \u003d remark;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return nearestRemark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks if a question is answered during the interview"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * by checking whether there is a {@code Remark} that is associated with it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question Question that is checked against."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Whether the question is has {@code Remark}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * associated with it as an answer."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean isQuestionAnswered(Question question) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return questionToRemarkMap.containsKey(question);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Instant} when this {@code Question}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was first given association to a {@code Remark} as its answer."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question Question that are queried."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that was"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was first associated with this {@code Question}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getRemarkOfQuestion(Question question) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Instant startOfQuestion \u003d questionToRemarkMap.get(question);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return getRemarkAtTime(Math.abs(Duration.between(getStartRemarkTime(), startOfQuestion).toMillis()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Session.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * This class encapsulates the Storage class and is responsible for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * loading the data before each interview session and saving the data before the end of the session."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    //private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Session(Storage initialStorageData/*, UserPrefsStorage initialUserPrefsData*/) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.storage \u003d initialStorageData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        //this.userPrefsStorage \u003d initialUserPrefsData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Load any existing model."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return Model data as a {@link Model}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Model initModelManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cModel\u003e optionalModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Model initialData;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            optionalModel \u003d storage.readModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            if (optionalModel.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty session.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            initialData \u003d optionalModel.orElseGet(() -\u003e new ModelManager(new UserPrefs()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty session\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialData \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with a new session\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            initialData \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the current Session."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param model the current model at {@link Model}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IOException when the file is not valid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveSession(Model model) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        storage.saveSession(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "weiichengg": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Transcript.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Encapsulates all the details that are put by the interviewer during the interview session"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * for a particular {@code Interviewee}. It stores the {@code RemarkList} which contains all {@code Remark}s"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * of this interview, the {@code File} of the audio recorded for this interview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * and the attribute scores inside a HashMap."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Transcript {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final RemarkList remarkList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private File audioFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Map\u003cAttribute, Double\u003e attributeToScoreMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Transcript} object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * that are associated with a particular interviewee."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Transcript() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.remarkList \u003d new RemarkList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the {@code RemarkList} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code RemarkList} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public RemarkList getRemarkList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarkList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Sets the {@code Transcript} to contain a file as its audio file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param audioFile The File of the audio recording to be stored in this {@code Transcript}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void setAudioFile(File audioFile) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d audioFile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the {@code File} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code File} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public File getAudioFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return audioFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Sets an {@code Attribute} of this {@code Interviewee} to have a certain score."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute that is to be updated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param score The score of this {@code Attribute}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void setAttributeScore (Attribute attribute, Double score) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap.put(attribute, score);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the score of this {@code Attribute} of this {@code Interviewee}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute whose score is to be retrieved."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void getAttributeScore (Attribute attribute) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap.get(attribute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are created nearest to a tim"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * if the time is within the duration of the interview."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs The time that are used to query the {@code Remark}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that are created nearest to the time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getTranscriptAtTime(long timeMs) throws IllegalActionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(\"APAAH SIH\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(timeMs \u003c\u003d remarkList.getInterviewDurationInMs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!remarkList.isTimeInValidRange(timeMs)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new IllegalActionException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    \"The duration of the interview is only \" + remarkList.getInterviewDurationInMs()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark currentRemark \u003d this.remarkList.getRemarkAtTime(timeMs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return currentRemark;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are first associated with this {@code Question}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question {@code Question} that are to be queried."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Instant of the {@code Remark} that are first associated with this {@code Question}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getTranscriptAtQuestion(Question question) throws IllegalActionException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!remarkList.isQuestionAnswered(question)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new IllegalActionException(\"There is no answer for this question\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarkList.getRemarkOfQuestion(question);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 2,
      "CornCobs": 7,
      "agnesnatasya": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/exceptions/IllegalActionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Signals that a method was invoked that results in an illegal model state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IllegalActionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message should contain relevant information on the illegal operation attempted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IllegalActionException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedAttributes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Attribute}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonAdaptedAttributes {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final String attribute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedAttributes (Attribute source) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        attribute \u003d source.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted Attribute object into the model\u0027s {@code Attribute} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Attribute toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (attribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid Attribute.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Attribute(attribute);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedInterviewee.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.InterviewSession;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Interviewee}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonAdaptedInterviewee {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private String fullname;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private Optional\u003cString\u003e alias;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private Optional\u003cFile\u003e resume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private Optional\u003cInterviewSession\u003e interview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedInterviewee(Interviewee source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        fullname \u003d source.getFullName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        alias \u003d source.getAlias();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        resume \u003d source.getResume();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        interview \u003d source.getInterview();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Interviewee} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Interviewee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (fullname \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (Integer.valueOf(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ID\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Interviewee(fullname, id); // do not contain the recording, alias and interview session"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonAdaptedQuestions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class JsonAdaptedQuestions {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonAdaptedQuestions(Question source) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        description \u003d source.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new IllegalValueException(\"Invalid Question\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return new Question(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/JsonSerializableModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * An Immutable Model that is serializable to JSON format {@link Model}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "@JsonRootName(value \u003d \"Model\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "class JsonSerializableModel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEWEE \u003d \"Interviewee list contains duplicate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewee\u003e interviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedAttributes\u003e attributes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private final List\u003cJsonAdaptedQuestions\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public JsonSerializableModel(Model source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questions.addAll(source.getQuestionListView().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .map(JsonAdaptedQuestions::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        attributes.addAll(source.getAttributeListView().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .map(JsonAdaptedAttributes::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addAll(source.getFilteredIntervieweeListView().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                .map(JsonAdaptedInterviewee::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Model toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Model newModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        for (JsonAdaptedInterviewee jsonAdaptedInterviewee : interviewees) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            Interviewee person \u003d jsonAdaptedInterviewee.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            //  addressBook.addPerson(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        // Will update this once we confirm the implementation of Model."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return newModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 3,
      "weiichengg": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Path getFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Returns Model data as a {@link Model}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    Optional\u003cModel\u003e readModel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Saves the given {@link Model} to the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param model cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    void saveSession(Model model) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "package seedu.address.model.hirelah.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " * Manages storage of different Sessions data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiichengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.storage.StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public StorageManager(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * Save the current Session"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @param  model of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public void saveSession(Model model) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModel(model), filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * reads the data from the current Path of the storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @return Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    public Optional\u003cModel\u003e readModel() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        Optional\u003cJsonSerializableModel\u003e jsonModel \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "                filePath, JsonSerializableModel.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        if (jsonModel.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            return Optional.of(jsonModel.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiichengg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    //void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 7,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttributeListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of attributes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class AttributeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"TextListView.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttributeListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cAttribute\u003e textListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public AttributeListPanel(ObservableList\u003cAttribute\u003e attributeList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setItems(attributeList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DetailedIntervieweeCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of a {@code Interviewee}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class DetailedIntervieweeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"IntervieweeListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Interviewee interviewee;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label alias;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label resume;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public DetailedIntervieweeCard(Interviewee interviewee) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        id.setText(String.valueOf(interviewee.getId()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        name.setText(interviewee.getFullName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        alias.setText(interviewee.getAlias().orElse(\"No alias has been set.\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        resume.setText(interviewee.getResume().orElse(new File(\"\")).getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (!(other instanceof IntervieweeCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        DetailedIntervieweeCard card \u003d (DetailedIntervieweeCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u0026\u0026 interviewee.equals(card.interviewee);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntervieweeCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * An UI component that displays information of a {@code Interviewee}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class IntervieweeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"IntervieweeListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Interviewee interviewee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label alias;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label done;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public IntervieweeCard(Interviewee interviewee) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        name.setText(interviewee.getFullName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        id.setText(String.valueOf(interviewee.getId()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        alias.setText(interviewee.getAlias().orElse(\"No alias has been set.\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // done should be a image? or just tick/cross? status check for interviewee"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (!(other instanceof IntervieweeCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        IntervieweeCard card \u003d (IntervieweeCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                \u0026\u0026 interviewee.equals(card.interviewee);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntervieweeListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of interviewees."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class IntervieweeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"CardListView.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IntervieweeListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cInterviewee\u003e cardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public IntervieweeListPanel(ObservableList\u003cInterviewee\u003e intervieweeList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setItems(intervieweeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new IntervieweeListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Interviewee} using a {@code IntervieweeCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class IntervieweeListViewCell extends ListCell\u003cInterviewee\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Interviewee interviewee, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(interviewee, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || interviewee \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(new IntervieweeCard(interviewee).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.logic.commands.ToggleView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Interviewee;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private IntervieweeListPanel intervieweeListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private RemarkListPanel remarkListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private AttributeListPanel attributeListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private DetailedIntervieweeCard detailedIntervieweeCard;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ToggleView toggleView \u003d ToggleView.INTERVIEWEE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private StackPane listPanelStackPane;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        intervieweeListPanel \u003d new IntervieweeListPanel(logic.getFilteredIntervieweeListView());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        attributeListPanel \u003d new AttributeListPanel(logic.getAttributeListView());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getQuestionListView());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().add(intervieweeListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getSessionsDirectory());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Sets what is displayed in the listPanelStackPane based on the toggle."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param toggleView enum representing what should be displayed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public void handleToggle(ToggleView toggleView) throws IllegalValueException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        if (this.toggleView \u003d\u003d toggleView) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.toggleView \u003d toggleView;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        listPanelStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        switch (toggleView) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case ATTRIBUTE: // attribute"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(attributeListPanel.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case QUESTION: // questions"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case TRANSCRIPT: // transcript"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            remarkListPanel \u003d new RemarkListPanel(null);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            detailedIntervieweeCard \u003d new DetailedIntervieweeCard(new Interviewee(\"Test name\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                    10086));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().addAll(remarkListPanel.getRoot(), detailedIntervieweeCard.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            StackPane.setAlignment(detailedIntervieweeCard.getRoot(), Pos.TOP_CENTER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        case INTERVIEWEE: // interviewee"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            listPanelStackPane.getChildren().add(intervieweeListPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            handleToggle(commandResult.getToggleView());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 54,
      "CornCobs": 6,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of questions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"TextListView.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cQuestion\u003e textListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setItems(questionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        textListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Custom {@code ListCell} that displays the Question text with the question number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int questionNumber \u003d getIndex() + 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            setText(question \u003d\u003d null ? \"\" : questionNumber + \". \" + question.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setPrefWidth(150.0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            setWrapText(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 29,
      "CornCobs": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RemarkCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * An UI component that displays information of an {@code Interviewee}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class RemarkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"TranscriptListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public final Remark remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label timestamp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private FlowPane questionTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Constructs a remark card based on the data stored in a Remark object. Implementation may change?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * @param remark remark object to take information from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public RemarkCard(Remark remark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 46,
      "CornCobs": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RemarkListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bscrow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bscrow"
        },
        "content": "import seedu.address.model.hirelah.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bscrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bscrow"
        },
        "content": " * Panel containing the list of remarks for an interviewee."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bscrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bscrow"
        },
        "content": "public class RemarkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private static final String FXML \u003d \"CardListView.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RemarkListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    private ListView\u003cRemark\u003e generalListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    public RemarkListPanel(ObservableList\u003cRemark\u003e remarkList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        generalListView.setItems(remarkList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        generalListView.setCellFactory(listView -\u003e new RemarkListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Remark} using a {@code RemarkCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bscrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    class RemarkListViewCell extends ListCell\u003cRemark\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        protected void updateItem(Remark remark, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            super.updateItem(remark, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            if (empty || remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bscrow"
        },
        "content": "                setGraphic(new RemarkCard(remark).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bscrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bscrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bscrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bscrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bscrow": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    // TODO: Change image of icon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CardListView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c!--For ListViews that displays list of cards--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003cListView fx:id\u003d\"cardListView\" VBox.vgrow\u003d\"ALWAYS\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/IntervieweeListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bscrow"
        },
        "content": "      \u003cLabel fx:id\u003d\"alias\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$alias\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "         title\u003d\"Hirelah!\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003cVBox fx:id\u003d\"listPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelStackPane\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiichengg"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "weiichengg": 8,
      "-": 52
    }
  },
  {
    "path": "src/main/resources/view/TextListView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bscrow"
        },
        "content": "\u003c!--For ListViews that displays list of text based information--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bscrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bscrow"
        },
        "content": "   \u003cListView fx:id\u003d\"textListView\" VBox.vgrow\u003d\"ALWAYS\" prefHeight\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bscrow": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void execute_commandExecutionError_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseException(deleteCommand, String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 4,
      "CornCobs": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtility.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Contains helper fields for testing commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class CommandTestUtility {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_INTERVIEWEE \u003d \"interviewee\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_ATTRIBUTE \u003d \"attribute\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_PROPERTY_QUESTION \u003d \"question\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ALIAS_JANE \u003d \"Jane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_INTERVIEWEE_JANE \u003d \"Jane Doe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_INTERVIEWEE_JANICE \u003d \"Janice Doe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ATTRIBUTE_PERSISTENCE \u003d \"persistence\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_ATTRIBUTE_INTEGRITY \u003d \"integrity\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String VALID_QUESTION_WHAT \u003d \"What is this question?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_WHAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddAttributeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + \"Jane\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\", \"Jane\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddAttributeCommand(\"persistence\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_QUESTION"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddQuestionCommand(\"What is this question?\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 42,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddIntervieweeCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ALIAS_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class AddIntervieweeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private AddIntervieweeCommandParser parser \u003d new AddIntervieweeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_ALIAS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new AddIntervieweeCommand(\"Jane Doe\", \"Jane\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIntervieweeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_WHAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteAttributeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new DeleteIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_ATTRIBUTE_PERSISTENCE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new DeleteAttributeCommand(\"persistence\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_PROPERTY_QUESTION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new DeleteQuestionCommand(\"What is this question?\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 44,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditAttributeCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditAttributeCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private EditAttributeCommandParser parser \u003d new EditAttributeCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW + WHITESPACE + VALID_INTERVIEWEE_JANICE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditAttributeCommand(\"Jane Doe\", \"Janice Doe\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldPrefixMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newPrefixMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_INTEGRITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_PERSISTENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_QUESTION_WHAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditAttributeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditQuestionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW + WHITESPACE + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD + WHITESPACE + VALID_ATTRIBUTE_PERSISTENCE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW + WHITESPACE + VALID_ATTRIBUTE_INTEGRITY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditAttributeCommand(\"persistence\", \"integrity\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_QUESTION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + \"1\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_QUESTION_WHAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditQuestionCommand(\"1\", \"What is this question?\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_compulsoryFieldsMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE + WHITESPACE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE + WHITESPACE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_QUESTION + WHITESPACE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void parse_argumentMissing_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 40,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditIntervieweeCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class EditIntervieweeCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private EditIntervieweeCommandParser parser \u003d new EditIntervieweeCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW + WHITESPACE + VALID_INTERVIEWEE_JANICE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_oldPrefixMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_NEW,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_newPrefixMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        + WHITESPACE + VALID_INTERVIEWEE_JANICE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIntervieweeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ALIAS_JANE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_ATTRIBUTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListAttributeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListIntervieweeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.ListQuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validCommand_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_INTERVIEWEE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListIntervieweeCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_ATTRIBUTE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListAttributeCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE + VALID_PROPERTY_QUESTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                new ListQuestionCommand());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidCommand_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertParseFailure(parser, WHITESPACE + VALID_ALIAS_JANE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NormalParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_ATTRIBUTE_INTEGRITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_ADD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_DELETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_COMMAND_EDIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_INTERVIEWEE_JANICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.VALID_PROPERTY_INTERVIEWEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtility.WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.DeleteIntervieweeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class NormalParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private NormalParser parser \u003d new NormalParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validAddCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_ADD + WHITESPACE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new AddIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validEditCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_EDIT + WHITESPACE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE + PREFIX_OLD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + VALID_INTERVIEWEE_JANE + WHITESPACE + PREFIX_NEW"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + VALID_INTERVIEWEE_JANICE + WHITESPACE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new EditIntervieweeCommand(\"Jane Doe\", \"Janice Doe\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_validDeleteCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Command result \u003d parser.parseCommand(VALID_COMMAND_DELETE + WHITESPACE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE + VALID_INTERVIEWEE_JANE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(result, new DeleteIntervieweeCommand(\"Jane Doe\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(VALID_ATTRIBUTE_INTEGRITY + WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + VALID_PROPERTY_INTERVIEWEE + WHITESPACE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + PREFIX_OLD + WHITESPACE + VALID_INTERVIEWEE_JANE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + PREFIX_NEW"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                + WHITESPACE + VALID_INTERVIEWEE_JANICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new IntervieweeList(), modelManager.getIntervieweeList()); TODO: override equals on model classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new AttributeList(), modelManager.getAttributeList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        //assertEquals(new QuestionList(), modelManager.getQuestionList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(Paths.get(\"hirelah/file/path\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(Paths.get(\"new/hirelah/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setSessionsDirectory(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_validPath_setsSessionsDirectory() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        modelManager.setSessionsDirectory(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(path, modelManager.getSessionsDirectory());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 10,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setSessionsDirectory_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setSessionsDirectory(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            new AttributeList().add(\"courage\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateAttribute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Attribute(\"courage\"), list.find(\"cou\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyAttributeList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"co\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            list.delete(\"cou\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyAttributeList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new AttributeList().delete(\"cou\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_noAttributeFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"cou\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"co\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 108,
      "CornCobs": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeTest class tests the methods implemented in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the Attribute class.\u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void of_invalidAttributeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Attribute.of(\"1234\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void isValidAttributeName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"curiosity*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"toughness 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"Mario Lorenzo Jr the 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"toughness\")); // alphabets only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"Mario Lorenzo\")); // with capital letters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 44,
      "CornCobs": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_validNames_intervieweeAdded() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Sarah O\u0027Conner\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"King Henry the 3rd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"-155\"); // Allow anything as long as it is not parsed by Integer#parseUnsignedInt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"Sarah O\u0027Conner\", interviewees.getInterviewee(\"1\").getFullName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"King Henry the 3rd\", interviewees.getInterviewee(\"2\").getFullName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_invalidNames_exceptionThrown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"15\"); // numeric names are disallowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"\"); // empty strings are disallowed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(interviewees.getObservableList().isEmpty()); // Should still be empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addIntervieweeWithAlias_validNameInvalidAlias_exceptionThrownButIntervieweeAdded()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalActionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addIntervieweeWithAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertDoesNotThrow(() -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addAlias_duplicateName_exceptionThrown() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Tom\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void deleteInterviewee_validIdentifier_intervieweeDeleted() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Tom\", \"T\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"1\"); // delete Bob by id"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Bob\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"T\"); // delete Tom by alias"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getInterviewee_idAndFullName_sameIntervieweeReturned() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee a \u003d interviewees.getInterviewee(\"1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee b \u003d interviewees.getInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(a, b);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getObservableList_increasingIdOrder() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"A\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"B\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"C\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"D\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"E\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"D\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int previous \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Interviewee i : interviewees.getObservableList()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertTrue(i.getId() \u003e previous);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            previous \u003d i.getId();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void constructor_invalidName_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"12345\", 4); // test numeric name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"\", 4); // test empty string name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void giveAlias_moreThanOnce_exceptionThrown() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee i \u003d new Interviewee(\"Bob\", 4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertDoesNotThrow(() -\u003e i.giveAlias(\"Bo\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            i.giveAlias(\"B\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"Interviewee already has an alias\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void giveAlias_validIdentifier_hasAlias() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee i \u003d new Interviewee(\"Bob\", 4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        i.giveAlias(\"Bo\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(i.getAlias().isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully added metric: extremeSkewed\", new MetricList().add(\"extremeSkewed\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateMetric() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Metric(\"extremeSkewed\"), list.find(\"ex\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyMetricList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"ex\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"someWeight\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"ex\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_duplicateMetricPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"wei\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully removed metric: extremeSkewed\", list.delete(\"ex\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyMetricList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new MetricList().delete(\"ex\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_noMetricFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"ex\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"we\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            new QuestionList().add(\"what is this question?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateQuestion() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Question(\"what is this question?\"), list.find(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputNotANumber() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"wha\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputNegativeIndex() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"-1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputOutOfBound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"5\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            list.delete(\"1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputNotANumber() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"what\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputNegativeIndex() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"-1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputOutOfBound() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"5\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 127,
      "CornCobs": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getRemarks_retrieveRemarks_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(new ArrayList\u003cRemark\u003e(), actualRemarks.getRemarks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void add_addRemarks_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArrayList\u003cRemark\u003e expectedArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        expectedArray.add(RemarkTest.REMARK_MIDDLE_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(expectedArray, actualRemarks.getRemarks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getStartRemarkTime_getStartTime_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.DEFAULT_EARLIER_INSTANT, actualRemarks.getStartRemarkTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getLastRemarkTime_getLastTime_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.DEFAULT_LATER_INSTANT, actualRemarks.getLastRemarkTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getInterviewDurationInMs_getInterviewTime_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(1000, actualRemarks.getInterviewDurationInMs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isTimeInValidRange_validTime_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertTrue(actualRemarks.isTimeInValidRange(1000));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isTimeInValidRange_invalidTime_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertFalse(actualRemarks.isTimeInValidRange(1001));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getRemarkAtTime_getMiddleRemark_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark result \u003d actualRemarks.getRemarkAtTime(500);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION, actualRemarks.getRemarkAtTime(500));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isQuestionAnswered_noAnswer_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertFalse(actualRemarks.isQuestionAnswered(RemarkTest.DEFAULT_QUESTION_3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getInstantOfQuestion_firstQuestion_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.getRemarkOfQuestion(RemarkTest.DEFAULT_QUESTION_2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualRemarks.getRemarkOfQuestion(RemarkTest.DEFAULT_QUESTION_2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_EARLIER_INSTANT \u003d Instant.now();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_QUARTER_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(250);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_MIDDLE_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(500);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_LATER_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(1000);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_START_WITHOUT_QUESTION \u003d new Remark(DEFAULT_EARLIER_INSTANT, \"Start\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_MIDDLE_WITHOUT_QUESTION \u003d new Remark(DEFAULT_MIDDLE_INSTANT, \"Random remark\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_STOP_WITHOUT_QUESTION \u003d new Remark(DEFAULT_LATER_INSTANT, \"Stop\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_1 \u003d new Question(\"Is this a question?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_2 \u003d new Question(\"Is this another question?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_3 \u003d new Question(\"Is this another another question?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_QUARTER_WITH_QUESTION \u003d new Remark(DEFAULT_QUARTER_INSTANT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \"Random remark\", DEFAULT_QUESTION_1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_MIDDLE_WITH_QUESTION \u003d new Remark(DEFAULT_MIDDLE_INSTANT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \"Random remark\", DEFAULT_QUESTION_2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTime_maxTime_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_MIDDLE_INSTANT, REMARK_MIDDLE_WITHOUT_QUESTION.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getQuestion_noQuestion_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(null, REMARK_MIDDLE_WITHOUT_QUESTION.getQuestion());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTime_withQuestion_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_MIDDLE_INSTANT, REMARK_MIDDLE_WITH_QUESTION.getTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getQuestion_withQuestion_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_QUESTION_2, REMARK_MIDDLE_WITH_QUESTION.getQuestion());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/TranscriptTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class TranscriptTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtTime_invalidTimeRange_failure() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e actualTranscript.getTranscriptAtTime(1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtTime_validTimeRange_success() throws IllegalActionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION, actualTranscript.getTranscriptAtTime(500));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtQuestion_unansweredQuestion_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualTranscript.getTranscriptAtQuestion(RemarkTest.DEFAULT_QUESTION_1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtQuestion_answeredQuestion_success() throws IllegalActionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_QUARTER_WITH_QUESTION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualTranscript.getTranscriptAtQuestion(RemarkTest.DEFAULT_QUESTION_1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userPrefs.setSessionsDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 1,
      "-": 44
    }
  }
]
