[
  {
    "path": "src/main/java/seedu/address/model/hirelah/Attribute.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Attribute"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttribute class represents the parameters that are"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * taken into account to assess the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Attribute {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            \"A name of attribute should only contain alphabet characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\s]*$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs an Attribute instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the attribute."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkArgument(isValidAttributeName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public static boolean isValidAttributeName(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Attribute // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Attribute) other).name)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 57,
      "CornCobs": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AttributeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeList class manages the list of attributes that have been"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. AttributeList can retrieve the attributes using"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeList implements IList\u003cAttribute\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple attributes with the same prefix.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No attributes with the entered prefix.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ArrayList\u003cAttribute\u003e attributes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs an AttributeList instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public AttributeList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the attribute to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributeName The attribute name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The message outcome."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String add(String attributeName) throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Attribute attribute \u003d new Attribute(attributeName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            boolean isDuplicate \u003d isDuplicate(attribute);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isDuplicate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            attributes.add(attribute);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return String.format(\"Successfully added attribute: %s\", attribute);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Find the attribute based on its prefix."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Attribute find(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkPrefix(attributePrefix);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attributes.stream().filter(attribute -\u003e attribute.toString().startsWith(attributePrefix))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                  .findFirst()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                                  .get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the attribute by its prefix."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String delete(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Attribute attribute \u003d find(attributePrefix);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        attributes.remove(attribute);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully removed %s\", attribute);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks the number of attributes that starts with the prefix."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attributePrefix The prefix of the attribute."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkPrefix(String attributePrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        long startWithPrefix \u003d attributes.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .filter(attribute -\u003e attribute.toString().startsWith(attributePrefix))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (startWithPrefix \u003e 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (startWithPrefix \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Attribute attribute) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return attributes.stream().anyMatch(attribute::equals);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/AudioPlayer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.AudioInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.AudioSystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.Clip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.LineUnavailableException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import javax.sound.sampled.UnsupportedAudioFileException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Stores the audio file recorded during the interview session of an {@code Interviewee}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Provides functionality to play, pause, resume and jump to a particular time for the audio file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class AudioPlayer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    //Solution below adapted from https://www.geeksforgeeks.org/play-audio-file-using-java/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private Long frame;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Clip clip;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private AudioInputStream audioInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final File audioFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs an {@code AudioPlayer} object with the specified audio file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param audioFile The audio file to be encapsulated by the {@code AudioPlayer}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws UnsupportedAudioFileException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @throws LineUnavailableException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AudioPlayer(File audioFile) throws UnsupportedAudioFileException, IOException, LineUnavailableException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d audioFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        audioInputStream \u003d AudioSystem.getAudioInputStream(audioFile.getAbsoluteFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip \u003d AudioSystem.getClip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.open(audioInputStream);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.loop(Clip.LOOP_CONTINUOUSLY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Plays the audio file at the current frame that it is in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void play() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.start();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Pauses the audio from playing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void pause() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.frame \u003d this.clip.getMicrosecondPosition();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.stop();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Resumes the audio from pausing at the frame when it last was paused."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void resume() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        clip.setMicrosecondPosition(frame);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.play();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Generates a new {@code AudioPlayer} that are set to start a particular time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeInMs The time to be set as the starting time of the audio file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public AudioPlayer playAtMs(long timeInMs)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throws UnsupportedAudioFileException, IOException, LineUnavailableException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        frame \u003d timeInMs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        AudioPlayer audioAtTime \u003d new AudioPlayer(this.audioFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        audioAtTime.clip.setMicrosecondPosition(timeInMs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return audioAtTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/IList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * IList"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * IList interface serves as a base for other lists that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * manage the CRUD of a model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @param \u003cT\u003e The type of the model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public interface IList\u003cT\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    String add(String description) throws IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    String delete(String description) throws IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    T find(String description) throws IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/InterviewSession.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A simple record class that contains all interview information for a Interviewee - the scores, the transcript"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * and the audio recording."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class InterviewSession {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Transcript transcript;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cAttribute, Double\u003e scores;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private File audioRecording;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public InterviewSession(Transcript transcript, Map\u003cAttribute, Double\u003e scores, File audioRecording) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.transcript \u003d transcript;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.scores \u003d scores;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.audioRecording \u003d audioRecording;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Transcript getTranscript() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return transcript;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Map\u003cAttribute, Double\u003e getScores() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return scores;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public File getAudioRecording() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return audioRecording;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Interviewee.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A class to represent Interviewee candidates in a Session. They have"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - a unique ID per session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - the candidate\u0027s full name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional, single, alias."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional resume (a file object)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * - an optional indicating if they have been interviewed, and containing the interview session data"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " *   if they have been interviewed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Interviewee {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \"Names and aliases should not be numbers, eg. 12345, and should not be blank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String fullName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cString\u003e alias \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cFile\u003e resume \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Optional\u003cInterviewSession\u003e interview \u003d Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates a new Interviewee in the system which starts with no alias, no resume and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * being not yet interviewed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName The interviewee\u0027s full name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param id The interviewee\u0027s unique interviewee id."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee(String fullName, int id) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Sets the full name. Allows renaming of Interviewees."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param fullName the new name of the interviewee"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setFullName(String fullName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cString\u003e getAlias() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Gives an alias to the interviewee object if the interviewee has no alias presently."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias the alias referring to this interviewee."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void giveAlias(String alias) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkValidIdentifier(alias);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (this.alias.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"Interviewee already has an alias\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.alias \u003d Optional.of(alias);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cFile\u003e getResume() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setResume(File resume) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.resume \u003d Optional.ofNullable(resume);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Optional\u003cInterviewSession\u003e getInterview() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interview;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Gets the score of an interviewee that has already been interviewed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * It is guaranteed that this method is only called on Interviewees that have been interviewed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param attribute the Attribute to retrieve the score for."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the score of the given Attribute."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws java.util.NoSuchElementException if Interviewee has not been interviewed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                          However, it is guaranteed not to occur at runtime"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                          as the IntervieweeList is filtered before sorting by score."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public double getScore(Attribute attribute) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interview.get().getScores().get(attribute);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Saves the interview session data, only if there is no previous interview session data, to prevent"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * overwriting the session data accidentally."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param transcript The transcript of remarks taken down during the interview."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param scores the final attribute scores of the candidate."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param audioRecording the .wav file with the audio recording of the interview."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void recordInterview(Transcript transcript, Map\u003cAttribute, Double\u003e scores, File audioRecording) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assert this.interview.isEmpty(); // this method should only be called once"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.interview \u003d Optional.of(new InterviewSession(transcript, scores, audioRecording));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Validates a string meant to be used as an alias or the full name to ensure it is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * not a valid number, and is not the empty string. Any other string will be considered valid,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * since there are names that contain punctuation, non-ascii characters and even numbers."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier the alias or name to validate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException if identifier is empty, or is a valid number"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkValidIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If successfully parsed as an integer, reject the identifier"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // If identifier only contains whitespace or is an empty string, reject it"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (identifier.isBlank()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 1,
      "CornCobs": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/IntervieweeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A collection of Interviewees that does not allow 2 Interviewees with the exact same full name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * It exposes a single accessor method, getInterviewee, which handles all forms of access by id,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * alias or full name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IntervieweeList implements Iterable\u003cInterviewee\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The unique ID assigned to an interviewee for the entire session. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private int uniqueIntervieweeId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* The actual collection of interviewees. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cInteger, Interviewee\u003e interviewees;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /* Mappings from aliases and full names to the interviewee indices for efficient lookup. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Map\u003cString, Integer\u003e identifierIndices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes an IntervieweeList with data from a saved session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param uniqueIntervieweeId The next id to assign from the previous session."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewees The collection of interviewees from the previous session."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifierIndices The identifiers of interviewees from the previous session."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList(int uniqueIntervieweeId,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cInteger, Interviewee\u003e interviewees,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                           Map\u003cString, Integer\u003e identifierIndices) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.uniqueIntervieweeId \u003d uniqueIntervieweeId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.interviewees \u003d interviewees;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.identifierIndices \u003d identifierIndices;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new empty IntervieweeList with no interviewees. uniqueInterviewId starts at 1."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IntervieweeList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this(1, new TreeMap\u003c\u003e(), new TreeMap\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to create a new Interviewee object and add it to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException In the following situations:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is already taken."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The name given is invalid (is either blank or is a number)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d createInterviewee(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.put(interviewee.getId(), interviewee);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(name, interviewee.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * A convenience function to add an interviewee and assign an alias immediately. It can fail after"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * adding the interviewee, while assigning the alias, if the alias is already taken. In that case,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * the interviewee is still added, but the alias is not assigned."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The full name of the new Interviewee."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name or alias is already taken or invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException Should not be thrown as the interviewee definitely exists, and does"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                not have an alias when initially created."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addIntervieweeWithAlias(String name, String alias)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        addInterviewee(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        addAlias(name, alias);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Adds an alias for the given interviewee which can be used to retrieve said interviewee via getInterviewee."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee, which must either be a full name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                   or the interviewee\u0027s id, since no alias should be given presently."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param alias The alias to give."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the alias is already taken, or is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException In the following situations:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *  - The interviewee already has an alias."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addAlias(String identifier, String alias) throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        checkDuplicateIdentifier(alias);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewee.giveAlias(alias);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.put(alias, interviewee.getId());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes an Interviewee with the given identifier."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The identifier to retrieve the interviewee."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void deleteInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee toDelete \u003d getInterviewee(identifier);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.remove(toDelete.getId());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        identifierIndices.remove(toDelete.getFullName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        toDelete.getAlias().ifPresent(alias -\u003e identifierIndices.remove(alias));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves an Interviewee given a unique identifier, which can be the Interviewee\u0027s id, full name or alias."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param identifier The Interviewee\u0027s id, full name or an alias."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return The retrieved Interviewee."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalActionException If the identifier cannot be associated with any interviewee."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Interviewee getInterviewee(String identifier) throws IllegalActionException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee result;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // attempts to parse identifier as an interviewee id"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int id \u003d Integer.parseUnsignedInt(identifier);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // if not an id, attempts to match identifier with either full name or alias"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Integer id \u003d identifierIndices.get(identifier);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new IllegalActionException(\"No interviewee with the given identifier can be found\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            result \u003d interviewees.get(id);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalActionException(\"No interviewee with this id can be found\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an iterator over elements of type {@code T}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Iterator\u003cInterviewee\u003e iterator() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interviewees.values().iterator();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates an Interviewee with the given name, assigning it the next uniqueIntervieweeId."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Only increments the id if the interviewee was created successfully."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param name The name of the interviewee."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return A new Interviewee object."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IllegalValueException If the name given is an invalid name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Interviewee createInterviewee(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee interviewee \u003d new Interviewee(name, uniqueIntervieweeId);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Only increment id if interviewee was successfully created"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        uniqueIntervieweeId++;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return interviewee;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void checkDuplicateIdentifier(String identifier) throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (identifierIndices.containsKey(identifier)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new IllegalValueException(\"An Interviewee with this name or alias already exists!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Metric.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Metric"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetric class abstracts the comparator of the interviewee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * based on the respective weight of the attributes.\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Metric {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private HashMap\u003cAttribute, Double\u003e attributeToWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Metric instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param name The name of the metric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Set a particular attribute to a value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param attribute The attribute that the value wants to be set."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param value The value of the attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String setValueToAttribute(Attribute attribute, double value) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.attributeToWeight.put(attribute, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully set the value of attribute %s to %.2f\", attribute, value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Constructs a Comparator for Interviewee based on the weighted score."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The Comparator instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Comparator\u003cInterviewee\u003e getComparator() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return (interviewee, anotherInterviewee) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreFirst \u003d computeScore(interviewee);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            double totalScoreSecond \u003d computeScore(anotherInterviewee);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return totalScoreSecond - totalScoreFirst \u003c 0 ? -1 : totalScoreFirst \u003d\u003d totalScoreSecond ? 0 : 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Computes the final score of an interviewee. Can only be called on Interviewees that have been"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * interviewed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param interviewee The interviewee to be computed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The score of the interviewee based on the metric."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private double computeScore(Interviewee interviewee) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        double totalScore \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Map.Entry\u003cAttribute, Double\u003e mapElement : attributeToWeight.entrySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Attribute attribute \u003d mapElement.getKey();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            double weight \u003d mapElement.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            totalScore +\u003d weight * interviewee.getScore(attribute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Metric // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 name.equals(((Metric) other).name)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 79,
      "CornCobs": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/MetricList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * MetricList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eMetricList class manages the list of metrics that have been"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * added by the interviewer. MetricList can retrieve the attributes using"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the prefix.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricList implements IList\u003cMetric\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"There are multiple metrics with the same prefix.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE \u003d \"No metrics with the entered prefix.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ArrayList\u003cMetric\u003e metrics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a MetricList instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public MetricList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.metrics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the metric to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricName The metric name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The message outcome."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String add(String metricName) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Metric metric \u003d new Metric(metricName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            boolean isDuplicate \u003d isDuplicate(metric);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isDuplicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"This attribute is already exists!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            metrics.add(metric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return String.format(\"Successfully added metric: %s\", metric);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Find the metric based on its prefix."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the metric."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Attribute instance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Metric find(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        checkPrefix(metricPrefix);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.stream().filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                               .findFirst()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                               .get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the metric by its prefix."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Attribute found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String delete(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        Metric metric \u003d find(metricPrefix);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        metrics.remove(metric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return String.format(\"Successfully removed metric: %s\", metric);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Checks the number of metrics that starts with the prefix."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param metricPrefix The prefix of the attribute."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException if the prefix can be multi-interpreted or no such Metric found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private void checkPrefix(String metricPrefix) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        long startWithPrefix \u003d metrics.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .filter(metric -\u003e metric.toString().startsWith(metricPrefix))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        if (startWithPrefix \u003e 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } else if (startWithPrefix \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Metric metric) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return metrics.stream().anyMatch(metric::equals);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Question.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Question"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestion class represents the questions that wants to be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * asked to the interviewee.\u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Constructs a Question instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param description The description of the question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                \u0026\u0026 description.equals(((Question) other).description)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 42,
      "CornCobs": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/QuestionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * QuestionList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 02 Mar 2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eQuestionList class manages the list of questions that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * have been added by the interviewer. Questions can be retrieve"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * by their ordering.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionList implements IList\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private ArrayList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        this.questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Lists all the questions that have been added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The String represented the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String listQuestions() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d questions.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                message +\u003d \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            message +\u003d questions.get(i - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Adds the question to the list, if the input is valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionDescription The question."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the question already exists."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String add(String questionDescription) throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d new Question(questionDescription);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            boolean isDuplicate \u003d isDuplicate(question);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (isDuplicate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"This question is already exists!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            questions.add(question);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return String.format(\"Successfully added question: %s\", question);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Finds the question based on its index, if the index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionIndex The string index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The corresponding Question instance."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public Question find(String questionIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(questionIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"The index is out of bound\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return questions.get(index - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"The input is not a number.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * Deletes the question based on its index, if the index"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * string entered is a valid integer string."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @param questionIndex The string index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @return The outcome message."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     * @throws IllegalValueException If the questionIndex is not a number or the index is out of bound."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public String delete(String questionIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            int index \u003d Integer.parseInt(questionIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            if (index \u003e questions.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                throw new IllegalValueException(\"The index is out of bound\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            Question question \u003d questions.get(index - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            questions.remove(question);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            return String.format(\"Successfully deleted question: %s\", question);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            throw new IllegalValueException(\"The input is not a number.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    private boolean isDuplicate(Question question) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        return questions.stream().anyMatch(question::equals);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Stores the remark message that are inserted by the interviewer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * at any given time of the interview. It can be a part of an answer to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * a particular question, or just a normal remark."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Instant time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Remark} which is part of the answer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * to a question of the interview."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param time The time when the remark was made."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param message The remark message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question The question associated with this remark as its answer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Remark(Instant time, String message, Question question) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Remark} which is not part of the answer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * to any question of the interview."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param time The time when the remark was made."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param message The remark message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Remark(Instant time, String message) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.question \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant where this {@code Remark}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return  The Instant when this {@code Remark} was created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Question associated with this {@code Remark}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * if there is any."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Question associated with this {@code Remark} if there is any."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else if (other instanceof Remark) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            Remark otherRemark \u003d ((Remark) other);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (question \u003d\u003d null || otherRemark.getQuestion() \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                return question \u003d\u003d otherRemark.getQuestion();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                return time.equals(otherRemark.time)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        \u0026\u0026 message.equals(otherRemark.message)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                        \u0026\u0026 question.equals(otherRemark.question);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 6,
      "agnesnatasya": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/RemarkList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * A list of remarks that are associated  with a particular interview session of an {@code Interviewee}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Some remarks are associated with a question, as it is part of the answer to a question, and some remarks do not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Both are able to be inserted to this remark list. Once a remark has been added, it cannot be removed from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * An interview session always have a start remark and an end remark, thus it minimally has 2 {@code Remark} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * It is assumed that there are no 2 Remarks at any particular time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * @see Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "public class RemarkList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final ArrayList\u003cRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Map\u003cQuestion, Instant\u003e questionToRemarkMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the remark list encapsulated by {@code RemarkList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public ArrayList\u003cRemark\u003e getRemarks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Adds a remark to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param toAdd The remark to be added to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void add(Remark toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (toAdd.getQuestion() !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (!questionToRemarkMap.containsKey(toAdd.getQuestion())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                questionToRemarkMap.put(toAdd.getQuestion(), toAdd.getTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        remarks.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant of the first remark of {@code RemarkList}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * which is the starting time of the interview."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Instant when the first remark was created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getStartRemarkTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assert (remarks.size() \u003e 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(remarks.get(0).getTime().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks.get(0).getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the number of {@code Remark}s in {@code RemarkList}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The number of {@code Remark}s in this {@code RemarkList}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private int getRemarkListSize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return this.remarks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the Instant of the last remark of {@code RemarkList}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * which is the ending time of the interview."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The Instant when the last remark was created."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Instant getLastRemarkTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assert (remarks.size() \u003e 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(remarks.get(getRemarkListSize() - 1).getTime().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarks.get(getRemarkListSize() - 1).getTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the duration of the interview."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The duration of the interview session in milliseconds."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public long getInterviewDurationInMs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        long interviewDuration \u003d Math.abs((Duration.between(getStartRemarkTime(), getLastRemarkTime()).toMillis()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return interviewDuration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks if a time is within the duration of the interview."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs Time that is checked."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Whether the time is in the range of the interview duration."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean isTimeInValidRange(long timeMs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return timeMs \u003c\u003d this.getInterviewDurationInMs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are created nearest to the given time."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs Time queried."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that are created nearest to the given time."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getRemarkAtTime(long timeMs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark nearestRemark \u003d remarks.get(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        long minDeviation \u003d Math.abs(timeMs"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                - Math.abs(Duration.between(nearestRemark.getTime(), getStartRemarkTime()).toMillis()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        for (Remark remark : remarks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            long currentDeviation \u003d Math.abs(("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    timeMs - Math.abs((Duration.between(getStartRemarkTime(), remark.getTime()).toMillis())))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            if (remark !\u003d remarks.get(0) \u0026\u0026 (currentDeviation \u003c minDeviation)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                minDeviation \u003d currentDeviation;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                nearestRemark \u003d remark;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return nearestRemark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Checks if a question is answered during the interview"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * by checking whether there is a {@code Remark} that is associated with it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question Question that is checked against."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Whether the question is has {@code Remark}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * associated with it as an answer."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public boolean isQuestionAnswered(Question question) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return questionToRemarkMap.containsKey(question);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Instant} when this {@code Question}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was first given association to a {@code Remark} as its answer."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question Question that are queried."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that was"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * was first associated with this {@code Question}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getRemarkOfQuestion(Question question) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Instant startOfQuestion \u003d questionToRemarkMap.get(question);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return getRemarkAtTime(Math.abs(Duration.between(getStartRemarkTime(), startOfQuestion).toMillis()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/Transcript.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * Encapsulates all the details that are put by the interviewer during the interview session"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * for a particular {@code Interviewee}. It stores the {@code RemarkList} which contains all {@code Remark}s"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * of this interview, the {@code File} of the audio recorded for this interview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": " * and the attribute scores inside a HashMap."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Transcript {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final RemarkList remarkList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private File audioFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    private final Map\u003cAttribute, Double\u003e attributeToScoreMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Constructs a {@code Transcript} object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * that are associated with a particular interviewee."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    Transcript() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.remarkList \u003d new RemarkList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the {@code RemarkList} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code RemarkList} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public RemarkList getRemarkList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarkList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Sets the {@code Transcript} to contain a file as its audio file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param audioFile The File of the audio recording to be stored in this {@code Transcript}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void setAudioFile(File audioFile) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.audioFile \u003d audioFile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the {@code File} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code File} that are associated with this {@code Transcript}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public File getAudioFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return audioFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Sets an {@code Attribute} of this {@code Interviewee} to have a certain score."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute that is to be updated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param score The score of this {@code Attribute}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void setAttributeScore (Attribute attribute, Double score) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap.put(attribute, score);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves the score of this {@code Attribute} of this {@code Interviewee}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param attribute The attribute whose score is to be retrieved."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public void getAttributeScore (Attribute attribute) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        this.attributeToScoreMap.get(attribute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are created nearest to a tim"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * if the time is within the duration of the interview."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param timeMs The time that are used to query the {@code Remark}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return The {@code Remark} that are created nearest to the time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getTranscriptAtTime(long timeMs) throws IllegalActionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(\"APAAH SIH\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        System.out.println(timeMs \u003c\u003d remarkList.getInterviewDurationInMs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!remarkList.isTimeInValidRange(timeMs)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new IllegalActionException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                    \"The duration of the interview is only \" + remarkList.getInterviewDurationInMs()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark currentRemark \u003d this.remarkList.getRemarkAtTime(timeMs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return currentRemark;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * Retrieves {@code Remark} that are first associated with this {@code Question}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @param question {@code Question} that are to be queried."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "     * @return Instant of the {@code Remark} that are first associated with this {@code Question}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public Remark getTranscriptAtQuestion(Question question) throws IllegalActionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        if (!remarkList.isQuestionAnswered(question)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            throw new IllegalActionException(\"There is no answer for this question\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        return remarkList.getRemarkOfQuestion(question);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 7,
      "agnesnatasya": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hirelah/exceptions/IllegalActionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Signals that a method was invoked that results in an illegal model state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class IllegalActionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message should contain relevant information on the illegal operation attempted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public IllegalActionException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully added attribute: courage\", new AttributeList().add(\"courage\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateAttribute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Attribute(\"courage\"), list.find(\"cou\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyAttributeList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"cou\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"co\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully removed courage\", list.delete(\"cou\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyAttributeList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new AttributeList().delete(\"cou\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_noAttributeFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"tenacity\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"cou\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"cooperation\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"courage\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"co\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/AttributeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * AttributeTest"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * CS2103 AY19/20 Semester 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * Team Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * HireLah!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * 01 Mar 2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * \u003cp\u003eAttributeTest class tests the methods implemented in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * the Attribute class.\u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " * @author AY1920S2-W15-2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class AttributeTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void constructor_invalidAttributeName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attribute(\"1234\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void isValidAttributeName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"curiosity*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"toughness 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertFalse(Attribute.isValidAttributeName(\"Mario Lorenzo Jr the 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"toughness\")); // alphabets only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertTrue(Attribute.isValidAttributeName(\"Mario Lorenzo\")); // with capital letters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_validNames_intervieweeAdded() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Sarah O\u0027Conner\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"King Henry the 3rd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"-155\"); // Allow anything as long as it is not parsed by Integer#parseUnsignedInt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"Sarah O\u0027Conner\", interviewees.getInterviewee(\"1\").getFullName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(\"King Henry the 3rd\", interviewees.getInterviewee(\"2\").getFullName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addInterviewee_invalidNames_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"15\"); // numeric names are disallowed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"\"); // empty strings are disallowed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertFalse(interviewees.iterator().hasNext()); // Should still be empty"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addIntervieweeWithAlias_validNameInvalidAlias_exceptionThrownButIntervieweeAdded()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws IllegalActionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addIntervieweeWithAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertDoesNotThrow(() -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addAlias_duplicateName_exceptionThrown() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Tom\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            interviewees.addAlias(\"Tom\", \"Bob\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"An Interviewee with this name or alias already exists!\", e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void deleteInterviewee_validIdentifier_intervieweeDeleted() throws IllegalActionException, IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Bob\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addIntervieweeWithAlias(\"Tom\", \"T\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"1\"); // delete Bob by id"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Bob\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"T\"); // delete Tom by alias"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e interviewees.getInterviewee(\"Tom\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void getInterviewee_idAndFullName_sameIntervieweeReturned() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee a \u003d interviewees.getInterviewee(\"1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee b \u003d interviewees.getInterviewee(\"Hello World!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(a, b);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void iterator_increasingIdOrder() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IntervieweeList interviewees \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"A\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"B\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"C\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"D\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.addInterviewee(\"E\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        interviewees.deleteInterviewee(\"D\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int previous \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (Interviewee i : interviewees) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertTrue(i.getId() \u003e previous);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            previous \u003d i.getId();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/IntervieweeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class IntervieweeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void constructor_invalidName_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"12345\", 4); // test numeric name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Interviewee i \u003d new Interviewee(\"\", 4); // test empty string name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(Interviewee.MESSAGE_CONSTRAINTS, e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void giveAlias_moreThanOnce_exceptionThrown() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee i \u003d new Interviewee(\"Bob\", 4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertDoesNotThrow(() -\u003e i.giveAlias(\"Bo\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            i.giveAlias(\"B\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IllegalActionException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"Interviewee already has an alias\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void giveAlias_validIdentifier_hasAlias() throws IllegalValueException, IllegalActionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Interviewee i \u003d new Interviewee(\"Bob\", 4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        i.giveAlias(\"Bo\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(i.getAlias().isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully added metric: extremeSkewed\", new MetricList().add(\"extremeSkewed\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateMetric() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Metric(\"extremeSkewed\"), list.find(\"ex\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyMetricList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"ex\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_attributeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            AttributeList list \u003d new AttributeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"someWeight\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"ex\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_duplicateMetricPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"wei\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"extremeSkewed\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully removed metric: extremeSkewed\", list.delete(\"ex\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyMetricList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new MetricList().delete(\"ex\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_noMetricFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"ex\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_duplicateAttributePrefix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            MetricList list \u003d new MetricList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightOne\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"weightTwo\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"we\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/MetricTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class MetricTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully added question: what is this question?\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    new QuestionList().add(\"what is this question?\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void add_duplicateQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(new Question(\"what is this question?\"), list.find(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputNotANumber() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"wha\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputNegativeIndex() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"-1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_inputOutOfBound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"5\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void find_emptyList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.find(\"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            assertEquals(\"Successfully deleted question: what is this question?\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "                    list.delete(\"1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_emptyList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputNotANumber() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"what\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputNegativeIndex() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"-1\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    public void delete_inputOutOfBound() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            QuestionList list \u003d new QuestionList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.add(\"what is this question?\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "            list.delete(\"5\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/QuestionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mario7lorenzo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mario7lorenzo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getRemarks_retrieveRemarks_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(new ArrayList\u003cRemark\u003e(), actualRemarks.getRemarks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void add_addRemarks_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        ArrayList\u003cRemark\u003e expectedArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        expectedArray.add(RemarkTest.REMARK_MIDDLE_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(expectedArray, actualRemarks.getRemarks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getStartRemarkTime_getStartTime_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.DEFAULT_EARLIER_INSTANT, actualRemarks.getStartRemarkTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getLastRemarkTime_getLastTime_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.DEFAULT_LATER_INSTANT, actualRemarks.getLastRemarkTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getInterviewDurationInMs_getInterviewTime_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(1000, actualRemarks.getInterviewDurationInMs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isTimeInValidRange_validTime_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertTrue(actualRemarks.isTimeInValidRange(1000));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isTimeInValidRange_invalidTime_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertFalse(actualRemarks.isTimeInValidRange(1001));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getRemarkAtTime_getMiddleRemark_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Remark result \u003d actualRemarks.getRemarkAtTime(500);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION, actualRemarks.getRemarkAtTime(500));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void isQuestionAnswered_noAnswer_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertFalse(actualRemarks.isQuestionAnswered(RemarkTest.DEFAULT_QUESTION_3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getInstantOfQuestion_firstQuestion_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        RemarkList actualRemarks \u003d new RemarkList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualRemarks.getRemarkOfQuestion(RemarkTest.DEFAULT_QUESTION_2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualRemarks.getRemarkOfQuestion(RemarkTest.DEFAULT_QUESTION_2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/RemarkTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_EARLIER_INSTANT \u003d Instant.now();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_QUARTER_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(250);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_MIDDLE_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(500);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Instant DEFAULT_LATER_INSTANT \u003d DEFAULT_EARLIER_INSTANT.plusMillis(1000);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_START_WITHOUT_QUESTION \u003d new Remark(DEFAULT_EARLIER_INSTANT, \"Start\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_MIDDLE_WITHOUT_QUESTION \u003d new Remark(DEFAULT_MIDDLE_INSTANT, \"Random remark\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_STOP_WITHOUT_QUESTION \u003d new Remark(DEFAULT_LATER_INSTANT, \"Stop\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_1 \u003d new Question(\"Is this a question?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_2 \u003d new Question(\"Is this another question?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Question DEFAULT_QUESTION_3 \u003d new Question(\"Is this another another question?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_QUARTER_WITH_QUESTION \u003d new Remark(DEFAULT_QUARTER_INSTANT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \"Random remark\", DEFAULT_QUESTION_1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    public static final Remark REMARK_MIDDLE_WITH_QUESTION \u003d new Remark(DEFAULT_MIDDLE_INSTANT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "            \"Random remark\", DEFAULT_QUESTION_2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTime_maxTime_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_MIDDLE_INSTANT, REMARK_MIDDLE_WITHOUT_QUESTION.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getQuestion_noQuestion_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(null, REMARK_MIDDLE_WITHOUT_QUESTION.getQuestion());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTime_withQuestion_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_MIDDLE_INSTANT, REMARK_MIDDLE_WITH_QUESTION.getTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getQuestion_withQuestion_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(DEFAULT_QUESTION_2, REMARK_MIDDLE_WITH_QUESTION.getQuestion());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hirelah/TranscriptTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "package seedu.address.model.hirelah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "import seedu.address.model.hirelah.exceptions.IllegalActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "class TranscriptTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtTime_invalidTimeRange_failure() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e actualTranscript.getTranscriptAtTime(1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtTime_validTimeRange_success() throws IllegalActionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_MIDDLE_WITH_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_MIDDLE_WITH_QUESTION, actualTranscript.getTranscriptAtTime(500));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtQuestion_unansweredQuestion_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertThrows(IllegalActionException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualTranscript.getTranscriptAtQuestion(RemarkTest.DEFAULT_QUESTION_1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    void getTranscriptAtQuestion_answeredQuestion_success() throws IllegalActionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        Transcript actualTranscript \u003d new Transcript();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_START_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_QUARTER_WITH_QUESTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        actualTranscript.getRemarkList().add(RemarkTest.REMARK_STOP_WITHOUT_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "        assertEquals(RemarkTest.REMARK_QUARTER_WITH_QUESTION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "                actualTranscript.getTranscriptAtQuestion(RemarkTest.DEFAULT_QUESTION_1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agnesnatasya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agnesnatasya": 47
    }
  }
]
