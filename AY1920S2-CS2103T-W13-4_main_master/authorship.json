[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "mainClassName \u003d \u0027seedu.planner.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/planner/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/planner/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.JsonPlannerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.PlannerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Planner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        PlannerStorage plannerStorage \u003d new JsonPlannerStorage(userPrefs.getPlannerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        storage \u003d new StorageManager(plannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        model \u003d initPlannerModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s planner book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The data from the sample planner book will be used instead if {@code storage}\u0027s planner book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * or an empty planner book will be used instead if errors occur when reading {@code storage}\u0027s planner book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Optional\u003cReadOnlyPlanner\u003e plannerOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ReadOnlyPlanner initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            plannerOptional \u003d storage.readPlanner();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (!plannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Planner\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            initialData \u003d plannerOptional.orElseGet(SampleDataUtil::getSamplePlanner);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            initialData \u003d new Planner();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            initialData \u003d new Planner();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The data from the sample planner will be used instead if {@code storage}\u0027s planner is not found,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * or an empty planner will be used instead if errors occur when reading {@code storage}\u0027s planner."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Model initPlannerModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Optional\u003cReadOnlyPlanner\u003e plannerOptional;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ReadOnlyPlanner initialData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            plannerOptional \u003d storage.readPlanner();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (!plannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Planner\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            initialData \u003d plannerOptional.orElseGet(SampleDataUtil::getSamplePlanner);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            initialData \u003d SampleDataUtil.getSamplePlanner();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            initialData \u003d SampleDataUtil.getSamplePlanner();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new ModelManager(initialData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        logger.info(\"Starting Planner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 51,
      "thetruevincentchow": 3,
      "DANamic": 16,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1200;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 70,
      "gruntultra": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static final String LOG_FILE \u003d \"planner.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "DANamic": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NO_STUDENT_ACTIVE \u003d \"No student is active\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NO_TIMETABLE_ACTIVE \u003d \"No timetable is active\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "thetruevincentchow": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonString(String string, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return fromJsonString(string, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonString("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String string, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonString(string, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.warning(\"Error reading from jsonString \" + string + \": \" + e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 27,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Returns the user prefs\u0027 planner file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Path getPlannerFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    ReadOnlyPlanner getPlanner();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "DANamic": 2,
      "-": 31,
      "gruntultra": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.PlannerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleDataImporter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private final PlannerParser plannerParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        plannerParser \u003d new PlannerParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Command command \u003d plannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            storage.savePlanner(model.getPlanner());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        ModuleDataImporter moduleDataImporter \u003d new ModuleDataImporter();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return moduleDataImporter.getFilteredModuleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return storage.getPlannerFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ReadOnlyPlanner getPlanner() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return model.getPlanner();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 14,
      "DANamic": 6,
      "-": 56,
      "gruntultra": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Clears the planner book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Planner has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        model.setPlanner(new Planner());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "DANamic": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Planner as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exemptions/ExemptAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.commands.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Adds a module to the selected timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptAddCommand extends ExemptCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Adds the module to list of exempted modules.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" CS2030\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Added module to exemption list: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_ALREADY_EXISTS \u003d \"Module is already in exemption list: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_INVALID \u003d \"Module code does not exist: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ExemptAddCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateModuleDoesNotExists(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_INVALID, moduleCode.value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateDuplicateMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_ALREADY_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module is present in exempted modules list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.hasExemptedModule(moduleCode)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateDuplicateMessage(moduleCode));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module exists in module database"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Module module \u003d model.getPlanner().getModules().getModule(moduleCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateModuleDoesNotExists(moduleCode));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 89
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exemptions/ExemptCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.commands.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Base command for subcommands involving queries about modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class ExemptCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exempt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Subcommands: add, remove, list\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" CS2101\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 26
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exemptions/ExemptListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.commands.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Lists modules enrolled in the selected timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptListCommand extends ExemptCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": List exempted  modules of the active student.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed exempted modules of active student:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cModuleCode\u003e codes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (ModuleCode moduleCode : codes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(moduleCode.value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, codes.isEmpty() ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getExemptedModulesList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 57
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/exemptions/ExemptRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.commands.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Removes a module from the selected timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptRemoveCommand extends ExemptCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Removes the module from list of exempted modules.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \"CS2030\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Removed the module from exemptions list: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_NOT_EXISTS \u003d \"Module does not exist in exemptions list: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ExemptRemoveCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateFailureMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_NOT_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student exists"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module is present in exempted modules list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.hasExemptedModule(moduleCode)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateFailureMessage(moduleCode));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 70
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/major/MajorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.major;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Base command for subcommands involving queries about student majors."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public abstract class MajorCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"major\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \"Subcommands: status, set\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" set CS\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "thetruevincentchow": 14,
      "DANamic": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/major/MajorSetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.major;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MajorSetCommand extends MajorCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \" command not implemented yet\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD) + \": Sets the current student\u0027s Major\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully updated Student\u0027s Major to: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public MajorSetCommand(String major) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d new Major(major);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setMajor(Major major) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent.setMajor(major);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, major));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 9,
      "thetruevincentchow": 12,
      "DANamic": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/major/MajorStatusCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.major;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MajorStatusCommand extends MajorCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"status\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \": Lists the current progress of graduating with a given major\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed the graduation requirement status:\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size(); ++i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Student student \u003d students.get(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(i + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\": \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(student);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, sb.length() \u003d\u003d 0 ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        List\u003cGraduationRequirement\u003e graduationRequirementList \u003d activeStudent.getMajor()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .getGraduationRequirements();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (GraduationRequirement graduationRequirement : graduationRequirementList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(graduationRequirement.getString(model.getActiveStudent().getAllFulfilledModules()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sb.length() \u003d\u003d 0 ? \"[None]\" : sb.toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 10,
      "DANamic": 45
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/module/ModuleAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Adds a module to the selected timetable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Adds the module to list of enrolled modules.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" CS2030\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Added module to timetable: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_ALREADY_EXISTS \u003d \"Module is already in timetable: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_INVALID \u003d \"Module code does not exist: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleAddCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String generateModuleDoesNotExists(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_INVALID, moduleCode.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateDuplicateMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_ALREADY_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module is duplicate in active timetable"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: have an option to check globally (across all timetables) to prevent duplicate enrollments"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateDuplicateMessage(moduleCode));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module exists in module database"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Module module \u003d model.getPlanner().getModules().getModule(moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new CommandException(generateModuleDoesNotExists(moduleCode));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Enrollment enrollment \u003d new Enrollment(moduleCode, Optional.empty(), module.getModuleCredit());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addEnrollment(enrollment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 21,
      "thetruevincentchow": 66,
      "DANamic": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/module/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Base command for subcommands involving queries about modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Subcommands: add, remove, list, grade\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" CS2030\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/module/ModuleGradeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.LetterGrade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Sets the grade of a module in the selected timetable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleGradeCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": If GRADE is specified, sets the grade of the module specified.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Otherwise, displays grade of module specified.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"MODULE_CODE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_GRADE + \"GRADE]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" CS2030 grade/A\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SET_GRADE_SUCCESS \u003d \"Set grade of module %1$s to: %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_VIEW_GRADE_SUCCESS \u003d \"Grade of module %1$s: %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_MODULE_INVALID \u003d \"Module code does not exist: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_ENROLLED \u003d \"Module not in selected timetable: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final LetterGrade letterGrade;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final boolean isWrite;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleGradeCommand(ModuleCode moduleCode, LetterGrade grade) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode, grade);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.letterGrade \u003d grade;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isWrite \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleGradeCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.letterGrade \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isWrite \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateModuleInvalidMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_MODULE_INVALID, moduleCode.value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateModuleNotEnrolledMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_MODULE_NOT_ENROLLED, moduleCode.value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateViewGradeSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_VIEW_GRADE_SUCCESS, moduleCode.value, \"Pending\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateViewGradeSuccessMessage(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_VIEW_GRADE_SUCCESS, moduleCode.value, grade);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSetGradeSuccessMessage(ModuleCode moduleCode, LetterGrade grade) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SET_GRADE_SUCCESS, moduleCode.value, grade);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module exists in module database"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Module module \u003d model.getPlanner().getModules().getModule(moduleCode);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateModuleInvalidMessage(moduleCode));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module is duplicate in active timetable"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: have an option to check globally (across all timetables) to prevent duplicate enrollments"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateModuleNotEnrolledMessage(moduleCode));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (isWrite) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            model.setModuleGrade(moduleCode, new Grade(letterGrade, false));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new CommandResult(generateSetGradeSuccessMessage(moduleCode, letterGrade));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Optional\u003cGrade\u003e optionalGrade \u003d model.getModuleGrade(moduleCode);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (optionalGrade.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return new CommandResult(generateViewGradeSuccessMessage(moduleCode, optionalGrade.get()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return new CommandResult(generateViewGradeSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "thetruevincentchow": 111,
      "DANamic": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/module/ModuleListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Lists modules enrolled in the selected timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleListCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": List enrolled modules in the timetable.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed enrolled modules in timetable:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cModuleCode\u003e codes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (ModuleCode moduleCode : codes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(moduleCode.value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, codes.isEmpty() ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getEnrolledModuleCodes()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 49,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/module/ModuleRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Removes a module from the selected timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleRemoveCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Removes the module from list of enrolled modules.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \"CS2030\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Removed module from timetable: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_NOT_EXISTS \u003d \"Module does not exist in timetable: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleRemoveCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateFailureMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_NOT_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if active student and timetable exists"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getActiveTimeTable() \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TIMETABLE_ACTIVE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // Check if module is present in active timetable"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateFailureMessage(moduleCode));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeEnrollment(moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "thetruevincentchow": 65,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/specialisation/SpecialisationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.specialisation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class SpecialisationCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"specialisation\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \":\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"1. Algorithms \u0026 Theory\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"2. Artificial Intelligence\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"3. Computer Graphics and Games\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"4. Computer Security\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"5. Database Systems\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"6. Multimedia Information Retrieval\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"7. Networking and Distributed Systems\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"8. Parallel Computing\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"9. Programming Languages\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"10. Software Engineering\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"Subcommands: set\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" set 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 22,
      "thetruevincentchow": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/specialisation/SpecialisationSetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.specialisation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.GenericSpecialisation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SpecialisationSetCommand extends SpecialisationCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully updated Student\u0027s Focus Area to: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \": Set\u0027s the current Student\u0027s specialisation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private GenericSpecialisation specialisation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SpecialisationSetCommand(GenericSpecialisation specialisation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public GenericSpecialisation getSpecialisation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return specialisation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setSpecialisation(GenericSpecialisation specialisation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent.setSpecialisation(specialisation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, specialisation.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 25,
      "thetruevincentchow": 11,
      "DANamic": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentActiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Sets the currently selected student in the student list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentActiveCommand extends StudentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"active\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Sets the student from the student list as the active student.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ACTIVE_STUDENT_SUCCESS \u003d \"Set student as active: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentActiveCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ACTIVE_STUDENT_SUCCESS, student);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.activateStudent(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(student));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 51,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Sets a student to the student list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentAddCommand extends StudentCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String EXAMPLE_COMMAND \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        getQualifiedCommand(COMMAND_WORD) + \" \" + PREFIX_NAME + \"Mark \" + PREFIX_MAJOR + \"CS\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Adds the student to list of student profiles.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_MAJOR + \"MAJOR] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" n/Alice major/CS\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"Added student: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student list\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentAddCommand(Student student) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student addedStudent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_STUDENT_SUCCESS, addedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.hasStudent(student)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addStudent(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(student));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "thetruevincentchow": 49,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Base command for subcommands involving queries about students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class StudentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Subcommands: add, remove, active, grade\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" active 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentGradeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.CumulativeGrade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Lists the grade of the currently selected student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentGradeCommand extends StudentCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Display average grade of active student.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Grade of active student %1$s: %2$s\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Enrolled in %3$d MCs total, %4$d MCs are graded, %5$d MCs are declared S/U.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Grade for each module:\\n%6$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student activeStudent, CumulativeGrade cumulativeGrade) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        OptionalDouble gradeValue \u003d cumulativeGrade.getAverage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Map.Entry\u003cStudentSemester, TimeTable\u003e entry : activeStudent.getTimeTableMap().entrySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            StudentSemester sem \u003d entry.getKey();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            TimeTable timeTable \u003d entry.getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(sem.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (Enrollment enrollment : timeTable.getEnrollments()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(enrollment.getModuleCode().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                sb.append(String.format(\" (%d MCs): \", enrollment.getCredit()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                Optional\u003cGrade\u003e optionalGrade \u003d enrollment.getGrade();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (optionalGrade.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    sb.append(optionalGrade.get().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    sb.append(\"Pending\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudent,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            gradeValue.isPresent() ? String.format(\"%.2f/5.00\", gradeValue.getAsDouble()) : \"-/5.00\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            cumulativeGrade.getTotalCredits(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            cumulativeGrade.getTotalGradedCredits(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            cumulativeGrade.getTotalSuCredits(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        CumulativeGrade cumulativeGrade \u003d activeStudent.getCumulativeGrade();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(activeStudent, cumulativeGrade));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 17,
      "thetruevincentchow": 71,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Lists all students in the student list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentListCommand extends StudentCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": List students in the student list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed students in student list:\\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size(); ++i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Student student \u003d students.get(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(i + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(\": \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(student);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, sb.length() \u003d\u003d 0 ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(lastShownList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "thetruevincentchow": 49,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/student/StudentRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Removes a student from the student list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentRemoveCommand extends StudentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Removes the student from list of student profiles.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_REMOVE_STUDENT_SUCCESS \u003d \"Removed student: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentRemoveCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student removedStudent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_REMOVE_STUDENT_SUCCESS, removedStudent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student removedStudent \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeStudent(removedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(removedStudent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 51,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/timetable/TimeTableActiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Sets a timetable as the currently selected timetable in the currently selected student\u0027s timetable list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableActiveCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"active\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Sets the active timetable of the active student.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_SEM + \"SEMESTER] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" year/1 sem/ONE\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ACTIVE_TIMETABLE_SUCCESS \u003d \"Set semester as active: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester does not exist in list of timetables: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final StudentSemester studentSemester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableActiveCommand(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(studentSemester);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.studentSemester \u003d studentSemester;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(StudentSemester semesterYear) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ACTIVE_TIMETABLE_SUCCESS, semesterYear);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.getPlanner().hasSemester(studentSemester)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_SEMESTER, studentSemester));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.activateSemester(studentSemester);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(studentSemester));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "thetruevincentchow": 52,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/timetable/TimeTableAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Adds a timetable to the currently selected student\u0027s timetable list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableAddCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Adds a timetable with the given semester to the active student.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_SEM + \"SEMESTER] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" year/1 sem/ONE\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_TIMETABLE_SUCCESS \u003d \"Added timetable to semester: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_EXISTING_SEMESTER \u003d \"Semester already exists in list of timetables: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final StudentSemester studentSemester;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableAddCommand(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(studentSemester);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.studentSemester \u003d studentSemester;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(StudentSemester semesterYear) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_TIMETABLE_SUCCESS, semesterYear);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: validate semester"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.getPlanner().hasSemester(studentSemester)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EXISTING_SEMESTER, studentSemester));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addSemesterTimeTable(studentSemester);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(studentSemester));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "thetruevincentchow": 57,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/timetable/TimeTableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Base command for subcommands involving queries about timetables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class TimeTableCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Modifies the timetable of the currently active student.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Subcommands: add remove active\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" active year/1 sem/ONE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the (@code COMMAND_NAME) concatenated with the name of the input (@code subCommand)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param subCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Qualified name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String getQualifiedCommand(String subCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return COMMAND_WORD + \" \" + subCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "thetruevincentchow": 24,
      "DANamic": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/timetable/TimeTableListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Lists all timetables in the currently selected student\u0027s timetable list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableListCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": List the timetables of the active student.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed semesters for the active student (%1$s):\\n%2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student activeStudent, List\u003cStudentSemester\u003e semesters) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, activeStudent, semesters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: check there is an active timetable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(activeStudent, activeStudent.getStudentSemesters()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "thetruevincentchow": 36,
      "DANamic": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/timetable/TimeTableRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Removes a timetable from the currently selected student\u0027s timetable list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableRemoveCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027\" + getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d getQualifiedCommand(COMMAND_WORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \": Removes a timetable identified by the given semester from the active student.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"[\" + PREFIX_STUDENT_SEM + \"SEMESTER] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        + \"Example: \" + getQualifiedCommand(COMMAND_WORD) + \" year/1 sem/Semester 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_REMOVE_TIMETABLE_SUCCESS \u003d \"Removed timetable from semester: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester does not exists in list of timetables: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final StudentSemester studentSemester;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableRemoveCommand(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(studentSemester);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.studentSemester \u003d studentSemester;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(StudentSemester semesterYear) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_REMOVE_TIMETABLE_SUCCESS, semesterYear);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_STUDENT_ACTIVE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.getPlanner().hasSemester(studentSemester)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_SEMESTER, studentSemester));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeSemesterTimeTable(studentSemester);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(studentSemester));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "thetruevincentchow": 55,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"grade/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"major/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Prefix PREFIX_MINOR \u003d new Prefix(\"minor/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_YEAR \u003d new Prefix(\"year/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_SEM \u003d new Prefix(\"sem/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "thetruevincentchow": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/MajorCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorSetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorStatusCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MajorCommandParser implements Parser\u003cMajorCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public MajorCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case MajorSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new MajorSetCommand(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case MajorStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new MajorStatusCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12,
      "DANamic": 38
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws ParseException if the given {@code ModuleCode} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String trimmedName \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new ModuleCode(trimmedName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static Semester parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            final Semester semesterEnum \u003d Semester.valueOf(semester);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return semesterEnum;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "thetruevincentchow": 10,
      "DANamic": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/PlannerParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exemptions.ExemptCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.specialisation.SpecialisationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.parser.exemptions.ExemptCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.module.ModuleCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.specialisation.SpecialisationCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.student.StudentCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.timetable.TimeTableCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class PlannerParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case StudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new StudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case ModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new ModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case MajorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new MajorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case TimeTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new TimeTableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case SpecialisationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return new SpecialisationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ExemptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 17,
      "thetruevincentchow": 5,
      "DANamic": 63
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/exemptions/ExemptAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.parser.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exemptions.ExemptAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptAddCommandParser implements Parser\u003cExemptAddCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ExemptAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptAddCommand(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/exemptions/ExemptCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.parser.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exemptions.ExemptCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exemptions.ExemptListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleRemoveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptCommandParser implements Parser\u003cExemptCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ExemptCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ExemptListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "thetruevincentchow": 49
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/exemptions/ExemptRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.planner.logic.parser.exemptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.commands.exemptions.ExemptRemoveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ExemptRemoveCommandParser implements Parser\u003cExemptRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleRemoveCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a ModuleRemoveCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ExemptRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ExemptRemoveCommand(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/module/ModuleAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleAddCommandParser implements Parser\u003cModuleAddCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleAddCommand(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/module/ModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleGradeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleRemoveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleCommandParser implements Parser\u003cModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleGradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleGradeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "thetruevincentchow": 47
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/module/ModuleGradeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleGradeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.LetterGrade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleGradeCommandParser implements Parser\u003cModuleGradeCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_GRADE_INVALID \u003d \"Grade is invalid: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleGradeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRADE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleGradeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_GRADE)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                String letterGradeString \u003d argMultimap.getValue(PREFIX_GRADE).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    LetterGrade letterGrade \u003d LetterGrade.valueOf(letterGradeString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return new ModuleGradeCommand(moduleCode, letterGrade);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_GRADE_INVALID, letterGradeString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return new ModuleGradeCommand(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 24,
      "thetruevincentchow": 39
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/module/ModuleRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.module.ModuleRemoveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleRemoveCommandParser implements Parser\u003cModuleRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleRemoveCommand(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/specialisation/SpecialisationCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.specialisation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.specialisation.SpecialisationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.specialisation.SpecialisationSetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SpecialisationCommandParser implements Parser\u003cSpecialisationCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SpecialisationCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        case SpecialisationSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return new SpecialisationSetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 44,
      "DANamic": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/specialisation/SpecialisationSetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.specialisation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.specialisation.SpecialisationSetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.cs.AlgorithmsAndTheorySpecialisation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SpecialisationSetCommandParser implements Parser\u003cSpecialisationSetCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String INVALID_SPECIALISATION \u003d \"Invalid Specialisation\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SpecialisationSetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            switch (args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case \"algo\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                return new SpecialisationSetCommand(new AlgorithmsAndTheorySpecialisation());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                throw new ParseException(INVALID_SPECIALISATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 32,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/student/StudentActiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentActiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentActiveCommandParser implements Parser\u003cStudentActiveCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentActiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentActiveCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentActiveCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12,
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/student/StudentAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTableMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentAddCommandParser implements Parser\u003cStudentAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // NOTE: the concatenation \" \" is a workaround for `ArgumentTokenizer` treating the first argument as the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: use ArgumentTokenizer for all subcommands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args, PREFIX_NAME, PREFIX_MAJOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MAJOR)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Major major \u003d new Major(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTableMap timeTableMap \u003d SampleDataUtil.getSampleTimeTableMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        List\u003cModuleCode\u003e exemptedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d new Student(name, major, timeTableMap, exemptedModules);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentAddCommand(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30,
      "thetruevincentchow": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/student/StudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentActiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentGradeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentRemoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentCommandParser implements Parser\u003cStudentCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentActiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentActiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentGradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentGradeCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12,
      "thetruevincentchow": 50
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/student/StudentRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentRemoveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentRemoveCommandParser implements Parser\u003cStudentRemoveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentRemoveCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentRemoveCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12,
      "thetruevincentchow": 25
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/timetable/TimeTableActiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableActiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableActiveCommandParser implements Parser\u003cTimeTableActiveCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableActiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        //NOTE: the concatenation \" \" is a workaround for `ArgumentTokenizer` treating the first argument as the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: use ArgumentTokenizer for all subcommands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args, PREFIX_STUDENT_SEM,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            PREFIX_STUDENT_YEAR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_SEM, PREFIX_STUDENT_YEAR)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTableActiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Semester sem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_YEAR).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sem \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_STUDENT_SEM).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTableActiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        SemesterYear semesterYear \u003d new SemesterYear(sem, 0); // TODO: input academic year"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StudentSemester studentSemester \u003d new StudentSemester(semesterYear, index.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new TimeTableActiveCommand(studentSemester);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 36,
      "thetruevincentchow": 35
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/timetable/TimeTableAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableAddCommandParser implements Parser\u003cTimeTableAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // NOTE: the concatenation \" \" is a workaround for `ArgumentTokenizer` treating the first argument as the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: use ArgumentTokenizer for all subcommands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args, PREFIX_STUDENT_SEM,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            PREFIX_STUDENT_YEAR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_SEM, PREFIX_STUDENT_YEAR)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeTableAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Semester sem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_YEAR).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sem \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_STUDENT_SEM).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeTableAddCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        SemesterYear semesterYear \u003d new SemesterYear(sem, 0); // TODO: input academic year"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StudentSemester studentSemester \u003d new StudentSemester(semesterYear, index.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new TimeTableAddCommand(studentSemester);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 34,
      "thetruevincentchow": 36
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/timetable/TimeTableCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentRemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableActiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableCommandParser implements Parser\u003cTimeTableCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new TimeTableRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case TimeTableAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new TimeTableAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case TimeTableActiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new TimeTableActiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case TimeTableListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new TimeTableListCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "thetruevincentchow": 47
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/timetable/TimeTableRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_SEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_STUDENT_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.timetable.TimeTableRemoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableRemoveCommandParser implements Parser\u003cTimeTableRemoveCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // NOTE: the concatenation \" \" is a workaround for `ArgumentTokenizer` treating the first argument as the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: use ArgumentTokenizer for all subcommands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args, PREFIX_STUDENT_SEM,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            PREFIX_STUDENT_YEAR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_SEM, PREFIX_STUDENT_YEAR)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTableRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Semester sem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_YEAR).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sem \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_STUDENT_SEM).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTableRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        SemesterYear semesterYear \u003d new SemesterYear(sem, 0); // TODO: input academic year"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StudentSemester studentSemester \u003d new StudentSemester(semesterYear, index.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new TimeTableRemoveCommand(studentSemester);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 36,
      "thetruevincentchow": 35
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the Planner"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ReadOnlyPlanner getPlanner();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Student getActiveStudent();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void setActiveStudent(Student editedStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void activateStudent(Student student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeStudent(Student student);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getEnrolledModuleCodes();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasEnrollment(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addEnrollment(Enrollment enrollment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeEnrollment(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void activateSemester(StudentSemester studentSemester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    TimeTable getActiveTimeTable();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addSemesterTimeTable(StudentSemester studentSemester);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeSemesterTimeTable(StudentSemester studentSemester);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Optional\u003cGrade\u003e getModuleGrade(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void setModuleGrade(ModuleCode moduleCode, Grade grade);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    void setPlanner(Planner planner);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getExemptedModulesList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addExemptedModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeExemptedModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasExemptedModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19,
      "thetruevincentchow": 42,
      "DANamic": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents the in-memory model of the planner book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Planner planner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Initializes a ModelManager with the given planner and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ModelManager(ReadOnlyPlanner planner, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        requireAllNonNull(planner, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        logger.fine(\"Initializing with planner: \" + planner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.planner \u003d new Planner(planner);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(planner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        logger.fine(\"Initializing with planner: \" + planner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ModelManager(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this(planner, new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this(new Planner(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ReadOnlyPlanner getPlanner() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPlanner(Planner planner) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner.resetData(planner);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getExemptedModulesList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getExemptedModulesList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.hasExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return planner.equals(other.planner)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getStudentList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        planner.addModule(module);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return planner.getModuleList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return planner.getModuleList().contains(module);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.hasStudent(student);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getActiveStudent() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getActiveStudent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setActiveStudent(Student editedStudent) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.setActiveStudent(editedStudent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.activateStudent(student);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addStudent(student);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeStudent(Student student) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeStudent(student);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getEnrolledModuleCodes() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getActiveModuleCodes();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: replace with `TimeTable` and `Enrollment`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.hasEnrollment(moduleCode);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addEnrollment(enrollment);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeEnrollment(moduleCode);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateSemester(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.activateSemester(studentSemester);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTable getActiveTimeTable() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getActiveTimeTable();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addSemesterTimeTable(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addSemesterTimeTable(studentSemester);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeSemesterTimeTable(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeSemesterTimeTable(studentSemester);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Optional\u003cGrade\u003e getModuleGrade(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getModuleGrade(moduleCode);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModuleGrade(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.setModuleGrade(moduleCode, grade);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Path setPlannerFilePath(Path path) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (path \u003d\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 37,
      "thetruevincentchow": 97,
      "DANamic": 25,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Planner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleDataImporter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Wraps all data at the planner level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Planner implements ReadOnlyPlanner {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The list of available modules in NUS."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected static UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The current student that the user can immediately modify."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * `activeStudent` must be an element of `students`, i.e. `students.contains(activeStudent)` is `true`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected int activeStudentIndex \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected StudentSemester activeSemester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The list of students created by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected UniqueStudentList students; //TOOD: use list of students in storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner(boolean loadModules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (loadModules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            loadModules();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Creates an Planner using the UniqueStudentList in the {@code toBeCopied}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        loadModules();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Planner(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        resetData(planner);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void loadModules() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (modules.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            System.out.println(\"Loading modules. This might take awhile...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            List\u003cModule\u003e modulesToImport \u003d ModuleDataImporter.run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            System.out.println(\"Done!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (modulesToImport !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                modulesToImport.forEach(x -\u003e modules.add(x));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public UniqueModuleList getModules() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addStudent(Student student) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void resetActiveStudent(Student target) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (target \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d getStudentIndex(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean resetData(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        setStudents(planner.getStudentList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        resetActiveStudent(planner.getActiveStudent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeSemester \u003d planner.getActiveSemester();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addModule(Module module) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: Replace `ModuleCode` with`Enrollment`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //      Currently we can query with `ModuleCode` and add `Enrollment`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTable timeTable \u003d getActiveTimeTable();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTable.hasModuleCode(moduleCode);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return enrolledModules.contains(moduleCode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Enrollment getEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTable timeTable \u003d getActiveTimeTable();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTable.getEnrollment(moduleCode);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return enrolledModules.contains(moduleCode);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Optional\u003cGrade\u003e getModuleGrade(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Enrollment enrollment \u003d getEnrollment(moduleCode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrollment.getGrade();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModuleGrade(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Enrollment enrollment \u003d getEnrollment(moduleCode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        enrollment.setGrade(Optional.of(grade));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean addEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveTimeTable().addEnrollment(enrollment);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveTimeTable().removeModuleCode(moduleCode);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getActiveStudent().getAllEnrolledModules();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentSemester getActiveSemester() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return activeSemester;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getActiveStudentIndex() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return activeStudentIndex;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getExemptedModulesList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getActiveStudent().getExemptedModules();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getActiveModuleCodes() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cModuleCode\u003e moduleCodes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        moduleCodes.addAll(getActiveTimeTable().getModuleCodes());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getAllEnrolledModuleCodes() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getActiveStudent().getAllEnrolledModules();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateValidStudent() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: handle `activeStudents` being null (e.g. if data file is missing)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: handle all students being removed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudentIndex \u003d -1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!students.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d 0;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getEqualStudent(Student student) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return students.getEqualStudent(student);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private int getStudentIndex(Student student) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return students.indexOf(student);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean isValidStudentIndex(int index) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return 0 \u003c\u003d index \u0026\u0026 index \u003c students.size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean isValidActiveStudentIndex() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return isValidStudentIndex(activeStudentIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getActiveStudent() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!isValidActiveStudentIndex()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return students.get(activeStudentIndex);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the currently active student with the student given by (@code editedStudent)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @params editedStudent Student to copy for replacement."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setActiveStudent(Student student) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student, getActiveStudent());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        students.setStudent(getActiveStudent(), student);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!students.contains(student)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Student does not exist in student list\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudentIndex \u003d students.indexOf(student);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeSemester \u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeStudent(Student toRemove) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: handle all students being removed"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student activeStudent \u003d getActiveStudent();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (toRemove.equals(activeStudent)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            students.remove(toRemove);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d -1;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeSemester \u003d null; // TODO: validate existing value first"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            students.remove(toRemove);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d getStudentIndex(activeStudent);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTable getActiveTimeTable() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(getActiveStudent());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeSemester \u003d\u003d null \u0026\u0026 !getActiveStudent().getTimeTableMap().isEmpty()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activateValidSemester();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getActiveStudent().getTimeTable(activeSemester);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setActiveTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(getActiveStudent());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().setTimeTable(activeSemester, timeTable);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void activateValidSemester() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"No active student selected\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(activeStudentIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: handle `activeStudents` being null (e.g. if data file is missing)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: handle all students being removed"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (getActiveStudent().getTimeTableMap().isEmpty()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"The active student has no timetables\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeSemester \u003d getActiveStudent().getTimeTableMap().keySet().iterator().next();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeTimeTable(StudentSemester keyToRemove) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(keyToRemove);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().removeTimeTable(keyToRemove);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void requireActiveStudentNonNull() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"No active student selected\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasSemester(StudentSemester semester) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireActiveStudentNonNull();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getActiveStudent().getTimeTableMap().containsKey(semester);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateSemester(StudentSemester semester) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireActiveStudentNonNull();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!getActiveStudent().getTimeTableMap().containsKey(semester)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Semester does not exist in timetable list\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeSemester \u003d semester;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addSemesterTimeTable(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireActiveStudentNonNull();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (hasSemester(studentSemester)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Semester already exists in timetable list\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().setTimeTable(studentSemester, new TimeTable());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeSemesterTimeTable(StudentSemester studentSemester) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireActiveStudentNonNull();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!hasSemester(studentSemester)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Semester does not exist in timetable list\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().removeTimeTable(studentSemester);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().addExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        getActiveStudent().removeExemptedModule(moduleCode);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Planner planner \u003d (Planner) o;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return activeStudentIndex \u003d\u003d planner.activeStudentIndex"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            \u0026\u0026 Objects.equals(activeSemester, planner.activeSemester)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            \u0026\u0026 students.equals(planner.students);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(activeStudentIndex, activeSemester, students);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return getExemptedModulesList().contains(moduleCode);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 92,
      "thetruevincentchow": 256,
      "DANamic": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyPlanner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Unmodifiable view of an planner book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public interface ReadOnlyPlanner {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Student getActiveStudent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    UniqueModuleList getModules();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getActiveModuleCodes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasSemester(StudentSemester semester);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Optional\u003cGrade\u003e getModuleGrade(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getEnrolledModulesList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    StudentSemester getActiveSemester();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    int getActiveStudentIndex();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getExemptedModulesList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 29,
      "thetruevincentchow": 14,
      "gruntultra": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Path getPlannerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Path plannerFilePath \u003d Paths.get(\"data\", \"planner.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        setPlannerFilePath(newUserPrefs.getPlannerFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setPlannerFilePath(Path plannerFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        requireNonNull(plannerFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.plannerFilePath \u003d plannerFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            \u0026\u0026 plannerFilePath.equals(o.plannerFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return Objects.hash(guiSettings, plannerFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + plannerFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "DANamic": 7,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/grades/CumulativeGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class CumulativeGrade {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected int numSu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected int totalCredits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected double totalGradePoints;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected int totalGradedCredits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected int totalSuCredits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CumulativeGrade(int numSu, int totalCredits, double totalGradePoints, int totalGradedCredits,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                           int totalSuCredits) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.numSu \u003d numSu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.totalCredits \u003d totalCredits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.totalGradePoints \u003d totalGradePoints;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.totalGradedCredits \u003d totalGradedCredits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.totalSuCredits \u003d totalSuCredits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CumulativeGrade() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this(0, 0, 0, 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Accumulates the letter grade to the counter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param gradePoint Grade points, from 0.0 to 5.0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param credits    Number of credits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void accumulateGraded(double gradePoint, int credits) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalCredits +\u003d credits;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalGradePoints +\u003d gradePoint * credits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalGradedCredits +\u003d credits;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Accumulates module credits and the S/U to the counter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param credits Number of credits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void accumulateSu(int credits) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalCredits +\u003d credits;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        numSu++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalSuCredits +\u003d credits;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Accumulates pending module credits. This does not affect the calculated CAP."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The number of S/U modules declared is not affected."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param credits Number of credits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void accumulatePending(int credits) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        totalCredits +\u003d credits;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void accumulate(Grade grade, int credits) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (grade.isSu || grade.letterGrade.isSu) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            accumulateSu(credits);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            accumulateGraded(grade.getGradePoint().getAsDouble(), credits);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public OptionalDouble getAverage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (totalGradedCredits \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return OptionalDouble.of(totalGradePoints / (double) totalGradedCredits);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            return OptionalDouble.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getTotalCredits() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return totalCredits;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getTotalGradedCredits() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return totalGradedCredits;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Object getTotalSuCredits() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return totalSuCredits;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 65,
      "gruntultra": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/grades/Grade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final LetterGrade letterGrade;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final boolean isSu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Grade(LetterGrade letterGrade, boolean isSu) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.letterGrade \u003d letterGrade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.isSu \u003d isSu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The grade point of the letter grade. This ranges from 0.0 to 5.0."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This does not account the S/U declaration (@code isSu)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Grade point of letter grade"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public OptionalDouble getGradePoint() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return letterGrade.points;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (isSu \u0026\u0026 !letterGrade.isSu) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return String.format(\"%s (S/U exercised)\", this.letterGrade);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return String.format(\"%s\", this.letterGrade);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Grade grade \u003d (Grade) o;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return isSu \u003d\u003d grade.isSu \u0026\u0026 letterGrade \u003d\u003d grade.letterGrade;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(letterGrade, isSu);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "thetruevincentchow": 36,
      "gruntultra": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/grades/LetterGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public enum LetterGrade {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    A_PLUS(5.0),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    A(5.0),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    A_MINUS(4.5),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    B_PLUS(4.0),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    B(3.5),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    B_MINUS(3.0),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    C_PLUS(2.5),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    C(2.0),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    D_PLUS(1.5),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    D(1.0),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    F(0.0),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    CS,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    CU,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    W,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    EXE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final OptionalDouble points;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final boolean isSu;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    LetterGrade(double points) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.points \u003d OptionalDouble.of(points);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isSu \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    LetterGrade() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.points \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isSu \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "thetruevincentchow": 30,
      "gruntultra": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/AggregationType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public enum AggregationType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    ALL(\"All\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    ANY(\"Any\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    AT_LEAST_MC(\"\u003e\u003d\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private String aggregationType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    AggregationType(String aggregationType) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.aggregationType \u003d aggregationType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getAggregationType(int minMCs) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (aggregationType.equals(\"\u003e\u003d\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return aggregationType + \" \" + minMCs + \" MCs\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return aggregationType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "DANamic": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/CompoundGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.model.graduation.AggregationType.ALL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class CompoundGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected AggregationType aggregationType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected int minMCs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected List\u003cGraduationRequirement\u003e graduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CompoundGraduationRequirement(String name, int minMCs, List\u003cGraduationRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.graduationRequirementList \u003d requirements;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        aggregationType \u003d ALL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CompoundGraduationRequirement(String name, int minMCs, List\u003cGraduationRequirement\u003e requirements,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                         AggregationType aggregationType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.graduationRequirementList \u003d requirements;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.aggregationType \u003d aggregationType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cGraduationRequirement\u003e getGraduationRequirementList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return graduationRequirementList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (graduationRequirementList \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        switch (aggregationType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (GraduationRequirement requirement : graduationRequirementList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (requirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (GraduationRequirement requirement : graduationRequirementList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (!requirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        case AT_LEAST_MC:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            int currentMc \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (GraduationRequirement requirement : graduationRequirementList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (requirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    Module module \u003d ModuleUtil.getModuleWithCode(requirement.getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    if (module !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        currentMc +\u003d module.getModuleCredit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return currentMc \u003e\u003d minMCs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getString(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String buffer;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        sb.append(\"[\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(getStatusIcon(isFulfilled(moduleCodes)))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(\"] [\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(aggregationType.getAggregationType(minMCs))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(\"] \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(name)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (graduationRequirementList !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Iterator\u003cGraduationRequirement\u003e iterator \u003d graduationRequirementList.iterator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                buffer \u003d iterator.next().getString(moduleCodes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                for (String line : buffer.split(\"\\n\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    sb.append(\"    \").append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String buffer;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        sb.append(\"[X] \" + name + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (graduationRequirementList !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Iterator\u003cGraduationRequirement\u003e iterator \u003d graduationRequirementList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                buffer \u003d iterator.next().toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                for (String line : buffer.split(\"\\n\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    sb.append(\"    \" + line + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 32,
      "DANamic": 80
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/FocusAreaGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.GenericSpecialisation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.cs.GenericCsSpecialisation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class FocusAreaGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private GenericSpecialisation specialisation \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public FocusAreaGraduationRequirement(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            specialisation \u003d model.getActiveStudent().getSpecialisation();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setSpecialisation(GenericSpecialisation specialisation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (specialisation \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return specialisation.isFulfilled(moduleCodes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public GenericSpecialisation getSpecialisation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return specialisation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getString(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(\"[\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(getStatusIcon(specialisation.isFulfilled(moduleCodes)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(\"] \" + \"Focus Area: \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(specialisation.getName())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(\"\\n    [\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(getStatusIcon(((GenericCsSpecialisation) specialisation).arePrimariesFulfilled(moduleCodes)))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(\"] Primaries\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (ModuleCode primaries : ((GenericCsSpecialisation) getSpecialisation()).getPrimaries()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(\"\\n        \").append(new SingleGraduationRequirement(primaries).getString(moduleCodes));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"\\n    [\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(getStatusIcon(((GenericCsSpecialisation) specialisation).areElectivesFulfilled(moduleCodes)))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                .append(\"] Electives\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (ModuleCode electives : ((GenericCsSpecialisation) getSpecialisation()).getElectives()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(\"\\n        \").append(new SingleGraduationRequirement(electives).getString(moduleCodes));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return \"[X] Focus Area: Unknown (Please set your specialisation first!)\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[?] \" + \"Focus Area: \" + specialisation.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "DANamic": 56
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/GraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class GraduationRequirement {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected ModuleCode moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public abstract boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected String getStatusIcon(boolean done) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return done ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return moduleCode.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getString(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[\" + getStatusIcon(isFulfilled(moduleCodes)) + \"] \" + moduleCode.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 18,
      "DANamic": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/SingleGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SingleGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SingleGraduationRequirement(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return moduleCodes.contains(moduleCode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 13,
      "DANamic": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/UnrestrictedElectiveGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class UnrestrictedElectiveGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public UnrestrictedElectiveGraduationRequirement() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[?] Unrestricted Elective\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getString(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[\" + getStatusIcon(isFulfilled(moduleCodes)) + \"] Unrestricted Elective\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 23
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/graduation/WildcardGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class WildcardGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected int minMCs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected String regex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public WildcardGraduationRequirement(String name, int minMCs, String regex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.regex \u003d regex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.label \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public WildcardGraduationRequirement(String name, int minMCs, String regex, String label) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.regex \u003d regex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (ModuleCode moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (Pattern.matches(regex, moduleCode.value)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[X] \" + name + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getString(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (!label.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return \"[\" + getStatusIcon(isFulfilled(moduleCodes)) + \"] [\" + label + \"] \" + name + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"[\" + getStatusIcon(isFulfilled(moduleCodes)) + \"] \" + name + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "DANamic": 47
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Credit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Credit {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public static final String MESSAGE_CONSTRAINS \u003d \"Credits cannot be null\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Credit(String credit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this(Integer.parseInt(credit));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Credit(int credit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(credit);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        value \u003d credit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "gruntultra": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public static final String MESSAGE_CONSTRAINS \u003d \"Description cannot be null\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "gruntultra": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonAdaptedLesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String classNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Object weeks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String lessonType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final int size;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given Lesson details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedLesson("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"classNo\") String classNo,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"weeks\") String weeks,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"venue\") String venue,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"lessonType\") String lessonType,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"size\") int size"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d lesson.getClassNo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d lesson.getStartTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d lesson.getEndTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d lesson.getWeeks();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d lesson.getVenue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d lesson.getDay();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lesson.getLessonType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d lesson.getSize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted Module object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Lesson toModelType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Lesson("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            classNo,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            startTime,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            endTime,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            weeks,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            venue,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            day,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            lessonType,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            size"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 79
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String acadYear;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String preclusion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String faculty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // private final String workload;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String prerequisite;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String moduleCredit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final List\u003cJsonAdaptedSemesterData\u003e semesterData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String prereqTree;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String fulfillRequirements;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedModule("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"acadYear\") String acadYear,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"faculty\") String faculty,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // @JsonProperty(\"workload\") String workload,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"semesterData\") List\u003cJsonAdaptedSemesterData\u003e semesterData,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prereqTree\") String prereqTree,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"fulfillRequirements\") String fulfillRequirements"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d workload;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedModule(Module module) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d module.getAcadYear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d module.getPreclusion();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d module.getDescription();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d module.getTitle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d module.getDepartment();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d module.getFaculty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d module.workload;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d module.getPrerequisite();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d module.getModuleTitle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d module.getAcadYear().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d module.getSemesterData().stream().map(JsonAdaptedSemesterData::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d module.getPrereqTree();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d module.getFulfillRequirements();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted Module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Module("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            acadYear,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            preclusion,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            description,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            title,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            department,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            faculty,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null, // workload,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            prerequisite,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            moduleCredit,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            moduleCode,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            semesterData.stream().map(x -\u003e x.toModelType()).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            prereqTree,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fulfillRequirements"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 109,
      "gruntultra": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonAdaptedSemesterData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Jackson-friendly version of {@link SemesterData}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonAdaptedSemesterData {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SemesterData\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String examDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final int examDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemesterData} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedSemesterData("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"semester\") int semester,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"examDate\") String examDate,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"examDuration\") int examDuration,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"timetable\") List\u003cJsonAdaptedLesson\u003e timetable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedSemesterData(SemesterData semesterData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semester \u003d semesterData.getSemester();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDate \u003d semesterData.getExamDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDuration \u003d semesterData.getExamDuration();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timetable \u003d semesterData.getTimetable().stream().map(JsonAdaptedLesson::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted Module object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SemesterData toModelType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new SemesterData("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            semester,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            examDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            examDuration,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            timetable.stream().map(x -\u003e x.toModelType()).collect(Collectors.toList())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 62
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonSerializableLesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonSerializableLesson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String classNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private List\u003cString\u003e weeks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanner}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableLesson(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO: Don\u0027t think we will need to use this. KIV"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonSerializableLesson} with the given lessons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableLesson("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"classNo\") String classNo,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        @JsonProperty(\"weeks\") List\u003cString\u003e weeks,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"venue\") String venue,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"lessonType\") String lessonType,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"size\") int size"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Converts this Lesson into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Lesson toModelType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Lesson("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            classNo,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            startTime,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            endTime,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            weeks,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            venue,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            day,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            lessonType,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            size"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static String getMessageDuplicateModule() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return classNo;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setClassNo(String classNo) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Object getWeeks() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public void setWeeks(List\u003cString\u003e weeks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setVenue(String venue) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDay(String day) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setLessonType(String lessonType) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setSize(int size) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 139,
      "DANamic": 3,
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonSerializableModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonSerializableModule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String acadYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String moduleCredit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cJsonSerializableSemesterData\u003e semesterData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String prereqTree;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String fulfillRequirements;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanner}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableModule(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO: Don\u0027t think we will need to use this. KIV"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonSerializableModule} with the given Module."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableModule("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"acadYear\") String acadYear,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"faculty\") String faculty,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // @JsonProperty(\"workload\") String workload,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"semesterData\") List\u003cJsonSerializableSemesterData\u003e semesterData,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prereqTree\") String prereqTree,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"fulfillRequirements\") String fulfillRequirements"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d workload;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this module into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Module("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.acadYear,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.preclusion,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.title,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.department,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.faculty,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null, // this.workload,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.prerequisite,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.moduleCredit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.moduleCode.replaceAll(\"[^a-zA-Z0-9]\", \"\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.semesterData.stream().map(x -\u003e x.toModelType()).collect(Collectors.toList()), // this.semesterData,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.prereqTree,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.fulfillRequirements"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static String getMessageDuplicateModule() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getAcadYear() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return acadYear;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setAcadYear(String acadYear) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPreclusion(String preclusion) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDepartment(String department) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setFaculty(String faculty) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPrerequisite(String prerequisite) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getModuleCredit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setModuleCredit(String moduleCredit) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cJsonSerializableSemesterData\u003e getSemesterData() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setSemesterData(List\u003cJsonSerializableSemesterData\u003e semesterData) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPrereqTree() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return prereqTree;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPrereqTree(String prereqTree) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getFulfillRequirements() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return fulfillRequirements;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setFulfillRequirements(String fulfillRequirements) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 196,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/JsonSerializableSemesterData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonSerializableSemesterData {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int examDuration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cJsonSerializableLesson\u003e timetable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonSerializableModule} with the given persons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableSemesterData("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"semester\") int semester,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"examDate\") String examDate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"examDuration\") int examDuration,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"timetable\") List\u003cJsonSerializableLesson\u003e timetable"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanner}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableSemesterData(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO: Don\u0027t think we will need to use this. KIV"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this planner book into the model\u0027s {@code Planner} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SemesterData toModelType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new SemesterData("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            semester,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            examDate,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            examDuration,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 60,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Laboratory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Laboratory extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Lecture extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Lecture() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 4,
      "gruntultra": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Lesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String classNo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Object weeks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ModuleTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Lesson() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Lesson(String classNo, String startTime, String endTime, Object weeks, String venue, String day,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                  String lessonType, int size) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return classNo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setClassNo(String classNo) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Object getWeeks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setWeeks(Object weeks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setVenue(String venue) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDay(String day) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setLessonType(String lessonType) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setSize(int size) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setTime(ModuleTime time) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 100,
      "gruntultra": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/LessonDataImporter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.Main;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class LessonDataImporter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public static List\u003cLesson\u003e run(String modCode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Lesson lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        String fileName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            fileName \u003d \"json/{0}.json\".replace(\"{0}\", modCode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            String text \u003d new Scanner(Main.class.getClassLoader().getResourceAsStream(fileName),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \"UTF-8\").useDelimiter(\"\\\\A\").next();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            int startIndex \u003d text.indexOf(\"timetable\") + 12;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            int endIndex \u003d text.indexOf(\"examDate\") - 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            String finalText \u003d text.substring(startIndex, endIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            char st \u003d \u0027[\u0027;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            char en \u003d \u0027]\u0027;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            finalText \u003d st + finalText + en;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            System.out.println(finalText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            Optional\u003cJsonSerializableLesson[]\u003e optionalLesson \u003d JsonUtil.readJsonString(finalText,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    JsonSerializableLesson[].class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            if (optionalLesson.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                JsonSerializableLesson[] lessonArray \u003d optionalLesson.get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                for (JsonSerializableLesson l : lessonArray) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    lesson \u003d l.toModelType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    if (!lessons.contains(lesson)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        lessons.add(lesson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            System.err.println(\"Error loading file: \" + fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "gruntultra": 46
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String acadYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String workload;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String moduleCredit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cSemesterData\u003e semesterData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String prereqTree;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String fulfillRequirements;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Module(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String acadYear,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String preclusion,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String department,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String faculty,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String workload,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String prerequisite,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String moduleCredit,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String moduleCode,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            List\u003cSemesterData\u003e semesterData,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String prereqTree,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String fulfillRequirements"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return this.equals(module);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getModuleCredit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: make `moduleCredit` an `int`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Integer.parseInt(moduleCredit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String getModuleTitle() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cSemesterData\u003e getSemesterName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Semester convertSem(String semesterName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        String convertedValue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        switch (semesterName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        case \"Semester 1\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            convertedValue \u003d \"ONE\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        case \"Semester 2\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            convertedValue \u003d \"TWO\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        case \"Special Semester 1\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            convertedValue \u003d \"SPECIAL_ONE\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        case \"Special Semester 2\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            convertedValue \u003d \"SPECIAL_TWO\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            convertedValue \u003d \"NULL\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return Semester.valueOf(convertedValue);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getAcadYear() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return acadYear;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setAcadYear(String acadYear) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPreclusion(String preclusion) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDepartment(String department) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setFaculty(String faculty) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getWorkload() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return workload;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setWorkload(String workload) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPrerequisite(String prerequisite) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setModuleCredit(String moduleCredit) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cSemesterData\u003e getSemesterData() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setSemesterData(List\u003cSemesterData\u003e semesterData) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getPrereqTree() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return prereqTree;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPrereqTree(String prereqTree) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getFulfillRequirements() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return fulfillRequirements;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setFulfillRequirements(String fulfillRequirements) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 152,
      "thetruevincentchow": 9,
      "DANamic": 8,
      "gruntultra": 34
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        \"Module codes should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * All characters must be alphanumeric, and there must be at least one character."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleCode(String code) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        checkArgument(isValidModuleCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        value \u003d code.toUpperCase(); // Allow case insensitivity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else if (!(other instanceof ModuleCode)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return value.equals(((ModuleCode) other).value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "thetruevincentchow": 26,
      "gruntultra": 16
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleDataImporter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.Main;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ModuleDataImporter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final String DOWNLOAD_URL \u003d \"https://api.nusmods.com/v2/{0}/moduleInfo.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final String[] acadYears \u003d new String[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"2019-2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"2018-2019\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static List\u003cModule\u003e run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String fileName \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (String acadYear : acadYears) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                fileName \u003d \"json/moduleInfo_{0}.json\".replace(\"{0}\", acadYear);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                String text \u003d new Scanner(Main.class.getClassLoader().getResourceAsStream(fileName),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    \"UTF-8\").useDelimiter(\"\\\\A\").next();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Optional\u003cJsonSerializableModule[]\u003e optionalModules \u003d JsonUtil.readJsonString(text,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    JsonSerializableModule[].class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (optionalModules.isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    JsonSerializableModule[] moduleArray \u003d optionalModules.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    for (JsonSerializableModule m : moduleArray) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            module \u003d m.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            if (!modules.contains(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                modules.add(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        } catch (IllegalValueException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            System.err.println(ex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                System.err.println(\"Error loading file: \" + fileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableArrayList(modules));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 55,
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime(LocalTime startTime, LocalTime endTime, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "gruntultra": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Sectional.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Sectional extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "gruntultra": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/SemesterData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SemesterData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int examDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cLesson\u003e timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SemesterData(int semester, String examDate, int examDuration, List\u003cLesson\u003e timetable) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setSemester(int semester) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getExamDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setExamDate(String examDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getExamDuration() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return examDuration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setExamDuration(int examDuration) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cLesson\u003e getTimetable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setTimetable(List\u003cLesson\u003e timetable) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 51
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Tutorial extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "gruntultra": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/UniqueEnrollmentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A list of ModuleCode that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A module code is considered unique by comparing using {@code ModuleCode#equals(Object)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * As such, adding, updating and removal of module codes uses (@code ModuleCode#equals(Object))."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class UniqueEnrollmentList implements Iterable\u003cEnrollment\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cEnrollment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cEnrollment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean contains(Enrollment toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void add(Enrollment toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModuleCode}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module identity of {@code editedModuleCode} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModuleCode(Enrollment target, Enrollment editedEnrollment) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(target, editedEnrollment);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!target.equals(editedEnrollment) \u0026\u0026 contains(editedEnrollment)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.set(index, editedEnrollment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void remove(Enrollment toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModules(UniqueEnrollmentList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setEnrollments(List\u003cEnrollment\u003e enrollments) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(enrollments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!enrollmentsAreUnique(enrollments)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(enrollments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cEnrollment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Iterator\u003cEnrollment\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || (other instanceof UniqueEnrollmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueEnrollmentList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean enrollmentsAreUnique(List\u003cEnrollment\u003e enrollments) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c enrollments.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c enrollments.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (enrollments.get(i).equals(enrollments.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Stream\u003cEnrollment\u003e stream() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return asUnmodifiableObservableList().stream();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeIf(Predicate\u003c? super Enrollment\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.removeIf(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "thetruevincentchow": 135
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/UniqueModuleCodeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A list of ModuleCode that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A module code is considered unique by comparing using {@code ModuleCode#equals(Object)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * As such, adding, updating and removal of module codes uses (@code ModuleCode#equals(Object))."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class UniqueModuleCodeList implements Iterable\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void add(ModuleCode toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModuleCode}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module identity of {@code editedModuleCode} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModuleCode(ModuleCode target, ModuleCode editedModuleCode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(target, editedModuleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!target.equals(editedModuleCode) \u0026\u0026 contains(editedModuleCode)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.set(index, editedModuleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void remove(ModuleCode toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModules(UniqueModuleCodeList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModules(List\u003cModuleCode\u003e modules) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Iterator\u003cModuleCode\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            || (other instanceof UniqueModuleCodeList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueModuleCodeList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModuleCode\u003e modules) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 125
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A list of Module that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final HashMap\u003cModuleCode, Module\u003e internalList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.containsKey(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.containsKey(toCheck.getModuleCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.put(toAdd.getModuleCode(), toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.get(moduleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.remove(toRemove.getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() throws java.lang.UnsupportedOperationException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableArrayList(internalList.values()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.values().iterator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return internalList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 88,
      "thetruevincentchow": 13,
      "DANamic": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/ComputerScienceProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.AggregationType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.CompoundGraduationRequirement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.FocusAreaGraduationRequirement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.SingleGraduationRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.WildcardGraduationRequirement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ComputerScienceProgramme extends DegreeProgramme {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ComputerScienceProgramme(Model model) { // TODO: Load from JSON or XML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"University Level Requirements\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            20, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new WildcardGraduationRequirement(\"Human Cultures\", 4, \"GEH.*\", \"GEH\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new WildcardGraduationRequirement(\"Thinking and Expression\", 4, \"GET.*\", \"GET\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new WildcardGraduationRequirement(\"Singapore Studies\", 4, \"GES.*\", \"GES\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GER1000\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Programme Requirements\", 108,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                new CompoundGraduationRequirement(\"Computer Science Foundation\", 36,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS1101S\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS1231S\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2030\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2040S\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2100\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2103T\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2105\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2106\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS3230\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    ))),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Computer Science Breadth and Depth\", 44,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        new FocusAreaGraduationRequirement(model),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        new CompoundGraduationRequirement(\"Computer Systems Team Project\", 8,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new SingleGraduationRequirement(new ModuleCode(\"CS3203\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new SingleGraduationRequirement(new ModuleCode(\"CS3216\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new CompoundGraduationRequirement(\"Thematic Systems Project\", 8,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CS3281\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CS3282\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                    )), AggregationType.ALL)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                            )), AggregationType.AT_LEAST_MC),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        new CompoundGraduationRequirement(\"Industrial Experience Requirement\", 12,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new SingleGraduationRequirement(new ModuleCode(\"CP3880\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new CompoundGraduationRequirement(\"Two 3-Month Internships\", 12,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CP3200\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CP3202\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CP3107\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                        new SingleGraduationRequirement(new ModuleCode(\"CP3110\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                    ))),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new SingleGraduationRequirement(new ModuleCode(\"IS4010\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                                new SingleGraduationRequirement(new ModuleCode(\"TR3202\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                            )), AggregationType.ANY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    ))),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                new CompoundGraduationRequirement(\"IT Professionalism\", 12,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"IS1103\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"CS2101\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"ES2660\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    ))),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Mathematics and Sciences\", 16,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"MA1521\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"MA1101R\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new SingleGraduationRequirement(new ModuleCode(\"ST2334\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        new CompoundGraduationRequirement(\"One Science Module\", 4, null)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    )))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Unrestricted Electives\", 32,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 52,
      "DANamic": 32
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/DegreeProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class DegreeProgramme extends Programme {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private DegreeType degreeType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public DegreeType getDegreeType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return degreeType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDegreeType(DegreeType degreeType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degreeType \u003d degreeType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (GraduationRequirement requirement : this.graduationRequirementList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (!requirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 25,
      "DANamic": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/DegreeType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public enum DegreeType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    MAJOR,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    MINOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/InformationSystemsProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.CompoundGraduationRequirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.SingleGraduationRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class InformationSystemsProgramme extends DegreeProgramme {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public InformationSystemsProgramme() { // TODO: Load from JSON or XML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"University Level Requirements\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            20, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Human Cultures\", 4, null),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Thinking and Expression\", 4, null),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Singapore Studies\", 4, null),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GER1000\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Programme Requirements\", 72,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Core Modules\", 72, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1010J\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1231\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS1103\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2030\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2040\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2102\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2105\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2101\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2102\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2103\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS3103\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS3106\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4100\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4103\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"MA1301\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Mathematics\", 4, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new SingleGraduationRequirement(new ModuleCode(\"MA1312\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new SingleGraduationRequirement(new ModuleCode(\"MA1521\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"ST2334\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Programme Electives\", 24, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Internship or Dissertation\", 12,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4010\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CP4101\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            )))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Unrestricted Electives\", 32,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 58
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/Programme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.CompoundGraduationRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class Programme {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected List\u003cGraduationRequirement\u003e graduationRequirementList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cGraduationRequirement\u003e getGraduationRequirementList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return graduationRequirementList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cGraduationRequirement\u003e getTerminalGraduationRequirementList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        List\u003cGraduationRequirement\u003e terminalGraduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        PriorityQueue\u003cGraduationRequirement\u003e buffer \u003d new PriorityQueue\u003c\u003e(graduationRequirementList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        while (!buffer.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            GraduationRequirement graduationRequirement \u003d buffer.poll();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (graduationRequirement instanceof CompoundGraduationRequirement) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                buffer.add(graduationRequirement);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return terminalGraduationRequirementList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public abstract boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19,
      "DANamic": 18
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/specialisations/GenericSpecialisation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes.specialisations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public abstract class GenericSpecialisation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cGraduationRequirement\u003e graduationRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cGraduationRequirement\u003e getGraduationRequirements() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return graduationRequirements;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public abstract boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16,
      "DANamic": 16
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/specialisations/cs/AlgorithmsAndTheorySpecialisation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes.specialisations.cs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class AlgorithmsAndTheorySpecialisation extends GenericCsSpecialisation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public AlgorithmsAndTheorySpecialisation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        setName(\"Algorithms And Theory\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries.add(new ModuleCode(\"CS3230\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries.add(new ModuleCode(\"CS3236\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries.add(new ModuleCode(\"CS4231\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries.add(new ModuleCode(\"CS4232\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        primaries.add(new ModuleCode(\"CS4234\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS3233\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS4257\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS4261\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS4268\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS4269\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS4330\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5230\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5234\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5236\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5237\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5238\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        electives.add(new ModuleCode(\"CS5330\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"Algorithms And Theory\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "DANamic": 35
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/specialisations/cs/GenericCsSpecialisation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes.specialisations.cs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.SingleGraduationRequirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.GenericSpecialisation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public abstract class GenericCsSpecialisation extends GenericSpecialisation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected List\u003cModuleCode\u003e primaries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    protected List\u003cModuleCode\u003e electives;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cModuleCode\u003e getPrimaries() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return primaries;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setPrimaries(List\u003cModuleCode\u003e primaries) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.primaries \u003d primaries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cModuleCode\u003e getElectives() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return electives;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setElectives(List\u003cModuleCode\u003e electives) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.electives \u003d electives;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean arePrimariesFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int minModules \u003d 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int minimum4kModules \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int modules \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int current4kModules \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ArrayList\u003cSingleGraduationRequirement\u003e primaryRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (ModuleCode primaries : getPrimaries()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            primaryRequirements.add(new SingleGraduationRequirement(primaries));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (SingleGraduationRequirement primaryRequirement : primaryRequirements) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (primaryRequirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                modules++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                ArrayList\u003cCharacter\u003e valid4kCharacters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                valid4kCharacters.add(\u00274\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                valid4kCharacters.add(\u00275\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                valid4kCharacters.add(\u00276\u0027);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                valid4kCharacters.add(\u00277\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (valid4kCharacters.contains(primaryRequirement.getModuleCode().toString().charAt(2))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    current4kModules++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return modules \u003e\u003d minModules \u0026\u0026 current4kModules \u003e\u003d minimum4kModules;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean areElectivesFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int minModules \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        int modules \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ArrayList\u003cSingleGraduationRequirement\u003e electiveRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (ModuleCode electives : getElectives()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            electiveRequirements.add(new SingleGraduationRequirement(electives));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (SingleGraduationRequirement electiveRequirement : electiveRequirements) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (electiveRequirement.isFulfilled(moduleCodes)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                modules++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return modules \u003e\u003d minModules;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return arePrimariesFulfilled(moduleCodes) \u0026\u0026 areElectivesFulfilled(moduleCodes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "DANamic": 69
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/programmes/specialisations/is/GenericIsSpecialisation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.programmes.specialisations.is;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.GenericSpecialisation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class GenericIsSpecialisation extends GenericSpecialisation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/Degrees.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.DegreeProgramme;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s graduation Year in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDegreeProgramme(DegreeProgramme)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Degrees {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"Degrees should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the planner must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cDegreeProgramme\u003e degrees;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Degrees}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param degree A valid DegreeProgramme."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(degree);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidDegreeProgramme(degree), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.add(degree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param degrees A list of valid DegreeProgrammes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees(List\u003cDegreeProgramme\u003e degrees) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(degrees);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (DegreeProgramme degree : degrees) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            checkArgument(isValidDegreeProgramme(degree), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d degrees;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidDegreeProgramme(DegreeProgramme test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // return Integer.toString(test).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegree(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.add(degree);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cDegreeProgramme\u003e getDegrees() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return degrees;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegrees(List\u003cDegreeProgramme\u003e degree) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.addAll(degree);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (DegreeProgramme degree : degrees) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            sb.append(\"\\n\" + degree.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof Degrees // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 degrees \u003d\u003d (((Degrees) other).degrees)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.degrees.hashCode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 96,
      "DANamic": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/Enrollment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Enrollment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int credit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Enrollment(ModuleCode code, Optional\u003cGrade\u003e grade, int credit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(code, grade, credit);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModuleCode getCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setCode(ModuleCode code) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getCredit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return credit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setCredit(int credit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setGrade(Optional\u003cGrade\u003e grade) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public OptionalDouble getGradePoint() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (grade.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return grade.get().getGradePoint();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return OptionalDouble.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof Enrollment)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Enrollment otherEnrollment \u003d ((Enrollment) other);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return code.equals(otherEnrollment.code)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 grade.equals(otherEnrollment.grade)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 credit \u003d\u003d otherEnrollment.credit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 26,
      "thetruevincentchow": 45
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/GraduationYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s graduation Year in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGraduationYear(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class GraduationYear {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"Student IDs should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the planner must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final int graduationYear;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param year A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public GraduationYear(int year) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidGraduationYear(year), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationYear \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidGraduationYear(int test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Integer.toString(test).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Integer.toString(graduationYear);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof GraduationYear // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 graduationYear \u003d\u003d (((GraduationYear) other).graduationYear)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return graduationYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/Major.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.ComputerScienceProgramme;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.DegreeProgramme;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.InformationSystemsProgramme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s name in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"Majors should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the planner must not be a whitespace,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final String major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private DegreeProgramme degreeProgramme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param major A valid major."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Major(String major) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidMajor(major), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (major.equals(\"CS\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            this.degreeProgramme \u003d new ComputerScienceProgramme(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else if (major.equals(\"IS\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            this.degreeProgramme \u003d new InformationSystemsProgramme();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 (test.equals(\"CS\") || test.equals(\"IS\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public DegreeProgramme getDegreeProgramme() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return degreeProgramme;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setDegreeProgramme(DegreeProgramme degreeProgramme) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.degreeProgramme \u003d degreeProgramme;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cGraduationRequirement\u003e getGraduationRequirements() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return degreeProgramme.getGraduationRequirementList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 major.equals(((Major) other).major)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 69,
      "DANamic": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/MatriculationId.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s ID in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MatriculationId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"Student IDs should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the planner must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param studentId A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public MatriculationId(String studentId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidStudentId(studentId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        id \u003d studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidStudentId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof MatriculationId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 id.equals(((MatriculationId) other).id)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the planner must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/Student.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.CumulativeGrade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.FocusAreaGraduationRequirement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.UniqueModuleCodeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.DegreeProgramme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.programmes.specialisations.GenericSpecialisation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student in the planner book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // Timetables"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final TimeTableMap timeTableMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // Exemptions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final UniqueModuleCodeList exemptedModules \u003d new UniqueModuleCodeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Degrees degrees;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private GenericSpecialisation specialisation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this(null, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: add `degrees` field in `JsonAdaptedStudent` and remove this constructor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student(Name name, Major major) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.degrees \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTableMap \u003d new TimeTableMap();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student(Name name, Major major, TimeTableMap timeTableMap, List\u003cModuleCode\u003e exemptedModules) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(name, major, timeTableMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.degrees \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTableMap \u003d timeTableMap;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules.forEach(this.exemptedModules::add);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setMajor(Major major) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees getDegrees() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return degrees;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableMap getTimeTableMap() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTableMap;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegrees(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.addDegree(degree);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: initialize and compare `degrees`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(name, major, timeTableMap, exemptedModules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        builder.append(PREFIX_NAME).append(getName()).append(\" \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .append(PREFIX_MAJOR).append(getMajor());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isSameStudent(Student student) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.equals(student);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTable getTimeTable(StudentSemester activeSemester) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTableMap.get(activeSemester);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setTimeTable(StudentSemester activeSemester, TimeTable timeTable) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTableMap.put(activeSemester, timeTable);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeTimeTable(StudentSemester keyToRemove) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!timeTableMap.containsKey(keyToRemove)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Semester does not exist in timetable list\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTableMap.remove(keyToRemove);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public List\u003cStudentSemester\u003e getStudentSemesters() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new ArrayList\u003c\u003e(timeTableMap.keySet());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns a list mof (@code ModuleCode) taken across all timetables."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return List of all modules enrolled."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getAllEnrolledModules() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cModuleCode\u003e allModules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (TimeTable timeTable : timeTableMap.values()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            allModules.addAll(timeTable.getModuleCodes());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return allModules;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cEnrollment\u003e getAllEnrollments() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cEnrollment\u003e allEnrollments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (TimeTable timeTable : timeTableMap.values()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            allEnrollments.addAll(timeTable.getEnrollments().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return allEnrollments;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public GenericSpecialisation getSpecialisation() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return specialisation;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setSpecialisation(GenericSpecialisation specialisation) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (GraduationRequirement graduationRequirement : this.major.getDegreeProgramme()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    .getTerminalGraduationRequirementList()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (graduationRequirement instanceof FocusAreaGraduationRequirement) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    FocusAreaGraduationRequirement focusAreaGraduationRequirement \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            (FocusAreaGraduationRequirement) graduationRequirement;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    focusAreaGraduationRequirement.setSpecialisation(specialisation);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CumulativeGrade getCumulativeGrade() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        CumulativeGrade cumulativeGrade \u003d new CumulativeGrade();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Enrollment enrollment : getAllEnrollments()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Optional\u003cGrade\u003e optionalGrade \u003d enrollment.getGrade();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (optionalGrade.isPresent()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                OptionalDouble gradePoint \u003d enrollment.getGradePoint();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                cumulativeGrade.accumulate(optionalGrade.get(), enrollment.getCredit());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                cumulativeGrade.accumulatePending(enrollment.getCredit());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return cumulativeGrade;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getExemptedModules() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return exemptedModules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules.add(moduleCode);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeExemptedModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules.remove(moduleCode);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public List\u003cModuleCode\u003e getAllFulfilledModules() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Set\u003cModuleCode\u003e moduleCodeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        moduleCodeSet.addAll(getAllEnrolledModules());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        moduleCodeSet.addAll(getExemptedModules());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return moduleCodeSet.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 97,
      "thetruevincentchow": 103,
      "DANamic": 26
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/TimeTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.UniqueEnrollmentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private UniqueEnrollmentList enrollments \u003d new UniqueEnrollmentList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public TimeTable() { }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTable(List\u003cEnrollment\u003e enrollments) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments.forEach(this.enrollments::add);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments.add(enrollment);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments.remove(enrollment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrollments.contains(enrollment);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Enrollment getEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Enrollment enrollment : enrollments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (enrollment.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return enrollment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new NullPointerException(String.format(\"Key %s does not exist\", moduleCode));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public UniqueEnrollmentList getEnrollments() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrollments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return enrollments.asUnmodifiableObservableList(); // TODO: replace with ObservableList\u003cEnrollment\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public List\u003cModuleCode\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrollments.stream().map(Enrollment::getModuleCode).collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrollments.stream().anyMatch(enrollment -\u003e enrollment.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments.removeIf(enrollment -\u003e enrollment.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setEnrollments(UniqueEnrollmentList enrollments) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.enrollments \u003d enrollments;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(enrollments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof TimeTable)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return enrollments.equals(((TimeTable) other).enrollments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "thetruevincentchow": 64
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/TimeTableMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTableMap extends HashMap\u003cStudentSemester, TimeTable\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "thetruevincentchow": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/UniqueStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int indexOf(Student target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.indexOf(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getEqualStudent(Student target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student get(int index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 136,
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super(\"Operation would result in duplicate student\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Signals that the operation is unable to find the specified Student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Tag in the planner book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/time/Semester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public enum Semester {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ONE(\"Semester 1\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    TWO(\"Semester 2\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    SPECIAL_ONE(\"Special Semester 1\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    SPECIAL_TWO(\"Special Semester 2\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Semester can be one of the following: \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        + Semester.values().toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Semester(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getAction() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16,
      "thetruevincentchow": 1,
      "gruntultra": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/time/SemesterYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class SemesterYear {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Semester year should be valid.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // TODO: figure out required constraints"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final Semester sem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // TODO: support academic year in Student operations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public SemesterYear(Semester sem, int academicYear) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return sem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getAcademicYear() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // return academicYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: validate StudentSemester and academicYear"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isValidSemesterYear() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return sem !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(sem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // return Objects.hash(sem, academicYear);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof SemesterYear)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return sem.equals(((SemesterYear) other).sem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // \u0026\u0026 academicYear \u003d\u003d ((SemesterYear) other).academicYear;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(\"AY ?/? %s\", sem.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // return String.format(\"AY %d/%d %s\", academicYear, academicYear+1, sem.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "thetruevincentchow": 40,
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/time/StudentSemester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class StudentSemester {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final SemesterYear semYear;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final int degreeYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public StudentSemester(SemesterYear semYear, int degreeYear) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.semYear \u003d semYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.degreeYear \u003d degreeYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public SemesterYear getSemesterYear() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return semYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int getDegreeYear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return degreeYear;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(semYear, degreeYear);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof StudentSemester)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return semYear.equals(((StudentSemester) other).semYear)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 degreeYear \u003d\u003d ((StudentSemester) other).degreeYear;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(\"Year %d, %s\", degreeYear, semYear);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "thetruevincentchow": 32,
      "gruntultra": 8
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/user/User.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Student student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Map\u003cStudentSemester, TimeTable\u003e timeTables;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Set\u003cModuleCode\u003e exemptedModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public User(Student student) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        timeTables \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        exemptedModules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudent(Student student) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Map\u003cStudentSemester, TimeTable\u003e getTimeTables() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return timeTables;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setTimeTables(Map\u003cStudentSemester, TimeTable\u003e timeTables) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.timeTables \u003d timeTables;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Set\u003cModuleCode\u003e getExemptedModules() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return exemptedModules;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setExemptedModules(Set\u003cModuleCode\u003e exemptedModules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.exemptedModules \u003d exemptedModules;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 39,
      "thetruevincentchow": 8
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/ModuleUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Contains utility methods for populating {@code Planner} with sample data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Module getModuleWithCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (Module module : getSamplePlanner().getModuleList()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return SampleDataUtil.getSampleModules();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Planner getSamplePlanner() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return SampleDataUtil.getSamplePlanner();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Student getSampleStudent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return SampleDataUtil.getSampleStudent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static TimeTableMap getSampleTimeTableMap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return SampleDataUtil.getSampleTimeTableMap();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Returns a non-empty (@code TimeTableMap) which (@code Student) can immediately use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return Non-empty (@code TimeTableMap)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static TimeTable getSampleTimeTable() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return SampleDataUtil.getSampleTimeTable();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "thetruevincentchow": 5,
      "DANamic": 35
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Major;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTableMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Contains utility methods for populating {@code Planner} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new Module[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new Module(new ModuleCode(\"CS2040\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new Module(new ModuleCode(\"CS2103T\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static Planner getSamplePlanner() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner samplePlanner \u003d new Planner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d SampleDataUtil.getSampleStudent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        samplePlanner.addStudent(student);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        samplePlanner.activateStudent(student); // TODO: allow serialization of planner with no active student"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return samplePlanner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static Student getSampleStudent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student sampleStudent \u003d new Student(new Name(\"Mark\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            SampleDataUtil.getSampleTimeTableMap(), SampleDataUtil.getSampleExemptedModules());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return sampleStudent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static List\u003cModuleCode\u003e getSampleExemptedModules() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        List\u003cModuleCode\u003e sampleExemptedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return sampleExemptedModules;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static TimeTableMap getSampleTimeTableMap() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTableMap timeTableMap \u003d new TimeTableMap();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTableMap.put(new StudentSemester(new SemesterYear(Semester.ONE, 2019), 1),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            new TimeTable());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTableMap;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns a non-empty (@code TimeTableMap) which (@code Student) can immediately use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Non-empty (@code TimeTableMap)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static TimeTable getSampleTimeTable() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTable.addEnrollment(new Enrollment(new ModuleCode(\"CS2040\"), Optional.empty(), 4));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 17,
      "thetruevincentchow": 37,
      "DANamic": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedEnrollment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "// TODO: add other fields (currently only stores ModuleCode)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedEnrollment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final JsonAdaptedModuleCode code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Represents the student\u0027s grade. Can be null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private int credit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private JsonAdaptedGrade grade;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedEnrollment(@JsonProperty(\"code\") JsonAdaptedModuleCode code,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                 @JsonProperty(\"grade\") JsonAdaptedGrade grade,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                                 @JsonProperty(\"credit\") int credit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedEnrollment(Enrollment source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.code \u003d new JsonAdaptedModuleCode(source.getModuleCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Optional\u003cGrade\u003e optionalGrade \u003d source.getGrade();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (optionalGrade.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            this.grade \u003d new JsonAdaptedGrade(optionalGrade.get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            this.grade \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.credit \u003d source.getCredit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Enrollment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Enrollment(code.toModelType(), grade \u003d\u003d null ? Optional.empty() : Optional.of(grade.toModelType()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            credit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedModuleCode getCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int getCredit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return credit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setCredit(int credit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedGrade getGrade() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setGrade(JsonAdaptedGrade grade) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 36,
      "thetruevincentchow": 31
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.LetterGrade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "// TODO: add other fields (currently only stores ModuleCode)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedGrade {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final String letterGrade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final boolean isSu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedGrade(@JsonProperty(\"letterGrade\") String letterGrade, @JsonProperty(\"isSu\") boolean isSu) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.letterGrade \u003d letterGrade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isSu \u003d isSu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedGrade(Grade source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.letterGrade \u003d source.letterGrade.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isSu \u003d source.isSu;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Grade toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new Grade(LetterGrade.valueOf(letterGrade), isSu);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Jackson-friendly version of {@link ModuleCode}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "class JsonAdaptedModuleCode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleCode} with the given {@code value}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedModuleCode(String value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts a given {@code ModuleCode} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedModuleCode(ModuleCode source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        value \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts this Jackson-friendly adapted module code object into the model\u0027s {@code ModuleCode} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(value)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new ModuleCode(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "thetruevincentchow": 44
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedSemesterYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedSemesterYear {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SemesterYear\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final String sem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final int academicYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedSemesterYear(@JsonProperty(\"sem\") String sem, @JsonProperty(\"academicYear\") int academicYear) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedSemesterYear(SemesterYear source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        sem \u003d source.getSemester().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        academicYear \u003d source.getAcademicYear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public SemesterYear toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (sem \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Semester modelSem \u003d Semester.valueOf(sem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final int modelAcademicYear \u003d academicYear;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new SemesterYear(modelSem, modelAcademicYear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 44
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Major;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTableMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final JsonAdaptedTimeTableMap timeTableMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final List\u003cJsonAdaptedModuleCode\u003e exemptedModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"major\") String major,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                              @JsonProperty(\"timeTableMap\") JsonAdaptedTimeTableMap timeTableMap,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                              @JsonProperty(\"exemptedModules\") List\u003cJsonAdaptedModuleCode\u003e exemptedModules) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTableMap \u003d timeTableMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.exemptedModules \u003d exemptedModules;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        major \u003d source.getMajor().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTableMap \u003d new JsonAdaptedTimeTableMap(source.getTimeTableMap());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules \u003d new ArrayList\u003cJsonAdaptedModuleCode\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules.addAll(source.getExemptedModules().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .map(JsonAdaptedModuleCode::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (timeTableMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTableMap.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final TimeTableMap modelTimeTableMap \u003d timeTableMap.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final List\u003cModuleCode\u003e modelExemptedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (exemptedModules !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            for (JsonAdaptedModuleCode moduleCode : exemptedModules) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                modelExemptedModules.add(moduleCode.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new Student(modelName, modelMajor, modelTimeTableMap, modelExemptedModules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 65,
      "thetruevincentchow": 29,
      "DANamic": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedStudentSemester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.SemesterYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedStudentSemester {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"StudentSemester\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final JsonAdaptedSemesterYear semYear;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final int degreeYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedStudentSemester(@JsonProperty(\"semYear\") JsonAdaptedSemesterYear semYear,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                      @JsonProperty(\"degreeYear\") int degreeYear) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.semYear \u003d semYear;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.degreeYear \u003d degreeYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedStudentSemester(StudentSemester source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        semYear \u003d new JsonAdaptedSemesterYear(source.getSemesterYear());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        degreeYear \u003d source.getDegreeYear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentSemester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (semYear \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                SemesterYear.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: validate input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        /*if (!SemesterYear.isValidSemesterYear(semYear)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalValueException(SemesterYear.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final SemesterYear modelSemYear \u003d semYear.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: validate degreeYear"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final int modelDegreeYear \u003d degreeYear;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentSemester(modelSemYear, modelDegreeYear);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 9,
      "thetruevincentchow": 47
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedTimeTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Enrollment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedTimeTable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final List\u003cJsonAdaptedEnrollment\u003e enrollments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedTimeTable(List\u003cJsonAdaptedEnrollment\u003e enrollments) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.enrollments.addAll(enrollments);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedTimeTable(TimeTable source) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments.addAll(source.getEnrollments().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .map(JsonAdaptedEnrollment::new)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cJsonAdaptedEnrollment\u003e getEnrollments() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return enrollments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final List\u003cEnrollment\u003e modelEnrollments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (JsonAdaptedEnrollment enrollment : enrollments) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            modelEnrollments.add(enrollment.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new TimeTable(modelEnrollments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 14,
      "thetruevincentchow": 26
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedTimeTableMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTableMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedTimeTableMap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final List\u003cJsonAdaptedTimeTablePair\u003e timeTables;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedTimeTableMap(List\u003cJsonAdaptedTimeTablePair\u003e timeTables) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTables \u003d timeTables;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedTimeTableMap(TimeTableMap source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Map.Entry\u003cStudentSemester, TimeTable\u003e entry : source.entrySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            timeTables.add(new JsonAdaptedTimeTablePair(entry));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public List\u003cJsonAdaptedTimeTablePair\u003e getTimeTables() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return timeTables;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TimeTableMap toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TimeTableMap map \u003d new TimeTableMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (JsonAdaptedTimeTablePair timeTable : timeTables) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Pair\u003cJsonAdaptedStudentSemester, JsonAdaptedTimeTable\u003e modelPair \u003d timeTable.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (map.put(modelPair.getKey().toModelType(), modelPair.getValue().toModelType()) !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new IllegalStateException(\"Duplicate key\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "thetruevincentchow": 39
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonAdaptedTimeTablePair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.TimeTable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * This class is used since Pair of JsonAdaptedStudentSemester and JsonAdaptedTimeTable doesn\u0027t seem to be read"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * correctly by Jackson."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonAdaptedTimeTablePair {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"StudentSemester\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final JsonAdaptedStudentSemester sem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final JsonAdaptedTimeTable timeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedTimeTablePair(@JsonProperty(\"sem\") JsonAdaptedStudentSemester sem,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                    @JsonProperty(\"timeTable\") JsonAdaptedTimeTable timeTable) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedTimeTablePair(Map.Entry\u003cStudentSemester, TimeTable\u003e source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.sem \u003d new JsonAdaptedStudentSemester(source.getKey());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.timeTable \u003d new JsonAdaptedTimeTable(source.getValue());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Pair\u003cJsonAdaptedStudentSemester, JsonAdaptedTimeTable\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (sem \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                StudentSemester.class.getSimpleName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (timeTable \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TimeTable.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new Pair\u003c\u003e(sem, timeTable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16,
      "thetruevincentchow": 34
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonPlannerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A class to access Planner data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonPlannerStorage implements PlannerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlannerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonPlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Optional\u003cReadOnlyPlanner\u003e readPlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return readPlanner(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Similar to {@link #readPlanner()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Optional\u003cReadOnlyPlanner\u003e readPlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Optional\u003cJsonSerializablePlanner\u003e jsonPlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                filePath, JsonSerializablePlanner.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!jsonPlanner.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return Optional.of(jsonPlanner.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        savePlanner(planner, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Similar to {@link #savePlanner(ReadOnlyPlanner)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(planner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePlanner(planner), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 77,
      "DANamic": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonSerializablePlanner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * An Immutable Planner that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "@JsonRootName(value \u003d \"planner\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonSerializablePlanner {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final int activeStudentIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Constructs a {@code JsonSerializablePlanner} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonSerializablePlanner(@JsonProperty(\"activeStudentIndex\") int activeStudentIndex,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                                   @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.activeStudentIndex \u003d activeStudentIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanner}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializablePlanner(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudentIndex \u003d source.getActiveStudentIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (source.getActiveStudent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudentIndex \u003d new JsonAdaptedStudent(source.getActiveStudent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this planner book into the model\u0027s {@code Planner} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (planner.hasStudent(student)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            planner.addStudent(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (0 \u003c\u003d activeStudentIndex \u0026\u0026 activeStudentIndex \u003c students.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // TODO: ensure `activeStudent.toModelType()` can be used in `Planner#activateStudent`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            JsonAdaptedStudent jsonActiveStudent \u003d students.get(activeStudentIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //planner.activateStudent(jsonActiveStudent.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Student activeStudent \u003d planner.getEqualStudent(jsonActiveStudent.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            planner.activateStudent(activeStudent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59,
      "thetruevincentchow": 21,
      "DANamic": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonStudentSemesterDeserializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.databind.KeyDeserializer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class JsonStudentSemesterDeserializer extends KeyDeserializer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public StudentSemester deserializeKey(String key, DeserializationContext ctxt) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new JsonAdaptedStudentSemester(JsonUtil.fromJsonString(key, StudentSemester.class)).toModelType();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/PlannerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a storage for {@link Planner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public interface PlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Path getPlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns Planner data as a {@link Planner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Optional\u003cReadOnlyPlanner\u003e readPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see #getPlannerFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Optional\u003cReadOnlyPlanner\u003e readPlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Saves the given {@link Planner} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param planner cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void savePlanner(ReadOnlyPlanner planner) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see #savePlanner(ReadOnlyPlanner)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 46,
      "DANamic": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public interface Storage extends UserPrefsStorage, PlannerStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Path getPlannerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Optional\u003cReadOnlyPlanner\u003e readPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    void savePlanner(ReadOnlyPlanner planner) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "DANamic": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Manages storage of Planner data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private PlannerStorage plannerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public StorageManager(PlannerStorage plannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.plannerStorage \u003d plannerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerStorage.getPlannerFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Optional\u003cReadOnlyPlanner\u003e readPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return readPlanner(plannerStorage.getPlannerFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Optional\u003cReadOnlyPlanner\u003e readPlanner(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerStorage.readPlanner(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        savePlanner(planner, plannerStorage.getPlannerFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        plannerStorage.savePlanner(planner, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30,
      "DANamic": 4,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Saves the given {@link seedu.planner.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/CalendarBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.LessonDataImporter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " * An UI component that displays information of a {@code Timetable}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class CalendarBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final String FXML \u003d \"calendarBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarBox.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private ReadOnlyPlanner planner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private LessonDataImporter lessonDataImporter \u003d new LessonDataImporter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label dayTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am4;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am5;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am6;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am7;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am8;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am9;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am10;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am11;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane am12;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at3;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at4;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at5;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at6;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at7;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at8;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at9;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at10;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at11;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane at12;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw4;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw5;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw6;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw7;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw8;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw9;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw10;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw11;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane aw12;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath2;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath3;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath4;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath5;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath6;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath7;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath8;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath9;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath10;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath11;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane ath12;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af3;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af4;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af5;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af6;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af7;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af8;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af9;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af10;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af11;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private AnchorPane af12;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t89;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t910;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1011;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1112;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1213;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1314;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1415;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1516;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1617;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1718;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1819;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1920;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m2;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m3;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m4;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m5;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m6;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m7;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m8;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m9;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m10;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m11;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label m12;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t2;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t3;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t4;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t5;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t6;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t7;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t8;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t9;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t10;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t11;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label t12;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w3;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w4;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w5;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w6;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w7;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w8;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w9;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w10;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w11;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label w12;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th2;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th3;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th4;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th5;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th6;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th7;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th8;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th9;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th10;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th11;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label th12;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f1;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f2;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f3;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f4;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f5;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f6;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f7;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f8;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f9;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f10;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f11;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label f12;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Constructor for CalendarBox class"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public CalendarBox(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.planner \u003d planner;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        dayTime.setText(\"Day / Time\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m1.setText(\"\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m2.setText(\"\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m3.setText(\"\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m4.setText(\"\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m5.setText(\"\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m6.setText(\"\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m7.setText(\"\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m8.setText(\"\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m9.setText(\"\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m10.setText(\"\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m11.setText(\"\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        m12.setText(\"\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t1.setText(\"\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t2.setText(\"\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t3.setText(\"\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t4.setText(\"\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t5.setText(\"\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t6.setText(\"\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t7.setText(\"\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t8.setText(\"\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t9.setText(\"\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t10.setText(\"\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t11.setText(\"\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        t12.setText(\"\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w1.setText(\"\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w2.setText(\"\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w3.setText(\"\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w4.setText(\"\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w5.setText(\"\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w6.setText(\"\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w7.setText(\"\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w8.setText(\"\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w9.setText(\"\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w10.setText(\"\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w11.setText(\"\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        w12.setText(\"\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th1.setText(\"\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th2.setText(\"\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th3.setText(\"\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th4.setText(\"\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th5.setText(\"\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th6.setText(\"\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th7.setText(\"\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th8.setText(\"\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th9.setText(\"\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th10.setText(\"\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th11.setText(\"\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        th12.setText(\"\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f1.setText(\"\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f2.setText(\"\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f3.setText(\"\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f4.setText(\"\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f5.setText(\"\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f6.setText(\"\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f7.setText(\"\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f8.setText(\"\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f9.setText(\"\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f10.setText(\"\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f11.setText(\"\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        f12.setText(\"\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Todo once timetable can be seen"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public void setCalendar(ReadOnlyPlanner planner) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        ObservableList\u003cModuleCode\u003e mod \u003d planner.getEnrolledModulesList();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        ArrayList\u003cModuleCode\u003e codes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        List\u003cLesson\u003e lessonsMod \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        for (int i \u003d 0; i \u003c mod.size(); i++) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            lessonsMod \u003d lessonDataImporter.run(mod.get(i).toString());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            System.out.println(lessonsMod.get(1).getStartTime());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        if (!(other instanceof CalendarBox)) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "gruntultra": 397
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "         * @see seedu.planner.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-W13-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "DANamic": 2,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private CalendarBox calendarBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private int colorTrack \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private MenuItem changeColor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private StackPane calendarBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Button lanchCalendar;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPlannerFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see seedu.planner.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Changes color between light theme and dark theme"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public void changeColor() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        if (colorTrack \u003d\u003d 1) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            primaryStage.getScene().getStylesheets().add(getClass().getResource(\"/view/LightTheme.css\")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    .toExternalForm());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            colorTrack \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            primaryStage.getScene().getStylesheets().remove(getClass().getResource(\"/view/LightTheme.css\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    .toExternalForm());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            primaryStage.getScene().getStylesheets().add(getClass().getResource(\"/view/DarkTheme.css\")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    .toExternalForm());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            colorTrack \u003d 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Launches the Calendar in a separate window."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private void launchCalendar() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        calendarBox \u003d new CalendarBox(logic.getPlanner());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        StackPane secondaryLayout \u003d new StackPane();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        secondaryLayout.getChildren().add(calendarBox.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Scene secondScene \u003d new Scene(secondaryLayout, 1360, 300);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        secondScene.getStylesheets().add(getClass().getResource(\"/view/DarkTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Stage newWindow \u003d new Stage();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.setTitle(\"Calendar\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.setScene(secondScene);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.show();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 9,
      "DANamic": 3,
      "-": 178,
      "gruntultra": 52
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Constructor for ModuleCard Class"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * @param displayedIndex"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        code.setText(module.getModuleCode().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        title.setText(module.getModuleTitle());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        String builder \u003d \"Semesters: \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        for (int i \u003d 0; i \u003c module.getSemesterName().size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            builder +\u003d module.getSemesterName().get(i).getSemester() + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        semester.setText(builder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Overrides Equal function to compare objects"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public void showDetails() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        String moduleBuilder \u003d \"Module: \" + module.getTitle() + \"  \" + module.getModuleTitle()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                + \"\\n\\n\" + \"Department: \" + module.getDepartment() + \"\\n\\n\" + \"Description: \" + module.getDescription();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Label moduleDetails \u003d new Label(moduleBuilder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        moduleDetails.setWrapText(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        StackPane secondaryLayout \u003d new StackPane();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        secondaryLayout.getChildren().add(moduleDetails);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Scene secondScene \u003d new Scene(secondaryLayout, 500, 500);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        secondScene.getStylesheets().add(getClass().getResource(\"/view/DarkTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        // New window (Stage)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        Stage newWindow \u003d new Stage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.setTitle(code.getText());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.setScene(secondScene);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        newWindow.show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 1,
      "gruntultra": 99
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "gruntultra": 43
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nus_mod_planner.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 28,
      "-": 60,
      "gruntultra": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 18,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"NUS Mod Planner\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        \u003cImage url\u003d\"@/images/nus_mod_planner.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Settings\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"changeColor\" mnemonicParsing\u003d\"false\" onAction\u003d\"#changeColor\" text\u003d\"Change Color\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.5\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"146.0\" minHeight\u003d\"100\" prefHeight\u003d\"146.0\" prefWidth\u003d\"166.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"calendarBox\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"calendarBoxPlaceholder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cButton fx:id\u003d\"lanchCalendar\" mnemonicParsing\u003d\"false\" text\u003d\"Launch Calendar\" onMouseClicked\u003d\"#launchCalendar\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cVBox fx:id\u003d\"moduleList\" minHeight\u003d\"-Infinity\" minWidth\u003d\"340\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "gruntultra": 32
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" onMouseClicked\u003d\"#showDetails\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$code\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cLabel fx:id\u003d\"semester\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$semester\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 39
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 2,
      "gruntultra": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/calendarBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"300.0\" prefWidth\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cLabel fx:id\u003d\"semester\" style\u003d\"-fx-text-fill: #FFFFFF\" text\u003d\"Semester\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003cGridPane gridLinesVisible\u003d\"true\" style\u003d\"-fx-background-color: #FFFFFF;\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"dayTime\" alignment\u003d\"CENTER\" layoutX\u003d\"19.0\" layoutY\u003d\"7.0\" text\u003d\"Days/Time\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel layoutX\u003d\"25.0\" layoutY\u003d\"7.0\" text\u003d\"Monday\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel layoutX\u003d\"25.0\" layoutY\u003d\"7.0\" text\u003d\"Tuesday\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel layoutX\u003d\"15.0\" layoutY\u003d\"7.0\" text\u003d\"Wednesday\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel layoutX\u003d\"22.0\" layoutY\u003d\"7.0\" text\u003d\"Thursday\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #34c9eb;\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel layoutX\u003d\"31.0\" layoutY\u003d\"7.0\" text\u003d\"Friday\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"t89\" text\u003d\"0800-0900\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"t910\" text\u003d\"0900-1000\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"t1011\" text\u003d\"1000-1100\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"t1112\" text\u003d\"1100-1200\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1213\" text\u003d\"1200-1300\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1314\" text\u003d\"1300-1400\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1415\" text\u003d\"1400-1500\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1516\" text\u003d\"1500-1600\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1617\" text\u003d\"1600-1700\"/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1718\" text\u003d\"1700-1800\"  /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1819\" text\u003d\"1800-1900\"  /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"12\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1920\" text\u003d\"1900-2000\"  /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am1\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m1\" text\u003d\"m1\"  /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am2\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m2\" text\u003d\"m2\"  /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m3\" text\u003d\"m3\"  /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am4\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m4\" text\u003d\"m4\"  /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am5\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"1\" \u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m5\" text\u003d\"m5\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am6\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m6\" text\u003d\"m6\"  /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am7\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m7\" text\u003d\"m7\"  /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am8\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m8\" text\u003d\"m8\"  /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am9\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"1\" \u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m9\" text\u003d\"m9\" /\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am10\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m10\" text\u003d\"m10\"  /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am11\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m11\" text\u003d\"m11\"  /\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"am12\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"m12\" text\u003d\"m12\"  /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at1\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t1\" text\u003d\"t1\"  /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at2\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t2\" text\u003d\"t2\"  /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t3\" text\u003d\"t3\" /\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at4\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t4\" text\u003d\"t4\"  /\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at5\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t5\" text\u003d\"t5\" /\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at6\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t6\" text\u003d\"t6\"  /\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at7\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t7\" text\u003d\"t7\" /\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at8\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t8\" text\u003d\"t8\"  /\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at9\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t9\" text\u003d\"t9\" /\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at10\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t10\" text\u003d\"t10\"  /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"at11\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t11\" text\u003d\"t11\"  /\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"at12\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"t12\" text\u003d\"t12\"  /\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"aw1\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w1\" text\u003d\"w1\"  /\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw2\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w2\" text\u003d\"w2\"  /\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w3\" text\u003d\"w3\"  /\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw4\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w4\" text\u003d\"w4\"  /\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw5\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w5\" text\u003d\"w5\"  /\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw6\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w6\" text\u003d\"w6\"  /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw7\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w7\" text\u003d\"w7\"  /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw8\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w8\" text\u003d\"w8\"  /\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw9\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w9\" text\u003d\"w9\"  /\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw10\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"3\" \u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w10\" text\u003d\"w10\" /\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw11\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w11\" text\u003d\"w11\"  /\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"aw12\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"w12\" text\u003d\"w12\"  /\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath1\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th1\" text\u003d\"th1\"  /\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath2\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th2\" text\u003d\"th2\"  /\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th3\" text\u003d\"th3\"  /\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath4\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th4\" text\u003d\"th4\"  /\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath5\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th5\" text\u003d\"th5\"  /\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath6\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th6\" text\u003d\"th6\"  /\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"ath7\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th7\" text\u003d\"th7\"  /\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"ath8\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th8\" text\u003d\"th8\"  /\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"ath9\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"4\" \u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th9\" text\u003d\"th9\" /\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"ath10\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th10\" text\u003d\"th10\"  /\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"ath11\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"th11\" text\u003d\"th11\"  /\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"ath12\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"th12\" text\u003d\"th12\"  /\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"af1\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f1\" text\u003d\"f1\" /\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af2\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f2\" text\u003d\"f2\"  /\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"af3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f3\" text\u003d\"f3\"  /\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane  fx:id\u003d\"af4\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f4\" text\u003d\"f4\" /\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e\u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"f5\" text\u003d\"f5\"  /\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af6\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"f6\" text\u003d\"f6\" /\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af7\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"7\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"f7\" text\u003d\"f7\"  /\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af8\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"  GridPane.columnIndex\u003d\"8\" GridPane.rowIndex\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f8\" text\u003d\"f8\"/\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af9\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"9\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f9\" text\u003d\"f9\"  /\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af10\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"10\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                        \u003cLabel fx:id\u003d\"f10\" text\u003d\"f10\"  /\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af11\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"11\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"f11\" text\u003d\"f11\" /\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cAnchorPane   fx:id\u003d\"af12\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"  GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                     \u003cLabel fx:id\u003d\"f12\" text\u003d\"f12\" /\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 435
    }
  },
  {
    "path": "src/test/java/seedu/planner/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nus_mod_planner.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 33,
      "gruntultra": 1
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/planner/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.student.StudentAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.JsonPlannerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonPlannerStorage plannerStorage \u003d new JsonPlannerStorage(temporaryFolder.resolve(\"planner.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StorageManager storage \u003d new StorageManager(plannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        // Setup LogicManager with JsonPlannerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        JsonPlannerStorage plannerStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new JsonPlannerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPlanner.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(plannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        // Execute help command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String studentAddCommand \u003d StudentAddCommand.EXAMPLE_COMMAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        expectedModel.addStudent(SampleDataUtil.getSampleStudent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertCommandFailure(studentAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static class JsonPlannerIoExceptionThrowingStub extends JsonPlannerStorage {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        private JsonPlannerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 26,
      "thetruevincentchow": 1,
      "DANamic": 12,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void execute_emptyPlanner_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 4,
      "DANamic": 1,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * - the planner book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/MajorSetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.model.util.SampleDataUtil.getSamplePlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorSetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MajorSetTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Model model \u003d new ModelManager(getSamplePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void execute_setMajor_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String major \u003d \"CS\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        MajorSetCommand majorSetCommand \u003d new MajorSetCommand(major);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String expectedMessage \u003d String.format(MajorSetCommand.MESSAGE_SUCCESS, major);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30,
      "DANamic": 1
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/MajorStatusTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.model.util.SampleDataUtil.getSamplePlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorSetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.major.MajorStatusCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MajorStatusTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Model model \u003d new ModelManager(getSamplePlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void execute_majorStatus_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String major \u003d \"CS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        MajorSetCommand majorSetCommand \u003d new MajorSetCommand(major);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String expectedMessage \u003d String.format(MajorSetCommand.MESSAGE_SUCCESS, major);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        MajorStatusCommand majorStatusCommand \u003d new MajorStatusCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30,
      "DANamic": 1
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"CS2040\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseModuleCodenull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ModuleCode expectedName \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseModuleCode(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_MODULE_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ModuleCode expectedName \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseModuleCode(nameWithWhitespace));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 7,
      "DANamic": 12,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/PlannerParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class PlannerParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private final PlannerParser parser \u003d new PlannerParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "DANamic": 39
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.PlannerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.TypicalModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(new Planner(), new Planner(modelManager.getPlanner()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"planner/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"new/planner/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlannerFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setPlannerFilePath_validPath_setsPlannerFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Path path \u003d Paths.get(\"planner/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        modelManager.setPlannerFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(path, modelManager.setPlannerFilePath(path));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void hasStudent_studentNotInPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertFalse(modelManager.hasStudent(TypicalStudents.BOB));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void hasStudent_studentInPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        modelManager.addStudent(TypicalStudents.BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertTrue(modelManager.hasStudent(TypicalStudents.BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasModule_moduleNotInPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertFalse(modelManager.hasModule(new Module()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasModule_moduleInPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        modelManager.addModule(TypicalModules.CS2040);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertTrue(modelManager.hasModule(TypicalModules.CS2040));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner planner \u003d new PlannerBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                .withModule(TypicalModules.CS2040)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                .withStudent(TypicalStudents.BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Planner differentPlanner \u003d new Planner();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        modelManager \u003d new ModelManager(planner, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(planner, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        // different planner -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPlanner, userPrefs)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        differentUserPrefs.setPlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planner, differentUserPrefs)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 31,
      "DANamic": 20,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/PlannerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.model.util.SampleDataUtil.getSamplePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.grades.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.time.StudentSemester;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.TypicalModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class PlannerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private final Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Planner emptyPlanner \u003d new Planner(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(Collections.emptyList(), emptyPlanner.getStudentList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planner.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void resetData_withValidReadOnlyPlanner_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Planner newData \u003d getSamplePlanner();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        planner.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(newData, planner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planner.hasModule(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasModule_moduleNotInPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertFalse(planner.hasModule(TypicalModules.NON_EXISTING_MODULE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void hasModule_moduleInPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        planner.addModule(TypicalModules.CS2040);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertTrue(planner.hasModule(TypicalModules.CS2040));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e planner.getModuleList().remove(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * A stub ReadOnlyPlanner whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static class PlannerStub implements ReadOnlyPlanner {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        PlannerStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public Student getActiveStudent() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public UniqueModuleList getModules() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public ObservableList\u003cModuleCode\u003e getActiveModuleCodes() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public boolean hasSemester(StudentSemester semester) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public Optional\u003cGrade\u003e getModuleGrade(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public StudentSemester getActiveSemester() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public int getActiveStudentIndex() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public ObservableList\u003cModuleCode\u003e getExemptedModulesList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15,
      "thetruevincentchow": 15,
      "DANamic": 104
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlannerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "DANamic": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/module/ModuleDataImporterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class ModuleDataImporterTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void run_test() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ModuleDataImporter.run();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonSerializablePlannerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.testutil.TypicalModules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class JsonSerializablePlannerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePlannerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentPlanner.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentPlanner.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentPlanner.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonSerializablePlanner dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            JsonSerializablePlanner.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Planner plannerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner typicalStudentsPlanner \u003d TypicalModules.getTypicalPlanner();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(plannerFromFile, typicalStudentsPlanner);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonSerializablePlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            JsonSerializablePlanner.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonSerializablePlanner dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            JsonSerializablePlanner.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePlanner.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 18,
      "DANamic": 29
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"data/planner.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.TypicalModules.getTypicalPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        JsonPlannerStorage plannerStorage \u003d new JsonPlannerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        storageManager \u003d new StorageManager(plannerStorage, userPrefsStorage); // TODO"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void plannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "         * {@link JsonPlannerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPlannerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Planner original \u003d getTypicalPlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        storageManager.savePlanner(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ReadOnlyPlanner retrieved \u003d storageManager.readPlanner().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(original, new Planner(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void getPlannerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertNotNull(storageManager.getPlannerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "DANamic": 11,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/ModuleBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_CODE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModuleBuilder withModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Module(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "DANamic": 32
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/PlannerBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * A utility class to help with building Planner objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * {@code Planner ab \u003d new PlannerBuilder().withModule(\"CS2103T\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class PlannerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Planner planner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public PlannerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        planner \u003d new Planner();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public PlannerBuilder(Planner planner) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner \u003d planner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public PlannerBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner.addStudent(student);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public PlannerBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner.addModule(module);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Planner build() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19,
      "DANamic": 19
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/StudentBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.planner.model.student.Major;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * {@code Student ab \u003d new StudentBuilder().withModule(\"CS2103T\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        name \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        major \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public StudentBuilder(Student student) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.name \u003d student.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.major \u003d student.getMajor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public StudentBuilder withName(Name name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new Student(name, major);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 26,
      "thetruevincentchow": 9
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalModules.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Module CS2040 \u003d new ModuleBuilder().withModuleCode(new ModuleCode(\"CS2040\")).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().withModuleCode(new ModuleCode(\"CS2103T\")).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Module NON_EXISTING_MODULE \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            .withModuleCode(new ModuleCode(\"XXXXXXX\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Returns an {@code Planner} with all the typical persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static Planner getTypicalPlanner() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            planner.addModule(module);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2040, CS2103T));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10,
      "DANamic": 32
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalStudents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.Planner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(new Name(\"Alice\")).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(new Name(\"Bob\")).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private TypicalStudents() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns an {@code Planner} with all the typical students."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static Planner getTypicalPlanner() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            planner.addStudent(student);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 38
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/planner/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.planner.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import seedu.planner.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003cfx:root type\u003d\"seedu.planner.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 5
    }
  }
]
