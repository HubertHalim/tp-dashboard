[
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.PlannerModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.storage.JsonPlannerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.storage.PlannerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        PlannerStorage plannerStorage \u003d new JsonPlannerStorage(userPrefs.getPlannerFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, plannerStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        model \u003d initPlannerModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The data from the sample planner will be used instead if {@code storage}\u0027s planner is not found,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * or an empty planner will be used instead if errors occur when reading {@code storage}\u0027s planner."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Model initPlannerModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Optional\u003cPlanner\u003e plannerOptional;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner initialData;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            plannerOptional \u003d storage.readPlanner();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (!plannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Planner\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            initialData \u003d plannerOptional.orElseGet(SampleDataUtil::getSamplePlanner);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            initialData \u003d Planner.samplePlanner();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            initialData \u003d Planner.samplePlanner();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new PlannerModelManager(initialData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 33,
      "thetruevincentchow": 2,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            storage.savePlanner(model.getPlanner());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeclareCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class DeclareCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"declare\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: fill in usage message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \":\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Subcommands: major\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" major CS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeclareMajorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.PlannerModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DeclareMajorCommand extends DeclareCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"major\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027declare major\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: write usage message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_EDIT_MAJOR_SUCCESS \u003d \"Changed major to: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DeclareMajorCommand(Major major) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(major);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student editedStudent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_EDIT_MAJOR_SUCCESS, editedStudent.getMajor().major);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student editedStudent \u003d new Student(student.getName(), student.getDegrees(), major);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert(model instanceof PlannerModelManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.setActiveStudent(editedStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return new CommandResult(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.PlannerModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027module add\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"module \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Adds the module to list of enrolled modules.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"module \" + COMMAND_WORD + \"CS2030\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Added module to timetable: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_ALREADY_EXISTS \u003d \"Module is already in timetable: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_DOES_NOT_EXISTS \u003d \"Module does not exist: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleAddCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String generateModuleDoesNotExists(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_DOES_NOT_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateDuplicateMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_ALREADY_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: add to a `TimeTable` of a `Student` or `User`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Student student \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateDuplicateMessage(moduleCode));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!model.getPlanner().getModules().contains(moduleCode)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new CommandException(generateModuleDoesNotExists(moduleCode));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addEnrollment(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 14,
      "thetruevincentchow": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: fill in usage message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \":\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Subcommands: add, remove, list, list exempted\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" add CS2030\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleListCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027module list\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"module \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": List enrolled modules in the timetable.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"module \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed enrolled modules in timetable: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cModuleCode\u003e codes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (ModuleCode moduleCode : codes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(moduleCode.value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, codes.isEmpty() ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Student student \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return new CommandResult(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getEnrolledModulesList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleRemoveCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027module remove\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"module \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Removes the module from list of enrolled modules.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"module \" + COMMAND_WORD + \"CS2030\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"Removed module from timetable: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_NOT_EXISTS \u003d \"Module does not exist in timetable: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleRemoveCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateFailureMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_NOT_EXISTS, moduleCode.value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_MODULE_SUCCESS, moduleCode.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // TODO: add to a `TimeTable` of a `Student` or `User`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Student student \u003d model.getActiveStudent();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!model.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(generateFailureMessage(moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeEnrollment(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student editedStudent \u003d new Student(student.getName(), student.getDegrees(), major);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert(model instanceof PlannerModelManager);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.setActiveStudent(editedStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //return new CommandResult(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleCode));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Edits the details of an existing person in the address book to include a remark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(obj instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentActiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentActiveCommand extends StudentCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"active\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027student active\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"student \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Sets the student from the student list as the active student.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"student \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ACTIVE_STUDENT_SUCCESS \u003d \"Set student as active: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentActiveCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ACTIVE_STUDENT_SUCCESS, student);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.activateStudent(student);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(student));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentAddCommand extends StudentCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027student add\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"student \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Adds the student to list of student profiles.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"[\" + PREFIX_MAJOR + \"MAJOR] \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"student \" + COMMAND_WORD + \" n/Alice major/CS\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"Added student: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student list\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentAddCommand(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student addedStudent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_ADD_STUDENT_SUCCESS, addedStudent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (model.hasStudent(student)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.addStudent(student);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(student));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class StudentCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: fill in usage message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //+ \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \":\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Subcommands: add remove active\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" active 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentListCommand extends StudentCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027student list\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"student \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": List students  in the student list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"list \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed students in student list:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(ObservableList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size(); ++i) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Student student \u003d students.get(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(i + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(\": \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            sb.append(student);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, sb.length() \u003d\u003d 0 ? \"[None]\" : sb.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(lastShownList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentRemoveCommand extends StudentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"\u0027student remove\u0027 command not implemented yet\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"student \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \": Removes the student from list of student profiles.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            + \"Example: \" + \"student \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_REMOVE_STUDENT_SUCCESS \u003d \"Removed student: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_WOULD_BE_EMPTY \u003d \"Removing student would make student list empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentRemoveCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String generateSuccessMessage(Student removedStudent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(MESSAGE_REMOVE_STUDENT_SUCCESS, removedStudent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObservableList\u003cStudent\u003e lastShownList \u003d model.getStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (lastShownList.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(MESSAGE_WOULD_BE_EMPTY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student removedStudent \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        model.removeStudent(removedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new CommandResult(generateSuccessMessage(removedStudent));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case DeclareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new DeclareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 13,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"major/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final Prefix PREFIX_MINOR \u003d new Prefix(\"minor/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeclareCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.DeclareCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.DeclareMajorCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DeclareCommandParser implements Parser\u003cDeclareCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DeclareCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case DeclareMajorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new DeclareMajorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeclareMajorCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.DeclareMajorCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DeclareMajorCommandParser implements Parser\u003cDeclareMajorCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //private static final Prefix PREFIX_DECLARE_MAJOR \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DeclareMajorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Major major \u003d new Major(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new DeclareMajorCommand(major);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.DeclareMajorCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleAddCommandParser implements Parser\u003cModuleAddCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode  \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleAddCommand(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleCommandParser implements Parser\u003cModuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case ModuleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.ModuleRemoveCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ModuleRemoveCommandParser implements Parser\u003cModuleRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeclareMajorCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a DeclareMajorCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode  \u003d new ModuleCode(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new ModuleRemoveCommand(moduleCode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns a RemarkCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Remark remark \u003d new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudentActiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentActiveCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentRemoveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentActiveCommandParser implements Parser\u003cStudentActiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentActiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentActiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentActiveCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudentAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentRemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentAddCommandParser implements Parser\u003cStudentAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //NOTE: the concatenation \" \" is a workaround for `ArgumentTokenizer` treating the first argument as the preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //TODO: use ArgumentTokenizer for all subcommands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args, PREFIX_NAME, PREFIX_MAJOR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MAJOR)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //TODO: remove references to AddressBook\u0027s `person.Name` class so we can use our own `student.Name`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        seedu.address.model.person.Name abName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Name name \u003d new Name(abName.fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Major major  \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Name name \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Major major  \u003d new Major(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d new Student(name, major);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentAddCommand(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentCommandParser implements Parser\u003cStudentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+) ?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses user subcommand input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param userInput user subcommand input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentActiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentActiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case StudentListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return new StudentListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudentRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.commands.StudentRemoveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class StudentRemoveCommandParser implements Parser\u003cStudentRemoveCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public StudentRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new StudentRemoveCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /** Returns the Planner */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ReadOnlyPlanner getPlanner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Student getActiveStudent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void setActiveStudent(Student editedStudent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void activateStudent(Student student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeStudent(Student student);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getEnrolledModulesList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    boolean hasEnrollment(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void addEnrollment(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    void removeEnrollment(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "thetruevincentchow": 24,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Planner planner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner \u003d new Planner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ReadOnlyPlanner getPlanner() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: place implementation of methods in PlannerModelManager into ModelManager"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //       and remove PlannerModelManager"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getActiveStudent() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setActiveStudent(Student editedStudent) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeStudent(Student student) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    // TODO: replace with `TimeTable` and `Enrollment`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8,
      "thetruevincentchow": 48,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Planner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.ModuleDataImporter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.UniqueModuleCodeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Wraps all data at the planner level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Planner implements ReadOnlyPlanner {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The current student that the user can immediately modify."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * `activeStudent` must be an element of `students`, i.e. `students.contains(activeStudent)` is `true`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected Student activeStudent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The list of students created by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected UniqueStudentList students; //TOOD: use list of students in storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The list of available modules in NUS."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected UniqueModuleList modules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: move to `Student` or `User`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: replace `UniqueModuleCodeList` with `TimeTable` (once loading available module list is implemented)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected UniqueModuleCodeList enrolledModules;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Creates an Planner using the UniqueStudentList in the {@code toBeCopied}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent \u003d null; //new Student(new Name(\"Placeholder Name\"), new Degrees(), new Major(\"Placeholder Major\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //students.add(activeStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrolledModules \u003d new UniqueModuleCodeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        loadModules();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void loadModules() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        List\u003cModule\u003e modulesToImport \u003d ModuleDataImporter.run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (modulesToImport \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            modulesToImport.forEach(x -\u003e modules.add(x));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public UniqueModuleList getModules() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns a valid planner state."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Sample planner"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static Planner samplePlanner() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Student student \u003d new Student(new Name(\"Placeholder name\"), new Major(\"Placeholder major\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.students.add(student);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.activeStudent \u003d student;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addStudent(Student student) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean resetData(Planner planner) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent \u003d planner.activeStudent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        students \u003d planner.students;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        modules \u003d planner.modules;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrolledModules \u003d planner.enrolledModules;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addModule(Module module) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: replace with `TimeTable` and `Enrollment`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrolledModules.contains(moduleCode);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean addEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrolledModules.add(moduleCode);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrolledModules.remove(moduleCode);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return enrolledModules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getActiveStudent() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //TODO: handle `activeStudents` being null (e.g. if data file is missing)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //TODO: handle all students being removed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudent \u003d students.iterator().next();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return activeStudent;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the currently active student with the student given by (@code editedStudent)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @params editedStudent Student to copy for replacement"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setActiveStudent(Student editedStudent) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (activeStudent !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            students.setStudent(activeStudent, editedStudent);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent \u003d editedStudent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!students.contains(student)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalArgumentException(\"Student does not exist in student list\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent \u003d student;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeStudent(Student toRemove) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //TODO: handle all students being removed"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (toRemove \u003d\u003d activeStudent) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            activeStudent \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        students.remove(toRemove);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 70,
      "thetruevincentchow": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PlannerModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class PlannerModelManager extends ModelManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlannerModelManager.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Planner planner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public PlannerModelManager(Planner planner) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(planner);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.planner \u003d planner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public PlannerModelManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this(new Planner());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setPlanner(Planner planner) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.planner.resetData(planner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner getPlanner() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.hasStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student getActiveStudent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getActiveStudent();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setActiveStudent(Student editedStudent) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.setActiveStudent(editedStudent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.activateStudent(student);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addStudent(student);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeStudent(Student student) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeStudent(student);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.getEnrolledModulesList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return planner.hasEnrollment(moduleCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.addEnrollment(moduleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.removeEnrollment(moduleCode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 48,
      "thetruevincentchow": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPlanner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public interface ReadOnlyPlanner {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Student getActiveStudent();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    UniqueModuleList getModules();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    ObservableList\u003cModuleCode\u003e getEnrolledModulesList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 23,
      "thetruevincentchow": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Path plannerFilePath \u003d Paths.get(\"data\" , \"planner.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grades/CumulativeGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class CumulativeGrade {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected int numSu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected double totalGradePoints;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected int totalCredits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public CumulativeGrade(int numSu, double totalGradePoints, int totalCredits) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.numSu \u003d numSu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.totalGradePoints \u003d totalGradePoints;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.totalCredits \u003d totalCredits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public OptionalDouble getValue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return OptionalDouble.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 1,
      "gruntultra": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grades/Grade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected LetterGrade letterGrade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected boolean isSu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Grade(LetterGrade letterGrade, boolean isSu) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.letterGrade \u003d letterGrade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.isSu \u003d isSu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public OptionalDouble getGradePoint(int credit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return OptionalDouble.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grades/LetterGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.grades;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public enum LetterGrade {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    A_PLUS, A, A_MINUS, B_PLUS, B, B_MINUS, C_PLUS, C, D_PLUS, D, F, CS, CU, W, EXE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graduation/AggregationType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public enum AggregationType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ALL,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ANY"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graduation/CompoundGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.model.graduation.AggregationType.ALL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class CompoundGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected AggregationType aggregationType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected int minMCs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected List\u003cGraduationRequirement\u003e graduationRequirementList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CompoundGraduationRequirement(String name, int minMCs, List\u003cGraduationRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.graduationRequirementList \u003d requirements;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        aggregationType \u003d ALL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public CompoundGraduationRequirement(String name, int minMCs, List\u003cGraduationRequirement\u003e requirements,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                         AggregationType aggregationType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.minMCs \u003d minMCs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.graduationRequirementList \u003d requirements;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.aggregationType \u003d aggregationType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graduation/GraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class GraduationRequirement {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graduation/SingleGraduationRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.graduation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SingleGraduationRequirement extends GraduationRequirement {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public SingleGraduationRequirement(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Credit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Credit {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public static final String MESSAGE_CONSTRAINS \u003d \"Credits cannot be null\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Credit(String credit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this(Integer.parseInt(credit));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Credit(int credit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(credit);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        value \u003d credit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 5,
      "gruntultra": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public static final String MESSAGE_CONSTRAINS \u003d \"Description cannot be null\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String acadYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String preclusion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String faculty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // private final String workload;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String prerequisite;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String moduleCredit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String semesterData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String prereqTree;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String fulfillRequirements;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedModule("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"acadYear\") String acadYear,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"faculty\") String faculty,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // @JsonProperty(\"workload\") String workload,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"semesterData\") String semesterData,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prereqTree\") String prereqTree,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"fulfillRequirements\") String fulfillRequirements"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d workload;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedModule(Module module) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d module.acadYear;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d module.preclusion;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d module.description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d module.title;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d module.department;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d module.faculty;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d module.workload;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d module.prerequisite;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d module.moduleCredit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d module.moduleCode.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d module.semesterData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d module.prereqTree;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d module.fulfillRequirements;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted Module object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        if (name \u003d\u003d null) { // TODO Data validation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Module("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            acadYear,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            preclusion,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            description,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            title,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            department,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            faculty,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null, // workload,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            prerequisite,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            moduleCredit,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            moduleCode,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            semesterData,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            prereqTree,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fulfillRequirements"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/JsonSerializableModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.time.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonSerializableModule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String acadYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String preclusion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String department;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String faculty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // public String workload;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String prerequisite;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String moduleCredit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // public String semesterData;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String prereqTree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String fulfillRequirements;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonSerializableModule} with the given persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableModule("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"acadYear\") String acadYear,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"faculty\") String faculty,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // @JsonProperty(\"workload\") String workload,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // @JsonProperty(\"semesterData\") String semesterData,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"prereqTree\") String prereqTree,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @JsonProperty(\"fulfillRequirements\") String fulfillRequirements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.workload \u003d workload;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializableModule(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO: Don\u0027t think we will need to use this. KIV"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Module("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.acadYear,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.preclusion,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.title,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.department,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.faculty,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null, // this.workload,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.prerequisite,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.moduleCredit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.moduleCode.replaceAll(\"[^a-zA-Z0-9]\", \"\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            null, // this.semesterData,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.prereqTree,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.fulfillRequirements"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Laboratory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Laboratory extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Lecture extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Lesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public abstract class Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected ModuleTime time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public abstract ModuleTime getTime();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.time.Semester;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String acadYear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String preclusion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String department;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String workload;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String prerequisite;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String moduleCredit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ModuleCode moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String semesterData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String prereqTree;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String fulfillRequirements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module ("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String acadYear,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String preclusion,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String title,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String department,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String faculty,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String workload,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String prerequisite,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String moduleCredit,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String moduleCode,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String semesterData,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String prereqTree,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String fulfillRequirements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.acadYear \u003d acadYear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.fulfillRequirements \u003d fulfillRequirements;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return false; // TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 55,
      "thetruevincentchow": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            \"Module codes should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * All characters must be alphanumeric, and there must be at least one character."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleCode(String code) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        checkArgument(isValidModuleCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        value \u003d code.toUpperCase(); // Allow case insensitivity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof ModuleCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return value.equals(((ModuleCode)other).value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 34,
      "gruntultra": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleDataImporter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ModuleDataImporter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final String DOWNLOAD_URL \u003d \"https://api.nusmods.com/v2/{0}/moduleInfo.json\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final String[] acadYears \u003d new String[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"2019-2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \"2018-2019\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static List\u003cModule\u003e run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Path path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (String acadYear : acadYears) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                url \u003d DOWNLOAD_URL.replace(\"{0}\", acadYear);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                path \u003d Paths.get(\"data\", \"moduleInfo_{0}.json\".replace(\"{0}\", acadYear));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    try (InputStream in \u003d new URL(url).openStream()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        Files.copy(in, path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Optional\u003cJsonSerializableModule[]\u003e optionalModules \u003d JsonUtil.readJsonFile(path, JsonSerializableModule[].class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (optionalModules.isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    JsonSerializableModule[] moduleArray \u003d optionalModules.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    for (JsonSerializableModule m : moduleArray) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            module \u003d m.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            if (modules.contains(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                int a \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                                modules.add(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        } catch (IllegalValueException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                            System.err.println(ex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class ModuleTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    protected DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime(LocalTime startTime, LocalTime endTime, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Sectional.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Sectional extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class Tutorial extends Lesson {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public ModuleTime getTime() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gruntultra": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleCodeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A list of ModuleCode that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A module code is considered unique by comparing using {@code ModuleCode#equals(Object)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * As such, adding, updating and removal of module codes uses (@code ModuleCode#equals(Object))."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class UniqueModuleCodeList implements Iterable\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void add(ModuleCode toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModuleCode}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module identity of {@code editedModuleCode} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModuleCode(ModuleCode target, ModuleCode editedModuleCode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(target, editedModuleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!target.equals(editedModuleCode) \u0026\u0026 contains(editedModuleCode)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.set(index, editedModuleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void remove(ModuleCode toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new ModuleNotFoundException(); TODO"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModules(UniqueModuleCodeList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void setModules(List\u003cModuleCode\u003e modules) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ObservableList\u003cModuleCode\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Iterator\u003cModuleCode\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                || (other instanceof UniqueModuleCodeList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleCodeList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModuleCode\u003e modules) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A list of Module that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final HashMap\u003cModuleCode, Module\u003e internalList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.containsKey(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.containsKey(toCheck.moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            // throw new DuplicateModuleException(); TODO"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.put(toAdd.moduleCode, toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.get(moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.remove(toRemove.moduleCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//         ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//         internalList.forEach(module -\u003e modules.add(module));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "//         return FXCollections.unmodifiableObservableList(modules);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.values().iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 94,
      "thetruevincentchow": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Optional\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this(name, phone, email, address, tags, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Remark remark) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.remark \u003d Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return remark.orElse(new Remark(\"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 otherPerson.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .append(\" Tags: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 17,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values, and can be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //checkArgument(isValidAddress(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/programmes/ComputerScienceProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.CompoundGraduationRequirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.SingleGraduationRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ComputerScienceProgramme extends DegreeProgramme {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ComputerScienceProgramme() { // TODO: Load from JSON or XML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"University Level Requirements\", 20, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Human Cultures\", 4, null),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Thinking and Expression\", 4, null),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Singapore Studies\", 4, null),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GER1000\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Programme Requirements\", 108, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Computer Science Foundation\", 36, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1101S\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1231S\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2030\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2040S\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2100\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2103T\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2105\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2106\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS3230\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Computer Science Breadth and Depth\", 44, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Focus Area\", 24, null),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Computer Systems Team Project\", 8, null),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Industrial Experience Requirement\", 12, null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"IT Professionalism\", 12, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS1103\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2101\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"ES2660\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Mathematics and Sciences\", 16, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"MA1521\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"MA1101R\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"ST2334\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"One Science Module\", 4, null)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            )))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Unrestricted Electives\", 32, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/programmes/DegreeProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class DegreeProgramme extends Programme {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private DegreeType degreeType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (GraduationRequirement requirement : this.graduationRequirementList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (!requirement.isFulfilled()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/programmes/DegreeType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public enum DegreeType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    MAJOR,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    MINOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/programmes/InformationSystemsProgramme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.CompoundGraduationRequirement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.SingleGraduationRequirement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class InformationSystemsProgramme extends DegreeProgramme {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public InformationSystemsProgramme() { // TODO: Load from JSON or XML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"University Level Requirements\", 20, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Human Cultures\", 4, null),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Thinking and Expression\", 4, null),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Singapore Studies\", 4, null),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new SingleGraduationRequirement(new ModuleCode(\"GER1000\"))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Programme Requirements\", 72, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Core Modules\", 72, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1010J\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS1231\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS1103\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2030\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2040\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2102\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CS2105\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2101\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2102\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS2103\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS3103\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS3106\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4100\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4103\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"MA1301\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new CompoundGraduationRequirement(\"Mathematics\", 4, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new SingleGraduationRequirement(new ModuleCode(\"MA1312\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    new SingleGraduationRequirement(new ModuleCode(\"MA1521\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ))),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"ST2334\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Programme Electives\", 24, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            ))),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            new CompoundGraduationRequirement(\"Internship or Dissertation\", 12, new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"IS4010\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new SingleGraduationRequirement(new ModuleCode(\"CP4101\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            )))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationRequirementList.add(new CompoundGraduationRequirement(\"Unrestricted Electives\", 32, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/programmes/Programme.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.programmes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.graduation.GraduationRequirement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class Programme {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected List\u003cGraduationRequirement\u003e graduationRequirementList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public abstract boolean isFulfilled();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Degrees.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.programmes.DegreeProgramme;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s graduation Year in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDegreeProgramme(DegreeProgramme)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Degrees {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \"Degrees should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cDegreeProgramme\u003e degrees;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Degrees}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param degree A valid DegreeProgramme."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(degree);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidDegreeProgramme(degree), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.add(degree);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param degrees A list of valid DegreeProgrammes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees(List\u003cDegreeProgramme\u003e degrees) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(degrees);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (DegreeProgramme degree : degrees) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            checkArgument(isValidDegreeProgramme(degree), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees \u003d degrees;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegree(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.add(degree);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegrees(List\u003cDegreeProgramme\u003e degree) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.addAll(degree);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidDegreeProgramme(DegreeProgramme test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // return Integer.toString(test).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (DegreeProgramme degree : degrees) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            sb.append(\"\\n\" + degree.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof Degrees // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u0026\u0026 degrees \u003d\u003d (((Degrees) other).degrees)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.degrees.hashCode();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Enrollment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.grades.Grade;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Enrollment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Module module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int credit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public OptionalDouble getGradePoint() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (grade.isPresent()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return grade.get().getGradePoint(credit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return OptionalDouble.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/GraduationYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s graduation Year in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGraduationYear(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class GraduationYear {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \"Student IDs should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final int graduationYear;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param year A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public GraduationYear(int year) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidGraduationYear(year), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        graduationYear \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidGraduationYear(int test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Integer.toString(test).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Integer.toString(graduationYear);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof GraduationYear // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u0026\u0026 graduationYear \u003d\u003d (((GraduationYear) other).graduationYear)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return graduationYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Major.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \"Majors should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final String major;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param major A valid major."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Major(String major) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidMajor(major), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u0026\u0026 major.equals(((Major) other).major)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/MatriculationId.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s ID in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MatriculationId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \"Student IDs should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param studentId A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public MatriculationId(String studentId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidStudentId(studentId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        id \u003d studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidStudentId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof MatriculationId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u0026\u0026 id.equals(((MatriculationId) other).id)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.programmes.DegreeProgramme;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a Student in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Degrees degrees;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student(Name name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this(name, new Degrees(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: add `degrees` field in `JsonAdaptedStudent` and remove this constructor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student(Name name, Major major) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.degrees \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Student(Name name, Degrees degrees, Major major) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.degrees \u003d degrees;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Degrees getDegrees() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.degrees;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean addDegrees(DegreeProgramme degree) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.degrees.addDegree(degree);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //TODO: initialize and compare `degrees`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return otherStudent.getName().equals(getName()) \u0026\u0026 otherStudent.getMajor().equals(getMajor());// \u0026\u0026 otherStudent.degrees.equals(getDegrees());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        builder.append(PREFIX_NAME).append(getName()).append(\" \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .append(PREFIX_MAJOR).append(getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean isSameStudent(Student student) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.equals(student);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 82,
      "thetruevincentchow": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/TimeTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public List\u003cEnrollment\u003e enrollments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    TimeTable() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrollments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * unique in terms of identity in the UniqueStudentList. However, the removal of a student uses Student#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super(\"Operation would result in duplicate student\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Signals that the operation is unable to find the specified Student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/time/Semester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public enum Semester {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    ONE(\"Semester 1\"), TWO(\"Semester 2\"), SPECIAL_ONE(\"Special Semester 1\"), SPECIAL_TWO(\"Special Semester 2\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getAction() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Semester(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "gruntultra": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/time/SemesterYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class SemesterYear {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final Semester sem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final int academicYear;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public SemesterYear(Semester sem, int academicYear) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.sem \u003d sem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(sem, academicYear);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof SemesterYear)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return sem.equals(((SemesterYear) other).sem)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    \u0026\u0026 academicYear \u003d\u003d ((SemesterYear) other).academicYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 19,
      "gruntultra": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/time/StudentSemester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "package seedu.address.model.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "public class StudentSemester {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final SemesterYear semYear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected final int degreeYear;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gruntultra"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    public StudentSemester(SemesterYear semYear, int degreeYear) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.semYear \u003d semYear;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "        this.degreeYear \u003d degreeYear;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return Objects.hash(semYear, degreeYear);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!(other instanceof StudentSemester)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return semYear.equals(((StudentSemester) other).semYear)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    \u0026\u0026 degreeYear \u003d\u003d ((StudentSemester) other).degreeYear;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gruntultra"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 21,
      "gruntultra": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.TimeTable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.time.StudentSemester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Student student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Map\u003cStudentSemester, TimeTable\u003e timeTables;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Set\u003cModuleCode\u003e exemptedModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public User(Student student) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        timeTables \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        exemptedModules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static Planner getSamplePlanner() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner samplePlanner \u003d new Planner();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Student student \u003d new Student(new seedu.address.model.student.Name(\"Dummy Name\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        samplePlanner.addStudent(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return samplePlanner;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 11,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Jackson-friendly version of {@link ModuleCode}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "class JsonAdaptedModuleCode {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleCode} with the given {@code value}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedModuleCode(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts a given {@code ModuleCode} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonAdaptedModuleCode(ModuleCode source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        value \u003d source.value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Converts this Jackson-friendly adapted module code object into the model\u0027s {@code ModuleCode} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ModuleCode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(value)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return new ModuleCode(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Major;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"major\") String major) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        major \u003d source.getMajor().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new Student(modelName, modelMajor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPlannerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A class to access Planner data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class JsonPlannerStorage implements PlannerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlannerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonPlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Optional\u003cPlanner\u003e readPlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return readPlanner(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Similar to {@link #readPlanner()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Optional\u003cPlanner\u003e readPlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Optional\u003cJsonSerializablePlanner\u003e jsonPlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                filePath, JsonSerializablePlanner.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (!jsonPlanner.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return Optional.of(jsonPlanner.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        savePlanner(planner, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Similar to {@link #savePlanner(ReadOnlyPlanner)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(planner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePlanner(planner), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePlanner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "@JsonRootName(value \u003d \"planner\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class JsonSerializablePlanner {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final JsonAdaptedStudent activeStudent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private final List\u003cJsonAdaptedModuleCode\u003e enrolledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public JsonSerializablePlanner(@JsonProperty(\"activeStudent\") JsonAdaptedStudent activeStudent,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                                   @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                                   @JsonProperty(\"enrolledModules\") List\u003cJsonAdaptedModuleCode\u003e enrolledModules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.activeStudent \u003d activeStudent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.enrolledModules.addAll(enrolledModules);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public JsonSerializablePlanner(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        activeStudent \u003d new JsonAdaptedStudent(source.getActiveStudent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        enrolledModules.addAll(source.getEnrolledModulesList().stream().map(JsonAdaptedModuleCode::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Planner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Planner planner \u003d new Planner();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (planner.hasStudent(student)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            planner.addStudent(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        planner.setActiveStudent(activeStudent.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (JsonAdaptedModuleCode jsonAdaptedModuleCode : enrolledModules) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ModuleCode moduleCode \u003d jsonAdaptedModuleCode.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (planner.hasEnrollment(moduleCode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            planner.addEnrollment(moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 59,
      "thetruevincentchow": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PlannerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Represents a storage for {@link Planner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public interface PlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Path getPlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns Planner data as a {@link Planner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Optional\u003cPlanner\u003e readPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see #getPlannerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Optional\u003cPlanner\u003e readPlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Saves the given {@link Planner} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param planner cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void savePlanner(ReadOnlyPlanner planner) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @see #savePlanner(ReadOnlyPlanner)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, PlannerStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private PlannerStorage plannerStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage, PlannerStorage plannerStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.plannerStorage \u003d plannerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Path getPlannerFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerStorage.getPlannerFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Optional\u003cPlanner\u003e readPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return readPlanner(plannerStorage.getPlannerFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Optional\u003cPlanner\u003e readPlanner(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return plannerStorage.readPlanner(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        savePlanner(planner, plannerStorage.getPlannerFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void savePlanner(ReadOnlyPlanner planner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        plannerStorage.savePlanner(planner, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.storage.JsonPlannerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonPlannerStorage plannerStorage \u003d new JsonPlannerStorage(temporaryFolder.resolve(\"planner.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, plannerStorage); // TODO fix planner storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        JsonPlannerStorage jsonPlannerStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                new JsonPlannerStorage(temporaryFolder.resolve(\"planner.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, jsonPlannerStorage); // TODO"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 6,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.module.UniqueModuleCodeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.Enrollment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public Planner getPlanner() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public Student getActiveStudent() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public void setActiveStudent(Student editedStudent) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public void addEnrollment(ModuleCode enrollment) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public void removeEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public boolean hasEnrollment(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return (new UniqueStudentList()).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public void activateStudent(Student student) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public void removeStudent(Student student) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        public ObservableList\u003cModuleCode\u003e getEnrolledModulesList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return (new UniqueModuleCodeList()).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 56,
      "thetruevincentchow": 11,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleDataImporterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "class ModuleDataImporterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    void run_test() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ModuleDataImporter.run();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, null); // TODO"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 1,
      "-": 67
    }
  }
]
