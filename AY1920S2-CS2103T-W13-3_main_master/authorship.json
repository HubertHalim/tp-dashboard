[
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.storage.JsonCourseListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.storage.JsonProfileListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.storage.ProfileListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    protected CourseManager courseManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    protected ModuleManager moduleManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    protected ProfileManager profileManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        //AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        //storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ProfileListStorage profiles \u003d new JsonProfileListStorage(userPrefs.getProfileListFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        storage \u003d new StorageManager(profiles, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        //model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profileManager \u003d initProfileManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        courseManager \u003d initCourseManager(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        moduleManager \u003d initModuleManager(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        logic \u003d new LogicManager(profileManager, storage, courseManager, moduleManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Returns a {@code CourseManager} with the data from {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * An empty course list will be used instead if a course list is not found at"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * {@code userPrefs.getModuleListFilePath()} or errors occur when reading the module list at that location."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ModuleManager initModuleManager(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        JsonModuleListStorage modules \u003d new JsonModuleListStorage(userPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleManager moduleManager;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Optional\u003cModuleList\u003e moduleListOptional \u003d modules.readModuleList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ModuleList moduleList \u003d moduleListOptional.get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                moduleManager \u003d new ModuleManager(moduleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleManager;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Returns a {@code ModuleManager} with the data from {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * An empty module list will be used instead if a module list is not found at"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * {@code userPrefs.getModuleListFilePath()} or errors occur when reading the module list at that location."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private CourseManager initCourseManager(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        JsonCourseListStorage modules \u003d new JsonCourseListStorage(userPrefs.getCourseListFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        CourseManager courseManager;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            Optional\u003cCourseList\u003e courseListOptional \u003d modules.readCourseList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (!courseListOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty CourseList\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                courseManager \u003d new CourseManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                CourseList courseList \u003d courseListOptional.get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                courseManager \u003d new CourseManager(courseList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CourseList\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            courseManager \u003d new CourseManager();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseManager;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns a {@code ProfileManager} with the data from {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * An empty profile list will be used instead if a profile list is not found at"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * {@code userPrefs.getProfileListFilePath()} or errors occur when reading the profile list at that location."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ProfileManager initProfileManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Optional\u003cProfileList\u003e profileListOptional;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ProfileList initialData;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            profileListOptional \u003d storage.readProfileList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (!profileListOptional.isPresent()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ProfileList\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                initialData \u003d new ProfileList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                initialData \u003d profileListOptional.get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ProfileList\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            initialData \u003d new ProfileList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProfileList\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            initialData \u003d new ProfileList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new ProfileManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Using default user prefs\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        logger.info(\"Starting MODdy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            storage.saveUserPrefs(profileManager.getUserPrefs());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 66,
      "gyant6": 36,
      "-": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_INVALID_COURSE \u003d \"Error: This course is invalid or unavailable\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_INVALID_COURSE_FOCUS_AREA \u003d \"Error: This focus area is not available\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Error: This module does not exist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The profile index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Error: No modules have been added to this semester\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_EMPTY_PROFILE_LIST \u003d \"Error: No profile has been created\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_MISSING_COURSE \u003d \"Error: Please input a course name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_MISSING_COURSE_FOCUS_AREA \u003d \"Error: Please input a focus area\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE \u003d \"Error: Please input a module code\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_MISSING_SEMESTER \u003d \"Error: Please input a semester\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_MISSING_NAME \u003d \"Error: Please input a name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String MESSAGE_MISSING_FOCUS_AREA \u003d \"Error: Please input a focus area\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 7,
      "joycelynteo": 1,
      "gyant6": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Reads file packaged in jar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static String readFromFileStream(String file) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        InputStream inputStream \u003d MainApp.class.getResourceAsStream(file);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        StringBuilder responseStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (inputStream !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            BufferedReader streamReader \u003d new BufferedReader("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new InputStreamReader(inputStream, \"UTF-8\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String inputStr;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            while ((inputStr \u003d streamReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                responseStrBuilder.append(inputStr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return responseStrBuilder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 23,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFileStream("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // We must make sure that the modulesPrereq file exists"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        //if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        /*if (!(new File(filePath)).exists()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            jsonFile \u003d fromJsonString(FileUtil.readFromFileStream(filePath), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 30,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, DateTimeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    ProfileList getProfileList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ObservableList\u003cProfile\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    ObservableList\u003cDeadline\u003e getFilteredDeadlineList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Path getProfileListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    Optional\u003cObject\u003e getDisplayedView();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    ProfileManager getProfileManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 10,
      "chanckben": 5,
      "joycelynteo": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.ModdyParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final ProfileManager profileManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private final ModdyParser moddyParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final CourseManager courseManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final ModuleManager moduleManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public LogicManager(ProfileManager profileManager, Storage storage, CourseManager courseManager,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                        ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.profileManager \u003d profileManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseManager \u003d courseManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        moddyParser \u003d new ModdyParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, DateTimeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //logging, safe to ignore"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //parse user input from String to a Command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Command command \u003d moddyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //executes the Command and stores the result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        commandResult \u003d command.execute(profileManager, courseManager, moduleManager);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            //can assume that previous line of code modifies model in some way"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            //since it is being stored here"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            //storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            storage.saveProfileList(profileManager.getProfileList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileList getProfileList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return profileManager.getProfileList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public ObservableList\u003cProfile\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return profileManager.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return profileManager.getProfileListFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return profileManager.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profileManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (profileManager.getFilteredPersonList().size() \u003d\u003d 1) { //profile exists"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (profileManager.getFirstProfile().getCurModules() !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileManager.loadDeadlines();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return profileManager.getSortedDeadlineList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Optional\u003cObject\u003e getDisplayedView() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return profileManager.getDisplayedView();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ProfileManager getProfileManager() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return profileManager;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 19,
      "chanckben": 11,
      "joycelynteo": 8,
      "wanxuanong": 5,
      "gyant6": 21,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_PROFILE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Personal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Adds a profile to the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module or task to the module.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_YEAR + \"SEMESTER \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_TASK + \"TASK) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_DEADLINE + \"DEADLINE) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_YEAR + \"4 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_TASK + \"assignment) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_DEADLINE + \"2020-03-16 23:59) \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_ADD_SUCCESS \u003d \"New Module added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Existing module updated: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_DEADLINE_INVALID_SEMESTER \u003d \"Error: You can only add tasks to modules that \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"are already added in the current semester\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Error: Module already exists as %1$s, \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            + \"please specify specify name and deadline if you would like to add a task\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_UNFULFILLED_PREREQS \u003d \"NOTE: You may not have fulfilled the prerequisites of \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"%1$s before semester %2$s\\nPrerequisites: %3$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final ModuleCode toAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private int addSemester;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String addGrade;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String addTask;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String addDeadlineString;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public AddCommand(ModuleCode moduleCode, int semester, String grade,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                      String task, String deadlineString) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        toAdd \u003d moduleCode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        addSemester \u003d semester;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (grade !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            addGrade \u003d grade;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (task !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            addTask \u003d task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (deadlineString !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            addDeadlineString \u003d deadlineString;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!profileManager.hasOneProfile()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_PROFILE_LIST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        Profile profile \u003d profileManager.getFirstProfile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        boolean hasModule \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        Module moduleToAdd \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            // throws error if module code does not exist! DO NOT REMOVE!"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (moduleManager.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                moduleToAdd \u003d moduleManager.getModule(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        int semesterOfModule \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // Check whether this module has been added to Profile semester HashMap"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (ModuleList semesterList: profile.getSemModHashMap().values()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (Module moduleInSem: semesterList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                if (moduleToAdd.isSameModule(moduleInSem)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    hasModule \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    moduleToAdd \u003d moduleInSem;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    HashMap\u003cInteger, ModuleList\u003e hashMap \u003d profile.getSemModHashMap();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    semesterOfModule \u003d getKey(hashMap, semesterList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Personal personal;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (hasModule) { // Module already added to semester"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            personal \u003d moduleToAdd.getPersonal();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (addGrade \u003d\u003d null \u0026\u0026 addTask \u003d\u003d null \u0026\u0026 addDeadlineString \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        moduleToAdd.getPersonal().getStatus()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else { // Module does not exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (addSemester \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                throw new CommandException(\"Error: Please add this module to a semester first.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // Create Personal object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal \u003d new Personal();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int currentSemester \u003d profile.getCurrentSemester();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (addGrade !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.setGrade(addGrade);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (addTask !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // Check if the deadline is added to a module in the current semester"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (semesterOfModule !\u003d currentSemester \u0026\u0026 addSemester !\u003d currentSemester) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                //throw new CommandException(MESSAGE_DEADLINE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (hasModule \u0026\u0026 semesterOfModule !\u003d currentSemester) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                // This module has been added but it is not in current semester"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new CommandException(MESSAGE_DEADLINE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (!hasModule \u0026\u0026 addSemester !\u003d currentSemester) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                 This module has not been added anywhere"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                 and semester given by user does not match current semester"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new CommandException(MESSAGE_DEADLINE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            String moduleCode \u003d toAdd.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (addDeadlineString !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                String date \u003d addDeadlineString.split(\" \")[0];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                String time \u003d addDeadlineString.split(\" \")[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    deadline \u003d new Deadline(moduleCode, addTask, date, time);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    throw new CommandException(\"Invalid date or time! Try: YYYY-MM-DD HH:mm\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                deadline \u003d new Deadline(moduleCode, addTask);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.addDeadline(deadline);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            profileManager.addDeadline(deadline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Set the status of the module"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (addSemester \u003c currentSemester) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.setStatus(\"completed\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (addSemester \u003d\u003d currentSemester) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.setStatus(\"in progress\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.setStatus(\"not taken\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        moduleToAdd.setPersonal(personal);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        String messageShown;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!hasModule) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            profile.addModule(addSemester, moduleToAdd);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // Check if prerequisites of the module have been fulfilled"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (moduleToAdd.getPrereqTreeNode() !\u003d null \u0026\u0026 !moduleToAdd.getPrereqTreeNode()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    .hasFulfilledPrereqs(profile.getAllModuleCodesBefore(addSemester))) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                messageShown \u003d String.format(MESSAGE_UNFULFILLED_PREREQS, toAdd, addSemester, moduleToAdd.getPrereqs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                messageShown \u003d MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            profileManager.setDisplayedView(profile);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            profile.updateCap();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return new CommandResult(String.format(messageShown, toAdd), true);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            messageShown \u003d MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profile.updateCap();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(String.format(messageShown, toAdd), false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Returns key of the given value"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public \u003cK, V\u003e K getKey(Map\u003cK, V\u003e map, V value) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (Map.Entry\u003cK, V\u003e entry : map.entrySet()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (entry.getValue().equals(value)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                return entry.getKey();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 90,
      "jadetayy": 9,
      "joycelynteo": 14,
      "wanxuanong": 4,
      "gyant6": 71,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Profile list has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profileManager.setProfileList(new ProfileList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profileManager.clearDeadlineList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileManager.setDisplayedView((Profile) null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 2,
      "jadetayy": 3,
      "gyant6": 11,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param profileManager {@code ProfileManager}, CourseManager {@code courseManager},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *                                             ModuleManager {@code moduleManager}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *                                             which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws ParseException If user supplies an invalid Course, CourseFocusArea or ModuleCode"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public abstract CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                          ModuleManager moduleManager) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 10,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /** The application should show specific command. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final boolean showCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.showCommand \u003d showCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this(feedbackToUser, false, false, showCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean isShowCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return showCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u0026\u0026 showCommand \u003d\u003d otherCommandResult.showCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 14,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_PROFILE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Deletes a profile identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \": Deletes the profile identified by the name used in the displayed profile list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + PREFIX_NAME + \"NAME) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + PREFIX_MODULE + \"MODULE) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + PREFIX_TASK + \"TASK) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_TASK + \"assignment\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Profile: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"Deleted Deadline: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_FAILURE \u003d \"Unable to delete task: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_NOT_TAKING_MODULE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            \"User is currently not taking a module with module code %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final Name deleteName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final ModuleCode deleteModuleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final Deadline deleteDeadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Creates a delete command to delete the profile with name {@code name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public DeleteCommand(Name name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteName \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteModuleCode \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteDeadline \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Creates a delete command to delete the module with module code {@code moduleCode} in the current profile."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public DeleteCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteName \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteDeadline \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Creates a delete command to delete the deadline with description {@code deadline}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * of the module with module code {@code moduleCode} of the current profile."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public DeleteCommand(ModuleCode moduleCode, Deadline deadline) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteDeadline \u003d deadline;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deleteName \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Deleting a user profile"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (deleteName !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (profileManager.hasProfile(deleteName)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                Profile profileToDelete \u003d profileManager.getProfile(deleteName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileManager.deletePerson(profileToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileManager.setProfileList(new ProfileList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileManager.clearDeadlineList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, profileToDelete), false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new CommandException(\"Profile with name \" + deleteName + \" does not exist!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (deleteModuleCode !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (!profileManager.hasOneProfile()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new CommandException(MESSAGE_EMPTY_PROFILE_LIST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            Profile profile \u003d profileManager.getFirstProfile(); // To edit when dealing with multiple profiles"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (!profile.hasModule(deleteModuleCode)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOT_TAKING_MODULE, deleteModuleCode.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (deleteDeadline \u003d\u003d null) { // Deleting a module"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    profile.deleteModule(deleteModuleCode);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    profileManager.deleteModuleDeadlines(deleteModuleCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    profile.updateCap();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    profileManager.setDisplayedView(profile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NOT_TAKING_MODULE, deleteModuleCode.toString()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, deleteModuleCode), true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else { // Deleting a deadline/task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    profile.getModule(deleteModuleCode).deleteDeadline(deleteDeadline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    profileManager.deleteDeadline(deleteDeadline); //delete from observablelist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NOT_TAKING_MODULE, deleteModuleCode.toString()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                } catch (DeadlineNotFoundException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_DELETE_DEADLINE_FAILURE, deleteDeadline));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DELETE_DEADLINE_SUCCESS, deleteDeadline), false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new CommandException(\"Please ensure that either a profile name or a module code has been entered\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (other \u003d\u003d this \u0026\u0026 other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        DeleteCommand command \u003d ((DeleteCommand) other);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        boolean sameName \u003d (deleteName \u003d\u003d null \u0026\u0026 command.deleteName \u003d\u003d null)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || ((deleteName !\u003d null) \u0026\u0026 this.deleteName.equals(command.deleteName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        boolean sameModuleCode \u003d (deleteModuleCode \u003d\u003d null \u0026\u0026 command.deleteModuleCode \u003d\u003d null)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || ((deleteModuleCode !\u003d null) \u0026\u0026 this.deleteModuleCode.equals(command.deleteModuleCode));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        boolean sameDeadline \u003d (deleteDeadline \u003d\u003d null \u0026\u0026 command.deleteDeadline \u003d\u003d null)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || ((deleteDeadline !\u003d null) \u0026\u0026 this.deleteDeadline.equals(command.deleteDeadline));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return sameName \u0026\u0026 sameModuleCode \u0026\u0026 sameDeadline;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 89,
      "jadetayy": 5,
      "joycelynteo": 3,
      "gyant6": 23,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Grade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Edits Profile or Module specified by user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \": Edits a profile or module specified by user.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Parameters to edit a profile: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_COURSE_NAME + \"COURSE) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + CliSyntax.PREFIX_YEAR + \"CURRENT_SEMESTER) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_FOCUS_AREA + \"FOCUS_AREA) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_NAME + \"John \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_COURSE_NAME + \"Computer Science) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + CliSyntax.PREFIX_YEAR + \"4) \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_FOCUS_AREA + \"Algorithms \u0026 Theory) \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Parameters to edit a module: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + PREFIX_YEAR + \"SEMESTER) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_GRADE + \"GRADE) \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(\" + PREFIX_YEAR + \"4) \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"(\" + PREFIX_GRADE + \"A+) \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_EDIT_PROFILE_SUCCESS \u003d \"Edited Profile: %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private boolean toEditProfile \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private Name profileName \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private CourseName courseName \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private int updatedSemester \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String focusAreaString \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private FocusArea focusArea \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private boolean editModule \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private int editSemester \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String grade \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String oldTask \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String newTask \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String newDeadlineString \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private int inSemester \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public EditCommand(Name name, CourseName courseName, int updatedSemester, String focusAreaString) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        toEditProfile \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.profileName \u003d name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.updatedSemester \u003d updatedSemester;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.focusAreaString \u003d focusAreaString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public EditCommand(ModuleCode moduleCode, int editSemester, String grade, String oldTask, String newTask,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                       String newDeadline) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        editModule \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.editSemester \u003d editSemester;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.oldTask \u003d oldTask;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.newDeadlineString \u003d newDeadline;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        List\u003cProfile\u003e lastShownList \u003d profileManager.getFilteredPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Profile profileToEdit;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            profileToEdit \u003d lastShownList.get(0); //accessing only first profile in list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new CommandException(\"Error: There is no existing profile.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (editModule) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            HashMap\u003cInteger, ModuleList\u003e hashMap \u003d profileToEdit.getSemModHashMap();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (hashMap.isEmpty()) { // No modules have been added to any semester at all"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                throw new CommandException(\"No module data has been added to any semesters.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            // Checks if module has been added to any semesters before"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            Module module \u003d moduleManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            Module existingModule \u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            int oldSemester \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (ModuleList moduleList: hashMap.values()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                for (Module moduleItr: moduleList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    if (module.isSameModule(moduleItr)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                        existingModule \u003d moduleItr;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                        oldSemester \u003d getKey(hashMap, moduleList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (existingModule \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                throw new CommandException(\"This module has not been added before.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (grade !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                int currentUserSemester \u003d profileToEdit.getCurrentSemester();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                if (oldSemester \u003e currentUserSemester) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    throw new CommandException(\"You cannot add a grade to future semesters!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                if (!Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    throw new CommandException(\"Error: Invalid Grade.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                existingModule.getPersonal().setGrade(grade);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileManager.setDisplayedView(profileToEdit);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileToEdit.updateCap();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, moduleCode), true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (oldSemester !\u003d 0 \u0026\u0026 editSemester !\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    hashMap.get(oldSemester).removeModuleWithModuleCode(moduleCode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    throw new CommandException(\"Error deleting existing module.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileToEdit.addModule(editSemester, existingModule);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                updateStatus(profileToEdit);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            Deadline oldDeadline \u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            Deadline newDeadline \u003d null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    newDeadline \u003d existingModule.getDeadlineList().getTask(oldTask);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    oldDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    newDeadline.setDescription(newTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    profileManager.replaceDeadline(oldDeadline, newDeadline);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    throw new CommandException(\"Error: Deadline does not exist\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (newDeadlineString !\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                newDeadline \u003d existingModule.getDeadlineList().getTask(oldTask);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                oldDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                String date \u003d newDeadlineString.split(\" \")[0];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                String time \u003d newDeadlineString.split(\" \")[1];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    newDeadline.setDateTime(date, time);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    newDeadline.addTag();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    profileManager.replaceDeadline(oldDeadline, newDeadline);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    throw new CommandException(\"Invalid date or time!\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, moduleCode), false);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else if (toEditProfile) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            if (profileName !\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                profileToEdit.setName(profileName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (courseName !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                profileToEdit.setCourse(courseName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                // If focusArea is not edited, make sure old focusArea is valid for the new course"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                if (focusAreaString \u003d\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    FocusArea oldFocusArea \u003d profileToEdit.getFocusArea();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    if (!oldFocusArea.isValid(courseName, oldFocusArea.toString())) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                        focusAreaString \u003d \"UNDECIDED\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (updatedSemester !\u003d 0) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                profileToEdit.setCurrentSemester(updatedSemester);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                updateStatus(profileToEdit);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileManager.deleteDeadlineList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (focusAreaString !\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                CourseName courseName \u003d profileToEdit.getCourseName();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    focusArea \u003d ParserUtil.parseFocusArea(courseName, focusAreaString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                profileToEdit.setFocusArea(focusArea);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            Profile editedPerson \u003d createEditedPerson(profileToEdit);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            profileManager.setPerson(profileToEdit, editedPerson);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            profileManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PROFILE_SUCCESS, editedPerson.getName()), false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new CommandException(\"Error: Edit Command cannot be executed\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static Profile createEditedPerson(Profile person) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assert person !\u003d null;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns key of the given value"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public \u003cK, V\u003e K getKey(Map\u003cK, V\u003e map, V value) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (Map.Entry\u003cK, V\u003e entry : map.entrySet()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (entry.getValue().equals(value)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                return entry.getKey();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Updates statuses of all modules in the Profile"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private void updateStatus(Profile profileToEdit) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        int currentSemester \u003d profileToEdit.getCurrentSemester();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        HashMap\u003cInteger, ModuleList\u003e hashMap \u003d profileToEdit.getSemModHashMap();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (ModuleList list: hashMap.values()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            int semester \u003d getKey(hashMap, list);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            for (Module moduleItr: list) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                if (semester \u003c currentSemester) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    moduleItr.getPersonal().setStatus(\"completed\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } else if (semester \u003d\u003d currentSemester) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    moduleItr.getPersonal().setStatus(\"in progress\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    moduleItr.getPersonal().setStatus(\"not taken\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 6,
      "jadetayy": 15,
      "joycelynteo": 140,
      "wanxuanong": 14,
      "gyant6": 56,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "gyant6": 11,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "gyant6": 11,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static final String MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                 ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (profileManager.getDisplayedView().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return new CommandResult(MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileManager.setDisplayedView((Profile) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Creates a new profile."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class NewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new profile. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + PREFIX_COURSE_NAME + \"COURSE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_YEAR + \"YEAR.SEMESTER\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + PREFIX_COURSE_NAME + \"Computer Science \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + PREFIX_YEAR + \"2.2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New profile created: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROFILE \u003d \"Error: Profile with name %1$s exists. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            + \"You can only have one profile.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private final Profile toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public NewCommand(Profile profile) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        toAdd \u003d profile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            profileManager.addPerson(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PROFILE, toAdd.getName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                || (other instanceof NewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((NewCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 9,
      "jadetayy": 1,
      "joycelynteo": 41,
      "wanxuanong": 1,
      "gyant6": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_PROFILE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Displays details requested by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": The following items can be shown:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Course, with \" + PREFIX_COURSE_NAME + \"COURSE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Course Focus Area, with \" + PREFIX_FOCUS_AREA + \"FOCUS_AREA\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Module, with \" + PREFIX_MODULE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"Modules taken in a semester, with \" + PREFIX_YEAR + \"SEMESTER_NUMBER\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NAME \u003d \"Here is your academic overview: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MODULE_LIST \u003d \"All modules taken in semester are shown: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            + \"\\nEnter [show m/MODULE_CODE] to find out more about the module\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MODULE \u003d \"The details for this module are show below:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOCUS_AREA \u003d \"Modules in this focus area are shown below: \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_COURSE \u003d \"Course requirements for this course are show below: \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final Object toParse;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Object toShow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Creates a ShowCommand to show the specified object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param itemParsed - Can be any object from this list: (Course,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *               CourseFocusArea, Module, List of Modules in a semester)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public ShowCommand(Name name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.toParse \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ShowCommand(Year year) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.toParse \u003d year;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ShowCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.toParse \u003d moduleCode;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ShowCommand(String focusArea) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(focusArea);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.toParse \u003d focusArea;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public ShowCommand(CourseName courseName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.toParse \u003d courseName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CommandResult execute(ProfileManager profileManager, CourseManager courseManager,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 ModuleManager moduleManager) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(profileManager);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(moduleManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            if (toParse instanceof Name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                message \u003d MESSAGE_SUCCESS_NAME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                if (profileManager.getFilteredPersonList().size() !\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    Profile profile \u003d profileManager.getFirstProfile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    if ((profile.getName().toString().toLowerCase()).equals(toParse.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                        toShow \u003d profile;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                        profileManager.setDisplayedView((Profile) toShow);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                        throw new CommandException(\"Profile with name does not exist.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    throw new CommandException(\"Profile does not exist.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } else if (toParse instanceof Year) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (!profileManager.hasOneProfile()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    throw new CommandException(MESSAGE_EMPTY_PROFILE_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                message \u003d MESSAGE_SUCCESS_MODULE_LIST;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                Integer semester \u003d ((Year) toParse).getSemester();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                toShow \u003d profileManager.getFirstProfile().getModules(semester);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                FilteredList\u003cModule\u003e filteredModules \u003d new FilteredList\u003c\u003e(((ModuleList) toShow).getModuleList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileManager.setDisplayedView(filteredModules);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            } else if (toParse instanceof ModuleCode) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                message \u003d MESSAGE_SUCCESS_MODULE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                ModuleCode moduleCode \u003d (ModuleCode) toParse;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (!moduleManager.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                toShow \u003d moduleManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileManager.setDisplayedView((Module) toShow);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            } else if (toParse instanceof String) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                message \u003d MESSAGE_SUCCESS_FOCUS_AREA;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                String focusArea \u003d (String) toParse;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                toShow \u003d courseManager.getCourseFocusArea(focusArea);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                profileManager.setDisplayedView((CourseFocusArea) toShow);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            } else if (toParse instanceof CourseName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                message \u003d MESSAGE_SUCCESS_COURSE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                CourseName courseName \u003d (CourseName) toParse;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                toShow \u003d courseManager.getCourse(courseName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                profileManager.setDisplayedView((Course) toShow);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return new CommandResult(String.format(message, toShow), true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                \u0026\u0026 toParse.equals(((ShowCommand) other).toParse));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 29,
      "jadetayy": 22,
      "wanxuanong": 68,
      "gyant6": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public AddCommand parse(String args) throws ParseException, DateTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_YEAR, PREFIX_GRADE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                        PREFIX_TASK, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // To check if Module argument exists since it is compulsory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // Create module object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        String moduleCodeString \u003d argMultimap.getValue(PREFIX_MODULE).get().trim().toUpperCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(moduleCodeString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String grade \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String task \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String deadlineString \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        int intSemester \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            intSemester \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()).getSemester();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADE)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get().toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_DEADLINE)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            task \u003d argMultimap.getValue(PREFIX_TASK).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            deadlineString \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TASK)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            task \u003d argMultimap.getValue(PREFIX_TASK).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new AddCommand(moduleCode, intSemester, grade, task, deadlineString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 13,
      "joycelynteo": 18,
      "gyant6": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Prefix PREFIX_NEW_TASK \u003d new Prefix(\"nt/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final Prefix PREFIX_COURSE_NAME \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final Prefix PREFIX_FOCUS_AREA \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 1,
      "joycelynteo": 6,
      "gyant6": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MODULE, PREFIX_TASK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        Deadline task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Delete profile"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String strName \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            name \u003d ParserUtil.parseName(strName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new DeleteCommand(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Delete deadline/task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TASK)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String strModuleCode \u003d argMultimap.getValue(PREFIX_MODULE).get().trim().toUpperCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(strModuleCode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String strDeadline \u003d argMultimap.getValue(PREFIX_TASK).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            task \u003d new Deadline(strModuleCode, strDeadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new DeleteCommand(moduleCode, task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Delete module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String strModuleCode \u003d argMultimap.getValue(PREFIX_MODULE).get().trim().toUpperCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(strModuleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new DeleteCommand(moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 40,
      "jadetayy": 1,
      "joycelynteo": 1,
      "wanxuanong": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Parses input arguments and creates a new NewCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * and returns a EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public EditCommand parse(String args) throws ParseException, DateTimeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COURSE_NAME, PREFIX_YEAR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        PREFIX_FOCUS_AREA, PREFIX_MODULE, PREFIX_GRADE, PREFIX_TASK, PREFIX_NEW_TASK,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                        PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) { // EDIT MODULE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_YEAR) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_GRADE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_DEADLINE)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String moduleCodeString \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            moduleCodeString \u003d moduleCodeString.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            moduleCodeString \u003d moduleCodeString.toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(moduleCodeString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            int intSemester \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String grade \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String oldTask \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String newTask \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String newDeadline \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                intSemester \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()).getSemester();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_GRADE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                grade \u003d argMultimap.getValue(PREFIX_GRADE).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            // Reject when deadline is given but task name not given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TASK)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                throw new ParseException(\"Error: Please provide the name of the task you are trying to edit.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_TASK)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                oldTask \u003d argMultimap.getValue(PREFIX_TASK).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                if (!arePrefixesPresent(argMultimap, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                        \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NEW_TASK)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    throw new ParseException(\"Error: Please specify a new task name or deadline to be edited.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                if (arePrefixesPresent(argMultimap, PREFIX_NEW_TASK)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    newTask \u003d argMultimap.getValue(PREFIX_NEW_TASK).get().trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                if (arePrefixesPresent(argMultimap, PREFIX_DEADLINE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    newDeadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return new EditCommand(moduleCode, intSemester, grade, oldTask, newTask, newDeadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else { // EDIT PROFILE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_COURSE_NAME)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_YEAR)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_FOCUS_AREA)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            Name name \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            CourseName courseName \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            int currentSemester \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String focusArea \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_COURSE_NAME)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                courseName \u003d ParserUtil.parseCourseName(argMultimap.getValue(PREFIX_COURSE_NAME).get().toUpperCase());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                currentSemester \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        .getSemester();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_FOCUS_AREA)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                focusArea \u003d argMultimap.getValue(PREFIX_FOCUS_AREA).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return new EditCommand(name, courseName, currentSemester, focusArea);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 10,
      "jadetayy": 2,
      "joycelynteo": 71,
      "wanxuanong": 1,
      "gyant6": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModdyParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class ModdyParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, DateTimeException, CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        case NewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return new NewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 5,
      "joycelynteo": 7,
      "wanxuanong": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Parses input arguments and creates a new Profile Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class NewCommandParser implements Parser\u003cNewCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static final String MESSAGE_PROFILE_LIST_FULL \u003d \"Unable to create new profile as there is\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "           + \"an existing profile. Delete to add new profile.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * and returns a NewCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public NewCommand parse(String args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        ProfileList pL \u003d new ProfileList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (pL.getProfileList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new CommandException(MESSAGE_PROFILE_LIST_FULL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COURSE_NAME, PREFIX_YEAR,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                        PREFIX_FOCUS_AREA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COURSE_NAME, PREFIX_YEAR)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        CourseName courseName \u003d ParserUtil.parseCourseName(argMultimap.getValue(PREFIX_COURSE_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int currentSemester \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                .getSemester();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        FocusArea focusArea \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_FOCUS_AREA)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            focusArea \u003d ParserUtil.parseFocusArea(courseName, argMultimap.getValue(PREFIX_FOCUS_AREA).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            focusArea \u003d ParserUtil.parseFocusArea(courseName, \"UNDECIDED\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Profile profile \u003d new Profile(name, courseName, currentSemester, focusArea);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return new NewCommand(profile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 8,
      "jadetayy": 12,
      "joycelynteo": 52,
      "gyant6": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    T parse(String userInput) throws ParseException, DateTimeException, CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 2,
      "joycelynteo": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_SEMESTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"Please enter the year in the form Y.S, where Y is the year \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(positive integer less than 10) and S is the semester (1 or 2).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String formattedName \u003d name.trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!Name.isValidName(formattedName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return new Name(formattedName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String formattedModuleCode \u003d moduleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (formattedModuleCode.equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_MODULE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!ModuleCode.isValidCode(formattedModuleCode)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return new ModuleCode(formattedModuleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Checks that input is an integer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Parses a {@code String year}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (year.equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_SEMESTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!Year.isValidCode(year)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Parses a {@code String grade}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static String parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return trimmedGrade;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Parses a {@code String deadline}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static String parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String[] dateTime \u003d trimmedDeadline.split(\" \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (dateTime.length \u003c 2 || !Deadline.isValidDeadline(dateTime[0], dateTime[1])) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return trimmedDeadline;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Parses a {@code String courseName} into a {@code CourseName}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code courseName} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static CourseName parseCourseName(String courseName) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        String trimmedCourseName \u003d courseName.trim().toUpperCase();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (trimmedCourseName.equals(\"\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_COURSE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!CourseName.isValid(trimmedCourseName)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COURSE, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new CourseName(trimmedCourseName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Parses a {@code String focusArea}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException if the given {@code focusArea} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static FocusArea parseFocusArea(CourseName courseName, String focusArea) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(focusArea);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String trimmedFocusArea \u003d focusArea.trim().toUpperCase();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (trimmedFocusArea.equals(\"\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!FocusArea.isValid(courseName, trimmedFocusArea)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COURSE_FOCUS_AREA, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return new FocusArea(trimmedFocusArea);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 69,
      "jadetayy": 12,
      "joycelynteo": 14,
      "gyant6": 8,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * and returns an ShowCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_YEAR, PREFIX_MODULE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                        PREFIX_FOCUS_AREA, PREFIX_COURSE_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Get Name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new ShowCommand(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Get Semester"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new ShowCommand(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Get Module"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new ShowCommand(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Get Focus Area"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_FOCUS_AREA)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            String focusArea \u003d argMultimap.getValue(PREFIX_FOCUS_AREA).get().toUpperCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (focusArea.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                throw new ParseException(MESSAGE_MISSING_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return new ShowCommand(focusArea); // returns String"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Get Course"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COURSE_NAME)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            CourseName courseName \u003d ParserUtil.parseCourseName("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    argMultimap.getValue(PREFIX_COURSE_NAME).get().toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return new ShowCommand(courseName); // returns CourseName"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jadetayy": 7,
      "chanckben": 6,
      "joycelynteo": 5,
      "wanxuanong": 52,
      "gyant6": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CourseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Creates a new CourseList object which contains Module objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class CourseList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private ArrayList\u003cCourse\u003e courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseList() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Adds a course to the course list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void addCourse(Course course) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        courseList.add(course);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Course getCourse(CourseName courseName) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (Course course : courseList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (course.getCourseName().equals(courseName)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                return course;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        throw new ParseException(\"Course does not exist\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseFocusArea getCourseFocusArea(String focusAreaName) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(focusAreaName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (Course course : courseList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                CourseFocusArea focusArea \u003d course.getCourseFocusArea(focusAreaName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                return focusArea;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 1,
      "gyant6": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CourseManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents the in-memory model of the course list data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class CourseManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private CourseList courseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseManager(CourseList courseList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(courseList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseList \u003d courseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this(new CourseList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Course getCourse(CourseName courseName) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseList.getCourse(courseName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseFocusArea getCourseFocusArea(String focusAreaName) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseList.getCourseFocusArea(focusAreaName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static CourseList getCourseList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 1,
      "gyant6": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    Predicate\u003cProfile\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Path getProfileListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void setProfileListFilePath(Path profileListFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void setProfileList(ProfileList profileList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    ProfileList getProfileList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns true if a profile with the same identity as {@code profile} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    boolean hasPerson(Profile profile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Deletes the given profile."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * The profile must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    void deletePerson(Profile target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Adds the given profile."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * {@code profile} must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    void addPerson(Profile profile);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Replaces the given profile {@code target} with {@code editedProfile}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * The profile identity of {@code editedProfile} must not be the same as another existing profile"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    void setPerson(Profile target, Profile editedProfile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered profile list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ObservableList\u003cProfile\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    ObservableList\u003cDeadline\u003e getSortedDeadlineList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Updates the filter of the filtered profile list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cProfile\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    boolean hasProfile(Name name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Profile getProfile(Name name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Profile getFirstProfile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void addDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void deleteDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void clearDeadlineList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void loadDeadlines();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void deleteModuleDeadlines(ModuleCode mc);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    Optional\u003cObject\u003e getDisplayedView();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void setDisplayedView(ObservableList\u003cModule\u003e toDisplay);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void setDisplayedView(Profile toDisplay);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void setDisplayedView(Module toDisplay);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void setDisplayedView(Course toDisplay);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    void setDisplayedView(CourseFocusArea toDisplay);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 30,
      "chanckben": 15,
      "joycelynteo": 18,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Creates a new ModuleList object which contains Module objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ObservableList\u003cModuleCode\u003e moduleCodes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ModuleList() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Adds a module to the module list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        moduleCodes.add(module.getModuleCode());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if a module with the same fields as {@code module} exists in the module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleList.contains(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if a module with the module code {@code moduleCode} exists in the module list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasModuleWithModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleCodes.contains(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns the module with module code {@code moduleCode} in the module list, if it exists."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException No module in the module list contains {@code moduleCode}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Module getModuleWithModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (Module mod: moduleList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (mod.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                return mod;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Code should not reach this line"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Removes the module with module code {@code moduleCode} in the module list, if it exists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws ParseException No module in the module list contains {@code moduleCode}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void removeModuleWithModuleCode(ModuleCode moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!hasModuleWithModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Module modToRemove \u003d getModuleWithModuleCode(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        moduleList.remove(modToRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        moduleCodes.remove(moduleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cModuleCode\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new ArrayList\u003c\u003e(moduleCodes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Stream\u003cModule\u003e stream() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleList.stream();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleList.iterator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        List\u003cString\u003e strModCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (ModuleCode moduleCode: moduleCodes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            strModCodes.add(moduleCode.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return String.join(\"\\n\", strModCodes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 95,
      "jadetayy": 5,
      "gyant6": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Represents the in-memory model of the module list data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private ModuleList moduleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ModuleManager(ModuleList moduleList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ModuleManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this(new ModuleList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return moduleList.hasModuleWithModuleCode(moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return moduleList.getModuleWithModuleCode(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 27,
      "joycelynteo": 1,
      "gyant6": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProfileList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Creates a new ProfileList object which contains Profile objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ProfileList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final ObservableList\u003cProfile\u003e profileList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileList() {};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Returns true if the list contains an equivalent profile as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean contains(Profile toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return profileList.stream().anyMatch(toCheck::isSameProfile);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Resets the existing data of this {@code ProfileList} with {@code newData}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void resetData(ProfileList profileList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(profileList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        setProfiles(profileList.getProfileList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Add {@code profile} to {@code ProfileList}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * {@code profile} must not exist in the profile list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void addProfile(Profile profile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (contains(profile)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.profileList.add(profile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ObservableList\u003cProfile\u003e getProfileList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return profileList; // TODO: Implement read-only version of profileList, similar to address book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Removes {@code key} from this {@code ProfileList}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * {@code key} must exist in the profile list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void deleteProfile(Profile profile) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!profileList.remove(profile)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Replaces the profile {@code target} in the list with {@code editedProfile}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * The profile identity of {@code editedProfile} must not be the same as another existing profile in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setProfile(Profile target, Profile editedProfile) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireAllNonNull(target, editedProfile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int index \u003d profileList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!target.isSameProfile(editedProfile) \u0026\u0026 contains(editedProfile)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileList.set(index, editedProfile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setProfiles(List\u003cProfile\u003e profiles) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireAllNonNull(profiles);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!personsAreUnique(profiles)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileList.setAll(profiles);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasProfileWithName(Name name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.profileList.stream().map(Profile::getName).anyMatch(x-\u003ex.equals(name));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Profile getProfileWithName(Name name) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Optional\u003cProfile\u003e p \u003d this.profileList.stream().filter(x-\u003ex.getName().equals(name)).findFirst();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!p.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new NoSuchElementException(\"None of the profiles contains the name \" + name.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return p.get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if {@code profiles} contains only unique profiles."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private boolean personsAreUnique(List\u003cProfile\u003e profiles) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (int i \u003d 0; i \u003c profiles.size() - 1; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (int j \u003d i + 1; j \u003c profiles.size(); j++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                if (profiles.get(i).isSameProfile(profiles.get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 70,
      "jadetayy": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProfileManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Represents the in-memory model of the profile list data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ProfileManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfileManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final ProfileList profileList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ObservableList\u003cDeadline\u003e deadlineList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final FilteredList\u003cProfile\u003e filteredProfiles;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private SortedList\u003cDeadline\u003e sortedDeadlines;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Optional\u003cObject\u003e displayedView \u003d Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileManager(ProfileList profileList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireAllNonNull(profileList, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + profileList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.profileList \u003d profileList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        filteredProfiles \u003d new FilteredList\u003c\u003e(profileList.getProfileList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        sortedDeadlines \u003d deadlineList.sorted(new DateTimeComparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this(new ProfileList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return userPrefs.getProfileListFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setProfileListFilePath(Path profileListFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(profileListFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        userPrefs.setProfileListFilePath(profileListFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setProfileList(ProfileList profileList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.profileList.resetData(profileList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileList getProfileList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasPerson(Profile profile) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList.hasProfileWithName(profile.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void deletePerson(Profile target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        profileList.deleteProfile(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void addPerson(Profile profile) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        profileList.addProfile(profile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setPerson(Profile target, Profile editedProfile) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireAllNonNull(target, editedProfile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        profileList.setProfile(target, editedProfile);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ObservableList\u003cProfile\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return filteredProfiles;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cProfile\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        filteredProfiles.setPredicate(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasProfile(Name name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList.hasProfileWithName(name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Profile getProfile(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList.getProfileWithName(name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasOneProfile() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList.getProfileList().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * To be used in the case of only one profile. Does not take into account the name of the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Consider temporarily storing the name of the current user in memory (when dealing with multiple profiles."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Profile getFirstProfile() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList.getProfileList().get(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getSortedDeadlineList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return sortedDeadlines;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void deleteDeadlineList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineList.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.deadlineList.add(deadline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void deleteDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Iterator\u003cDeadline\u003e iter \u003d this.deadlineList.iterator();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Boolean flag \u003d false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            Deadline dl \u003d iter.next();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (dl.getModuleCode().equals(deadline.getModuleCode())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u0026\u0026 dl.getDescription().equals(deadline.getDescription())) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                iter.remove();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!flag) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DeadlineNotFoundException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * To be used when deadline is edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void replaceDeadline(Deadline oldDeadline, Deadline newDeadline) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Iterator\u003cDeadline\u003e iter \u003d this.deadlineList.iterator();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Boolean flag \u003d false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            Deadline dl \u003d iter.next();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (dl.getModuleCode().equals(oldDeadline.getModuleCode())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    \u0026\u0026 dl.getDescription().equals(oldDeadline.getDescription())) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                iter.remove();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!flag) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new DeadlineNotFoundException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            this.deadlineList.add(newDeadline);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void clearDeadlineList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.deadlineList.clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void loadDeadlines() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.deadlineList.addAll(this.profileList.getProfileList().get(0).getDeadlines());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void deleteModuleDeadlines(ModuleCode mc) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Iterator\u003cDeadline\u003e iter \u003d this.deadlineList.iterator();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            Deadline dl \u003d iter.next();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (dl.getModuleCode().toString().equals(mc.toString())) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                iter.remove();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    //MODULE LIST VIEW"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Optional\u003cObject\u003e getDisplayedView() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.displayedView;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setDisplayedView(ObservableList\u003cModule\u003e toDisplay) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.displayedView \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setDisplayedView(Profile toDisplay) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.displayedView \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setDisplayedView(Module toDisplay) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.displayedView \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setDisplayedView(Course toDisplay) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.displayedView \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setDisplayedView(CourseFocusArea toDisplay) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.displayedView \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Comparator to compare date and time in Deadline object."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "class DateTimeComparator implements Comparator\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public int compare(Deadline d1, Deadline d2) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (d1.getDate() !\u003d null \u0026\u0026 d2.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (d1.getDate().equals(d2.getDate())) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return d1.getTime().compareTo(d2.getTime());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return d1.getDate().compareTo(d2.getDate());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return -2; //if no date/time, put it at the last"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 138,
      "jadetayy": 123,
      "joycelynteo": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ObservableList\u003cProfile\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String moduleListFilePath \u003d \"/data/modulesPrereq.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Path profileListFilePath \u003d Paths.get(\"data\", \"userProfiles.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String courseListFilePath \u003d \"/data/courses.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getCourseListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return courseListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getModuleListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileListFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setProfileListFilePath(Path profileListFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(profileListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.profileListFilePath \u003d profileListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 20,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/EmptyProfileListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Exception class to be invoked when a profile list is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class EmptyProfileListException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public EmptyProfileListException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Cap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Creates a Cumulative Average Point (CAP) class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Cap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Double cap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Double totalWeightage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Double totalCredits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Cap() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.cap \u003d 0.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.totalWeightage \u003d 0.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.totalCredits \u003d 0.0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Uses the latest ModuleList {@code ModuleList} to calculate the CAP"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * CAP is measured using this formula:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * CAP \u003d Sum (module grade point x modular credits for the module) / Sum (modular credits)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param semModHashMap"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void updateCap(HashMap\u003cInteger, ModuleList\u003e semModHashMap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(semModHashMap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        totalWeightage \u003d 0.0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        totalCredits \u003d 0.0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (ModuleList semesterList: semModHashMap.values()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (Module module: semesterList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                if (module.getGrade() !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    // Convert letter to double"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    String letterGrade \u003d module.getGrade();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    if (letterGradeNotApplicable(letterGrade)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                        continue; // skip this for loop"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    Double numGrade \u003d convertLetterGradeToNum(letterGrade);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    // Convert ModularCredits to Double"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    ModularCredits modularCredits \u003d module.getModularCredits();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    Double numCredits \u003d Double.valueOf(modularCredits.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    totalCredits +\u003d numCredits;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    Double weightage \u003d numGrade * numCredits;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    totalWeightage +\u003d weightage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        cap \u003d totalWeightage / totalCredits;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Checks if a grade should be counted towards CAP."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param letterGrade"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @return Returns true if grade is one of {S, U, CS, CU\"}, false otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private boolean letterGradeNotApplicable(String letterGrade) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(letterGrade);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        switch(letterGrade) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"S\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"U\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"CS\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"CU\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Converts a letter grade {@code letterGrade} to a Double object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param letterGrade String representation of a grade"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @return Returns the Double value of a grade"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Double convertLetterGradeToNum(String letterGrade) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(letterGrade);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        switch(letterGrade) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 5.0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 4.5;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 4.0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 3.5;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 3.0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 2.5;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 2.0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 1.5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 1.0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        default: // \"F\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (totalWeightage \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return \"No grades added\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\"); // Convert cap to 2 d.p."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return df.format(cap);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a Profile\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 1,
      "gyant6": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Tests that a {@code Profile}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cProfile\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public boolean test(Profile profile) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(profile.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 4,
      "gyant6": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SEMESTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a Profile in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private HashMap\u003cInteger, ModuleList\u003e semModHashMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private int currentSemester \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private FocusArea focusArea;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private CourseName courseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private Cap cap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public Profile(Name name, CourseName courseName, int currentSemester, FocusArea focusArea) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireAllNonNull(courseName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        requireAllNonNull(currentSemester);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.focusArea \u003d focusArea;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.semModHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.cap \u003d new Cap();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Adds a module to the hashmap with the key being the semester"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void addModule(Integer semester, Module module) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!semModHashMap.isEmpty() \u0026\u0026 semModHashMap.containsKey(semester)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            semModHashMap.get(semester).addModule(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            semModHashMap.put(semester, moduleList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int id \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (semModHashMap.containsKey(currentSemester)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            for (Module mod : semModHashMap.get(currentSemester)) { //for colourising module names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                mod.setTag(id++);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseName getCourseName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public int getCurrentSemester() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return currentSemester;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public FocusArea getFocusArea() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return focusArea;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String getFocusAreaString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return focusArea.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void setCourse(CourseName courseName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void setCurrentSemester(int currentSemester) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setFocusArea(FocusArea focusArea) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.focusArea \u003d focusArea;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public ModuleList getModules(Integer semester) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!semModHashMap.containsKey(semester)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semModHashMap.get(semester);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cModuleCode\u003e getAllModuleCodesBefore(int semester) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (int sem: semModHashMap.keySet()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (sem \u003c semester) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                moduleCodes.addAll(semModHashMap.get(sem).getModuleCodes());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            //moduleCodes.addAll(moduleList.getModuleCodes());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public HashMap\u003cInteger, ModuleList\u003e getAllModules() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semModHashMap;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Set\u003cMap.Entry\u003cInteger, ModuleList\u003e\u003e getMappings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semModHashMap.entrySet();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public HashMap\u003cInteger, ModuleList\u003e getSemModHashMap() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semModHashMap;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cDeadline\u003e getDeadlines() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        ModuleList modules \u003d semModHashMap.get(currentSemester); // Deadlines should only be from the current semester"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        List\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (Module module: modules) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            deadlineList.addAll(module.getDeadlines());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return deadlineList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void updateCap() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        cap.updateCap(semModHashMap);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Cap getCap() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ModuleList getCurModules() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semModHashMap.get(currentSemester);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public int getModuleSemester(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (int semester: semModHashMap.keySet()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (Module module: semModHashMap.get(semester)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return semester;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new NoSuchElementException(name.toString() + \" is not taking \" + moduleCode.toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (ModuleList moduleList: semModHashMap.values()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (Module module: moduleList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return module;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new ParseException(name.toString() + \" is not taking \" + moduleCode.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if a module with module code {@code moduleCode} exists in {@code moduleHash}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (ModuleList moduleList: semModHashMap.values()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (moduleList.hasModuleWithModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Deletes a module with module code {@code moduleCode}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void deleteModule(ModuleCode moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            int semester \u003d getModuleSemester(moduleCode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            semModHashMap.get(semester).removeModuleWithModuleCode(moduleCode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new ParseException(name.toString() + \" is not taking \" + moduleCode.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Returns key of the given value"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public \u003cK, V\u003e K getKey(Map\u003cK, V\u003e map, V value) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (Map.Entry\u003cK, V\u003e entry : map.entrySet()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            if (entry.getValue().equals(value)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                return entry.getKey();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean isSameProfile(Profile otherProfile) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (otherProfile \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return otherProfile !\u003d null"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                \u0026\u0026 otherProfile.getName().equals(getName());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (!(other instanceof Profile)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Profile otherProfile \u003d (Profile) other;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return otherProfile.getName().equals(getName());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 74,
      "jadetayy": 13,
      "joycelynteo": 52,
      "gyant6": 66,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * A profile is considered unique by comparing using {@code Profile#isSameProfile(Profile)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * updating of persons uses Profile#isSameProfile(Profile) for equality so as to ensure that the profile being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * or updated is unique in terms of identity in the UniquePersonList. However, the removal of a profile uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Profile#equals(Object) so as to ensure that the profile with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * @see Profile#isSameProfile(Profile)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class UniquePersonList implements Iterable\u003cProfile\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final ObservableList\u003cProfile\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final ObservableList\u003cProfile\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Returns true if the list contains an equivalent profile as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean contains(Profile toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProfile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Adds a profile to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * The profile must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void add(Profile toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Replaces the profile {@code target} in the list with {@code editedProfile}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * The profile identity of {@code editedProfile} must not be the same as another existing profile in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setPerson(Profile target, Profile editedProfile) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireAllNonNull(target, editedProfile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!target.isSameProfile(editedProfile) \u0026\u0026 contains(editedProfile)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        internalList.set(index, editedProfile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Removes the equivalent profile from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * The profile must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void remove(Profile toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Replaces the contents of this list with {@code profiles}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * {@code profiles} must not contain duplicate profiles."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setPersons(List\u003cProfile\u003e profiles) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requireAllNonNull(profiles);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!personsAreUnique(profiles)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        internalList.setAll(profiles);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ObservableList\u003cProfile\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Iterator\u003cProfile\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Returns true if {@code profiles} contains only unique profiles."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private boolean personsAreUnique(List\u003cProfile\u003e profiles) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (int i \u003d 0; i \u003c profiles.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c profiles.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                if (profiles.get(i).isSameProfile(profiles.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/Year.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "// To be implemented"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a profile\u0027s year of study in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the year in the form Y.S, where Y is the year \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"(positive integer less than 10) and S is the semester (1 or 2).\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALIDATION_REGEXES \u003d \"[1-9][.][1-2]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public final int semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int intYear \u003d Integer.parseInt(year.split(\"\\\\.\")[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int intSem \u003d Integer.parseInt(year.split(\"\\\\.\")[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        semester \u003d 2 * (intYear - 1) + intSem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidCode(String year) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return year.matches(VALIDATION_REGEXES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                \u0026\u0026 (semester \u003d\u003d ((Year) other).semester)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 36,
      "joycelynteo": 1,
      "gyant6": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/AcceptedCourses.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Accepted courses stored as enumerations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public enum AcceptedCourses {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMPUTER_SCIENCE(\"COMPUTER SCIENCE\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    BUSINESS_ANALYTICS(\"BUSINESS ANALYTICS\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    INFORMATION_SYSTEMS(\"INFORMATION SYSTEMS\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    INFORMATION_SECURITY(\"INFORMATION SECURITY\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    COMPUTER_ENGINEERING(\"COMPUTER ENGINEERING\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    AcceptedCourses(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns true if enum contains given course."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static boolean contains(String course) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (AcceptedCourses c: AcceptedCourses.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (c.name.equals(course)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 32,
      "wanxuanong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/AcceptedFocusArea.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Accepted specialisations stored as enumerations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public enum AcceptedFocusArea {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // UNDECIDED"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMPUTER_SCIENCE_UNDECIDED(new CourseName(\"COMPUTER SCIENCE\"), \"UNDECIDED\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    BUSINESS_ANALYTICS_UNDECIDED(new CourseName(\"BUSINESS ANALYTICS\"), \"UNDECIDED\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    INFORMATION_SYSTEMS_UNDECIDED(new CourseName(\"INFORMATION SYSTEMS\"), \"UNDECIDED\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    INFORMATION_SECURITY_UNDECIDED(new CourseName(\"INFORMATION SYSTEMS\"), \"UNDECIDED\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMPUTER_ENGINEERING_UNDECIDED(new CourseName(\"COMPUTER ENGINEERING\"), \"UNDECIDED\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // COMPUTER SCIENCE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ALGORITHMS_AND_THEORY(new CourseName(\"COMPUTER SCIENCE\"), \"ALGORITHMS AND THEORY\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ARTIFICIAL_INTELLIGENCE(new CourseName(\"COMPUTER SCIENCE\"), \"ARTIFICIAL INTELLIGENCE\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMPUTER_GRAPHICS_AND_GAMES(new CourseName(\"COMPUTER SCIENCE\"), \"COMPUTER GRAPHICS AND GAMES\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMPUTER_SECURITY(new CourseName(\"COMPUTER SCIENCE\"), \"COMPUTER SECURITY\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    DATABASE_SYSTEMS(new CourseName(\"COMPUTER SCIENCE\"), \"DATABASE SYSTEMS\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    MULTIMEDIA_INFORMATION_RETRIEVAL(new CourseName(\"COMPUTER SCIENCE\"), \"MULTIMEDIA INFORMATION RETRIEVAL\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    NETWORKING_AND_DISTRIBUTED_SYSTEMS(new CourseName(\"COMPUTER SCIENCE\"), \"NETWORKING AND DISTRIBUTED SYSTEMS\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    PARALLEL_COMPUTING(new CourseName(\"COMPUTER SCIENCE\"), \"PARALLEL COMPUTING\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    PROGRAMMING_LANGUAGES(new CourseName(\"COMPUTER SCIENCE\"), \"PROGRAMMING LANGUAGES\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    SOFTWARE_ENGINEERING(new CourseName(\"COMPUTER SCIENCE\"), \"SOFTWARE ENGINEERING\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // BUSINESS ANALYTICS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    FINANCIAL_ANALYTICS(new CourseName(\"BUSINESS ANALYTICS\"), \"FINANCIAL ANALYTICS\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    MARKETING_ANALYTICS(new CourseName(\"BUSINESS ANALYTICS\"), \"MARKETING ANALYTICS\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // INFORMATION SYSTEMS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    FINANCIAL_TECHNOLOGY(new CourseName(\"INFORMATION SYSTEMS\"), \"FINANCIAL TECHNOLOGY\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    DIGITAL_INNOVATION(new CourseName(\"INFORMATION SYSTEMS\"), \"DIGITAL INNOVATION\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    ELECTRONIC_COMMERCE(new CourseName(\"INFORMATION SYSTEMS\"), \"ELECTRONIC COMMERCE\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // INFORMATION SECURITY HAS NONE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // COMPUTER ENGINEERING"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    COMMUNICATIONS_AND_NETWORKING(new CourseName(\"COMPUTER ENGINEERING\"), \"COMMUNICATIONS AND NETWORKING\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    EMBEDDED_COMPUTING(new CourseName(\"COMPUTER ENGINEERING\"), \"EMBEDDED COMPUTING\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    INTELLIGENT_SYSTEMS(new CourseName(\"COMPUTER ENGINEERING\"), \"INTELLIGENT_SYSTEMS\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    INTERACTIVE_DIGITAL_MEDIA(new CourseName(\"COMPUTER ENGINEERING\"), \"INTERACTIVE_DIGITAL_MEDIA\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    LARGE_SCALE_COMPUTING(new CourseName(\"COMPUTER ENGINEERING\"), \"LARGE-SCALE COMPUTING\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    SYSTEM_ON_A_CHIP_DESIGN(new CourseName(\"COMPUTER ENGINEERING\"), \"SYSTEM-ON-A-CHIP DESIGN\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private CourseName courseName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    AcceptedFocusArea(CourseName courseName, String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns true if enum contains given specialisation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static boolean isValid(CourseName courseName, String specialisationName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (AcceptedFocusArea c: AcceptedFocusArea.values()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (c.courseName.equals(courseName) \u0026\u0026 c.name.equals(specialisationName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/Course.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a profile\u0027s course in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Course {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final String courseName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cCourseRequirement\u003e requirements;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cCourseFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Course(String courseName, List\u003cCourseRequirement\u003e requirements,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                  List\u003cCourseFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.requirements \u003d requirements;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(courseName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!requirements.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (CourseRequirement requirement : requirements) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(requirement);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!focusAreas.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"\\nFocus Areas:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (CourseFocusArea focusArea : focusAreas) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(focusArea.getFocusAreaName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public CourseName getCourseName() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return new CourseName(courseName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public List\u003cCourseRequirement\u003e getCourseRequirement() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.requirements;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public List\u003cCourseFocusArea\u003e getCourseFocusArea() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.focusAreas;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseFocusArea getCourseFocusArea(String focusAreaName) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(focusAreaName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (CourseFocusArea courseFocusArea : focusAreas) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (courseFocusArea.getFocusAreaName().trim().toUpperCase().equals(focusAreaName.trim().toUpperCase())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                return courseFocusArea;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 4,
      "jadetayy": 8,
      "joycelynteo": 6,
      "wanxuanong": 1,
      "gyant6": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/CourseFocusArea.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Course\u0027s focus area."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class CourseFocusArea {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final String focusAreaName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cModuleCode\u003e primaries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cModuleCode\u003e electives;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseFocusArea(String focusAreaName, List\u003cModuleCode\u003e primaries, List\u003cModuleCode\u003e electives) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.focusAreaName \u003d focusAreaName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.primaries \u003d primaries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.electives \u003d electives;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(focusAreaName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!primaries.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"Area Primaries:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (ModuleCode moduleCode : primaries) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!electives.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"Area Electives:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (ModuleCode moduleCode : electives) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String getFocusAreaName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return focusAreaName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // Implement getter setter"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // equals"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getPrimaries() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (ModuleCode mc : primaries) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(i + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(mc.toString() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getElectives() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (ModuleCode mc : electives) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(i + \". \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(mc.toString() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public List\u003cModuleCode\u003e getPrim() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.primaries;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public List\u003cModuleCode\u003e getElec() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.electives;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 30,
      "gyant6": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/CourseName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Course\u0027s name"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "// Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)} // to be implemented"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class CourseName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public final String courseName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Constructs a {@code CourseName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param courseName A valid course name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public CourseName(String courseName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String formattedCourse \u003d format(courseName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        /*if (!isValid(formattedCourse)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COURSE, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.courseName \u003d formattedCourse;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns formatted courseName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String format(String courseName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        courseName \u003d courseName.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        courseName \u003d courseName.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValid(String courseName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return AcceptedCourses.contains(courseName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof CourseName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 courseName.equals(((CourseName) other).courseName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // isValidTitle()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 4,
      "joycelynteo": 15,
      "gyant6": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/CourseRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Represents a Course\u0027s requirement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class CourseRequirement {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String requirementName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final ModularCredits modularCredits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cModuleCode\u003e modules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cString\u003e requirementInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseRequirement(String requirementName, List\u003cModuleCode\u003e modules, ModularCredits modularCredits,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                             List\u003cString\u003e requirementInfo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.requirementName \u003d requirementName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.requirementInfo \u003d requirementInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getRequirementName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return requirementName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getModules() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (ModuleCode mc : modules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(i + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(mc.toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ModularCredits getModularCredits() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return modularCredits;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getRequirementInfo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (requirementInfo !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            for (String str : requirementInfo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                sb.append(\"\\u2022 \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                sb.append(str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            sb.append(\"-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        double integerCredits \u003d Double.valueOf(modularCredits.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(requirementName + \" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        output.append(\"(\" + (int) integerCredits + \" MCs):\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (requirementInfo !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (String info : requirementInfo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(\"\\u2022 \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                output.append(info + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (ModuleCode moduleCode : modules) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(moduleCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                || (other instanceof CourseRequirement // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                \u0026\u0026 requirementName.equals(((CourseRequirement) other).requirementName)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 33,
      "wanxuanong": 36,
      "gyant6": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/FocusArea.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.model.profile.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a FocusArea\u0027s name"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class FocusArea {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public final String specialisationName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Constructs a {@code FocusArea}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * @param specialisationName A valid specialisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public FocusArea(String specialisationName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String formattedSpecialisationName \u003d format(specialisationName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.specialisationName \u003d formattedSpecialisationName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns formatted specialisation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String format(String specialisationName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        specialisationName \u003d specialisationName.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        specialisationName \u003d specialisationName.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return specialisationName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // TODO: Check valid specialisation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static boolean isValid(CourseName courseName, String specialisationName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return AcceptedFocusArea.isValid(courseName, specialisationName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (specialisationName.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            return specialisationName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                || (other instanceof FocusArea // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                \u0026\u0026 specialisationName.equals(((FocusArea) other).specialisationName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module\u0027s description in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "// Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)} // to be implemented"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param description A valid module description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // isValidDescription()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/ModularCredits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module\u0027s number of modular credits in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class ModularCredits {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            \"Modular credits should be a positive number less than 100\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,2}[.]{0,1}[0-9]{0,1}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public final double modularCredits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Constructs a {@code ModularCredits}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param modularCredits A valid String Integer of modular credits"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public ModularCredits(String modularCredits) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        double credits \u003d Double.parseDouble(modularCredits);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.modularCredits \u003d credits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidCredits(String modularCredits) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return modularCredits.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return String.valueOf((int) modularCredits);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof ModularCredits // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 modularCredits \u003d\u003d (((ModularCredits) other).modularCredits)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // isValidCode()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 11,
      "jadetayy": 1,
      "wanxuanong": 1,
      "gyant6": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.personal.DeadlineList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Personal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final Prereqs prereqs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final Preclusions preclusions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final ModularCredits modularCredits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final SemesterData semesterData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final PrereqTreeNode prereqTreeNode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Personal personal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private int tag; //for colour changing in Deadline panel"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Module(ModuleCode moduleCode, Title title, Prereqs prereqs, Preclusions preclusions,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                  ModularCredits modularCredits, Description description, SemesterData semesterData,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                  PrereqTreeNode prereqTreeNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.prereqs \u003d prereqs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.prereqTreeNode \u003d prereqTreeNode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.personal \u003d new Personal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setPersonal(Personal personal) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.personal \u003d personal;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public Personal getPersonal() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return personal;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public Prereqs getPrereqs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return prereqs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Preclusions getPreclusions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return preclusions;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public ModularCredits getModularCredits() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return modularCredits;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public SemesterData getSemesterData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public PrereqTreeNode getPrereqTreeNode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return prereqTreeNode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return personal.getStatus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return personal.getGrade();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public DeadlineList getDeadlineList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return personal.getDeadlineList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cDeadline\u003e getDeadlines() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return personal.getDeadlines();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void deleteDeadline(Deadline deadline) throws DeadlineNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        personal.deleteDeadline(deadline);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void setTag(int id) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.tag \u003d id;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    } //if tag !\u003d null means module is taken before"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public int getTag() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // To think of whether Personal stuff should have getters and setters here, since it will be largely repetition"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(getModuleCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(getTitle());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        builder.append(\"\\nPrerequisite: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        builder.append(getPrereqs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        builder.append(\"\\nPreclusions: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        builder.append(getPreclusions());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        builder.append(\"\\nModular Credits (MCs): \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(getModularCredits());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        builder.append(\"\\nDescription: \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(getDescription());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        builder.append(\"\\nSemesters Offered: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(getSemesterData());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //builder.append(getAcadYear());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Checks for same module code"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * TODO: Check semester too"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public boolean isSameModule(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((Module) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // \u0026\u0026 (personal.getSemester() \u003d\u003d ((Module) other).getPersonal().getSemester())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 40,
      "jadetayy": 9,
      "joycelynteo": 19,
      "wanxuanong": 11,
      "gyant6": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module\u0027s code in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "// Guarantees: immutable; is valid as declared in {@link #isValidCode(String)} // to be implemented"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            \"Module codes should have 2-4 capital letters at the front, 0-5 capital letters at the back \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + \"and exactly 4 digits in between\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALIDATION_REGEXES \u003d \"[A-Z]{2,4}[\\\\d]{4}[A-Z]{0,5}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidCode(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleCode.matches(VALIDATION_REGEXES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Removes the trailing letters (suffix) of a module code."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Useful in cases when checking if variants of a module (e.g. CS1010S)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * are used in placed of the original (e.g. CS1010)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ModuleCode removeSuffix() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        char modCodeChar \u003d moduleCode.charAt(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        while (!Character.isDigit(modCodeChar)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn +\u003d modCodeChar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            modCodeChar \u003d moduleCode.charAt(++index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        toReturn +\u003d moduleCode.substring(index, index + 4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new ModuleCode(toReturn);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 28,
      "gyant6": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/PersonalModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Represents a PersonalModule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class PersonalModule {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public PersonalModule(String semester, String grade) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/Preclusions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Represents a Module\u0027s list of preclusions in the module list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class Preclusions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public final String preclusions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Constructs a {@code Preclusions}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param preclusions A valid string of preclusions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Preclusions(String preclusions) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return preclusions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || (other instanceof Preclusions // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                \u0026\u0026 preclusions.equals(((Preclusions) other).preclusions)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/PrereqTreeNode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.storage.JsonPrereqTreeNode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * An object representing the node of the prerequisite tree of a module."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class PrereqTreeNode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cPrereqTreeNode\u003e prereqTreeNodes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public PrereqTreeNode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public PrereqTreeNode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.prereqTreeNodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void addPrereqTreeNode(PrereqTreeNode prereqTreeNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.prereqTreeNodes.add(prereqTreeNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Checks if the user has fulfilled all the prerequisites under this prerequisite tree."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Recursive function, to be called for every node while traversing down the tree."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasFulfilledPrereqs(List\u003cModuleCode\u003e modulesTaken) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // Kept the first condition mainly as precaution"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return modulesTaken.contains(moduleCode)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    || modulesTaken.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    .map(ModuleCode::removeSuffix)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    .anyMatch(modCode-\u003emodCode.equals(moduleCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        boolean check;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (type.equals(\"or\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            check \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // As long as 1 module fulfils prereq, requirement is fulfilled"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (PrereqTreeNode node: prereqTreeNodes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (node.hasFulfilledPrereqs(modulesTaken)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    check \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (type.equals(\"and\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // As long as 1 module does not fulfil prereq, requirement is not fulfilled"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (PrereqTreeNode node: prereqTreeNodes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (!node.hasFulfilledPrereqs(modulesTaken)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalArgumentException(\"Wrong type in PrereqTreeNode.java, fix code\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this PrereqTreeNode to a JsonPrereqTreeNode object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonPrereqTreeNode toJson() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new JsonPrereqTreeNode(moduleCode.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        List\u003cJsonPrereqTreeNode\u003e listNodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (PrereqTreeNode node: prereqTreeNodes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            listNodes.add(node.toJson());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (type.equals(\"or\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new JsonPrereqTreeNode(listNodes, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (type.equals(\"and\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return new JsonPrereqTreeNode(null, listNodes);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new IllegalArgumentException(\"Error parsing prereqTreeNode object in PrereqTreeNode.java, to fix\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() { // For debugging purposes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return moduleCode.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String toReturn \u003d \"{\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        toReturn +\u003d type + \": [\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (PrereqTreeNode node: prereqTreeNodes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn +\u003d node.toString() + \", \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        toReturn +\u003d \"]}\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/Prereqs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Represents a Module\u0027s list of prerequisites in the module list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class Prereqs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public final String prereqs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Constructs a {@code Prereqs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @param prereqs A valid string of prerequisites"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public Prereqs(String prereqs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //ArrayList\u003cString\u003e prereqList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        String[] prereqArray \u003d prereqs.split(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        for (String prereq : prereqArray) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            prereqList.add(prereq);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.prereqs \u003d prereqs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return prereqs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                || (other instanceof Prereqs // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                \u0026\u0026 prereqs.equals(((Prereqs) other).prereqs)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    // isValidCode()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 1,
      "wanxuanong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/SemesterData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module\u0027s semester data in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class SemesterData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public final List\u003cInteger\u003e semesters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Constructs a {@code SemesterData}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @param semesters Valid semester numbers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public SemesterData(List\u003cString\u003e semesters) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        semesters.forEach(sem -\u003e this.semesters.add(Integer.parseInt(sem)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cString\u003e getSemesters() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.semesters.stream().map(x-\u003ex.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.semesters.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof SemesterData // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                \u0026\u0026 semesters.equals(((SemesterData) other).semesters)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // isValidCode()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 14,
      "wanxuanong": 1,
      "gyant6": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.course.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Represents a Module\u0027s title in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "// Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)} // to be implemented"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param title A valid module title."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // requireAllNonNull() // to be implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // checkArgument() // to be implemented"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // methods to be implemented"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // isValidTitle()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    // hashCode()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/exceptions/DateTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.model.profile.course.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Exception thrown when there is an input error of date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class DateTimeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public DateTimeException (String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wanxuanong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Represents a Deadline in Personal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date and time field of deadline should be in the format \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"YYYY-MM-DD and HH:mm respectively.\\n\" + \"Dates should be valid Gregorian calendar dates\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \" and time should be in 24-hour format.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            + \"Example: 2020-04-25 18:54\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private String inputTimePattern \u003d \"HH:mm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private DateTimeFormatter inputTimeFormatter \u003d DateTimeFormatter.ofPattern(inputTimePattern);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Deadline(String moduleCode, String description, String date, String time) throws DateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            this.time \u003d LocalTime.parse(time, inputTimeFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (this.date.isBefore(today.plusDays(5))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                tag \u003d \"RED\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (this.date.isBefore(today.plusDays(10))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                tag \u003d \"YELLOW\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                tag \u003d \"GREEN\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new DateTimeException(\"Try: d/YYYY-MM-DD HH:mm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public Deadline(String moduleCode, String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getStringDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd LLLL yyyy\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        String formattedString \u003d date.format(formatter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getStringTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        String formattedString \u003d time.format(formatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setDescription(String newTask) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.description \u003d newTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setDateTime(String newDate, String newTime) throws DateTimeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            this.date \u003d LocalDate.parse(newDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            this.time \u003d LocalTime.parse(newTime, inputTimeFormatter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            throw new DateTimeException(\"Try: d/YYYY-MM-DD HH:mm\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public DateTimeFormatter getInputTimeFormatter() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return inputTimeFormatter;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public String getInputTimePattern() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return inputTimePattern;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if the given date and time are valid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidDeadline(String date, String time) { // No point checking the description/task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            LocalDate.parse(date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Adds tag to new Deadline so that UI changes colour according to date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void addTag() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (this.date.isBefore(today.plusDays(5))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            tag \u003d \"RED\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (this.date.isBefore(today.plusDays(10))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            tag \u003d \"YELLOW\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            tag \u003d \"GREEN\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        String result \u003d this.moduleCode + \": \" + this.description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (date !\u003d null \u0026\u0026 time !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            result +\u003d \" by \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    + LocalTime.parse(time.toString(), inputTimeFormatter);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (other instanceof Deadline) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            boolean sameDescription \u003d this.description.equals(((Deadline) other).description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            boolean sameDate \u003d (this.date \u003d\u003d null \u0026\u0026 ((Deadline) other).date \u003d\u003d null)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    || (this.date !\u003d null \u0026\u0026 ((Deadline) other).date !\u003d null"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    \u0026\u0026 this.date.equals(((Deadline) other).date));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            boolean sameTime \u003d (this.time \u003d\u003d null \u0026\u0026 ((Deadline) other).time \u003d\u003d null)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    || (this.time !\u003d null \u0026\u0026 ((Deadline) other).time !\u003d null"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    \u0026\u0026 this.time.equals(((Deadline) other).time));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return sameDescription \u0026\u0026 sameDate \u0026\u0026 sameTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 49,
      "jadetayy": 51,
      "joycelynteo": 18,
      "wanxuanong": 41,
      "gyant6": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/DeadlineList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * DeadlineList contains the list of deadlines and methods for the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "public class DeadlineList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private ArrayList\u003cDeadline\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public DeadlineList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.list \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public DeadlineList(ArrayList\u003cDeadline\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public ArrayList\u003cDeadline\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Returns specific task required."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @param index Index of task in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @return Required task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public Deadline getDeadline(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Returns number of tasks in list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @return size of list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Removes Deadline {@code Deadline} specified by user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param deadline To be removed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws DeadlineNotFoundException if the deadline cannot be found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void deleteDeadline(Deadline deadline) throws DeadlineNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!list.removeIf(dl-\u003edl.getDescription().equals(deadline.getDescription()))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new DeadlineNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public Deadline getTask(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Deadline deadline \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (Deadline d: list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (d.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                deadline \u003d d;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                || (other instanceof DeadlineList \u0026\u0026 other.equals(this));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 7,
      "joycelynteo": 10,
      "wanxuanong": 46,
      "gyant6": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Stores the grade of a profile\u0027s Module object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module\u0027s grade field should contain only one of these values: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + Stream.of(ModuleGrade.values()).map(ModuleGrade::toString).collect(Collectors.toList()).toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ModuleGrade myGrade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (myGrade !\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return myGrade.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setGrade(String grade) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (ModuleGrade g: ModuleGrade.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (g.toString().equals(grade)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                this.myGrade \u003d g;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        throw new NoSuchElementException(\"Grade \" + grade + \" does not exist\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return Stream.of(ModuleGrade.values()).map(ModuleGrade::toString).anyMatch(x -\u003e x.equals(grade));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 36,
      "joycelynteo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/ModuleGrade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Typical grades in NUS stored as enumerations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public enum ModuleGrade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    A_PLUS(\"A+\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    A(\"A\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    A_MINUS(\"A-\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    B_PLUS(\"B+\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    B(\"B\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    B_MINUS(\"B-\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    C_PLUS(\"C+\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    C(\"C\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    D_PLUS(\"D+\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    D(\"D\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    F(\"F\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    S(\"S\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    U(\"U\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    CS(\"CS\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    CU(\"CU\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String gradeDisplayed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    ModuleGrade(String gradeDisplayed) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.gradeDisplayed \u003d gradeDisplayed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.gradeDisplayed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/ModuleStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Status of modules stored as enumerations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public enum ModuleStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    PLANNING, IN_PROGRESS, COMPLETED"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/Personal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * A wrapper class to contain attributes of a Module specific to a particular student."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class Personal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private DeadlineList deadlineList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Personal() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        status \u003d new Status();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        grade \u003d new Grade();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        deadlineList \u003d new DeadlineList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Currently unusable because all the fields are private."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // TODO: Link the parsed input to the input of Personal, then call the respective functions within each class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setGrade(String grade) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.grade.setGrade(grade);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (status.toLowerCase().equals(\"completed\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            this.status.setCompleted();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (status.replaceAll(\"_\", \" \").toLowerCase().equals(\"in progress\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            this.status.setInProgress();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.status.setPlanning();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deadlineList.addDeadline(deadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.status.getStatus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.grade.getGrade();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public DeadlineList getDeadlineList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return this.deadlineList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cDeadline\u003e getDeadlines() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.deadlineList.getList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public void deleteDeadline(Deadline deadline) throws DeadlineNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deadlineList.deleteDeadline(deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 42,
      "joycelynteo": 15,
      "wanxuanong": 2,
      "gyant6": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/course/module/personal/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.model.profile.course.module.personal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Keeps track of the current status of the module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module\u0027s status field should contain only one of these values: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            + Stream.of(ModuleStatus.values()).map(ModuleStatus::name).collect(Collectors.toList()).toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ModuleStatus status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Status() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.status \u003d ModuleStatus.PLANNING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return status.name();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean isPlanning() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.status.equals(ModuleStatus.PLANNING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean isTaking() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.status.equals(ModuleStatus.IN_PROGRESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.status.equals(ModuleStatus.COMPLETED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setPlanning() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.status \u003d ModuleStatus.PLANNING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setInProgress() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.status \u003d ModuleStatus.IN_PROGRESS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.status \u003d ModuleStatus.COMPLETED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns true if the status is valid as defined in ModuleStatus."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static boolean isValidStatus(String status) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (ModuleStatus s: ModuleStatus.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (s.toString().equals(status)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/exceptions/DeadlineNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.model.profile.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Signals that the operation is unable to find the specified profile."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class DeadlineNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/profile/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * Signals that the operation is unable to find the specified profile."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 1,
      "gyant6": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCourse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.CourseRequirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Jackson-friendly version of {@link JsonCourse}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "class JsonCourse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Course\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final String courseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final List\u003cJsonCourseRequirement\u003e requirements;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cJsonCourseFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public JsonCourse(@JsonProperty(\"focusAreaName\") String courseName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                      @JsonProperty(\"requirements\") List \u003cJsonCourseRequirement\u003e requirements,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                      @JsonProperty(\"focusAreas\") List \u003cJsonCourseFocusArea\u003e focusAreas) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.requirements \u003d requirements;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.focusAreas \u003d focusAreas;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Converts this Jackson-friendly module object into a {@code Course} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the module."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Course toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // Handle uninitialised attributes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // Note that some fields such as prerequisite and preclusion are optional fields and are thus omitted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (courseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \"Course\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } else if (requirements \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Requirement\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        List\u003cCourseRequirement\u003e modelRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        for (JsonCourseRequirement requirement : requirements) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            CourseRequirement modelRequirement \u003d requirement.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            modelRequirements.add(modelRequirement);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        List\u003cCourseFocusArea\u003e modelFocusAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (focusAreas !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            for (JsonCourseFocusArea focusArea : focusAreas) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                CourseFocusArea modelFocusArea \u003d focusArea.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                modelFocusAreas.add(modelFocusArea);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return new Course(courseName, modelRequirements, modelFocusAreas);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wanxuanong": 7,
      "gyant6": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCourseFocusArea.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * Jackson-friendly version of {@link CourseFocusArea}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "class JsonCourseFocusArea {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Course\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final String focusAreaName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cString\u003e primaries;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cString\u003e electives;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonCourseFocusArea(@JsonProperty(\"focusAreaName\") String focusAreaName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                      @JsonProperty(\"primaries\") List\u003cString\u003e primaries,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                      @JsonProperty(\"electives\") List\u003cString\u003e electives) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.focusAreaName \u003d focusAreaName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.primaries \u003d primaries;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.electives \u003d electives;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Converts this Jackson-friendly module object into a {@code CourseFocusArea} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseFocusArea toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // Handle uninitialised attributes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (focusAreaName \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \"Focus Area\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        else if (primaries \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Area Primary\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } else if (electives \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \"Area Elective\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        List\u003cModuleCode\u003e modelPrimaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (primaries !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            primaries.forEach(modelPrimary -\u003e modelPrimaries.add(new ModuleCode(modelPrimary)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        List\u003cModuleCode\u003e modelElectives \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (electives !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            electives.forEach(modelElective -\u003e modelElectives.add(new ModuleCode(modelElective)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return new CourseFocusArea(focusAreaName, modelPrimaries, modelElectives);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanckben": 1,
      "gyant6": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCourseListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * A class to access CourseList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class JsonCourseListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonCourseListStorage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseList() throws DataConversionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return readCourseList(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Similar to {@link #readCourseList()}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseList(String filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Optional\u003cJsonSerializableCourseList\u003e jsonCourseList \u003d JsonUtil.readJsonFileStream("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                filePath, JsonSerializableCourseList.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        if (!jsonCourseList.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            return Optional.of(jsonCourseList.get().toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            //logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 5,
      "gyant6": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCourseRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.CourseRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " * Jackson-friendly version of {@link CourseRequirement}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "class JsonCourseRequirement {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Requirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String requirementName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final List\u003cString\u003e modules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String modularCredits;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cString\u003e requirementInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public JsonCourseRequirement(@JsonProperty(\"requirementName\") String requirementName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                               @JsonProperty(\"modules\") List\u003cString\u003e modules,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                               @JsonProperty(\"modularCredits\") String modularCredits,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                 @JsonProperty(\"requirementInfo\") List\u003cString\u003e requirementInfo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.requirementName \u003d requirementName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.requirementInfo \u003d requirementInfo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * Converts this Jackson-friendly module object into a {@code CourseRequirement} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public CourseRequirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Handle uninitialised attributes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Note that some fields such as prerequisite and preclusion are optional fields and are thus omitted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        if (requirementName \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    \"Requirement Name\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } else if (modules \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } else if (modularCredits \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                    \"Modular Credits\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        List\u003cModuleCode\u003e modelModuleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        modules.forEach(module -\u003e modelModuleCodes.add(new ModuleCode(module)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        final ModularCredits modelModuleCredit \u003d new ModularCredits(modularCredits);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        // Important to note requirementInfo may be null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return new CourseRequirement(requirementName, modelModuleCodes, modelModuleCredit, requirementInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wanxuanong": 57,
      "gyant6": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Preclusions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.PrereqTreeNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Prereqs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.SemesterData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonModule {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String moduleCredit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String prerequisite;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final String preclusion;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final List\u003cJsonSemesterData\u003e semesterData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final JsonPrereqTreeNode prereqTree;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"semesterData\") List\u003cJsonSemesterData\u003e semesterData,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"prereqTree\") JsonPrereqTreeNode prereqTree) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.semesterData \u003d semesterData;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.prereqTree \u003d prereqTree;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this Jackson-friendly module object into a {@code Module} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the module."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Handle uninitialised attributes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Note that some fields such as prerequisite and preclusion are optional fields and are thus omitted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (moduleCredit \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    ModularCredits.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (semesterData \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    SemesterData.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Handle invalid values"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!ModuleCode.isValidCode(moduleCode)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (!ModularCredits.isValidCredits(moduleCredit)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } /*else if (!SemesterData.isValid(semesterData)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(SemesterData.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final ModularCredits modelModuleCredit \u003d new ModularCredits(moduleCredit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        final Prereqs modelPrerequisite \u003d new Prereqs(prerequisite);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final Preclusions modelPreclusion \u003d new Preclusions(preclusion);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        List\u003cString\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        semesterData.forEach(semData -\u003e semesters.add(semData.getSemester()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final SemesterData modelSemesterData \u003d new SemesterData(semesters);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        final PrereqTreeNode modelPrereqTreeNode;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (prereqTree \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            modelPrereqTreeNode \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            modelPrereqTreeNode \u003d prereqTree.toModelType();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return new Module(modelModuleCode, modelTitle, modelPrerequisite, modelPreclusion,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                modelModuleCredit, modelDescription, modelSemesterData, modelPrereqTreeNode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link SemesterData}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonSemesterData {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String semester;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSemesterData(@JsonProperty(\"semester\") String semester) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanckben": 125,
      "wanxuanong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * A class to access ModuleList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class JsonModuleListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonModuleListStorage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return readModuleList(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Similar to {@link #readModuleList()}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList(String filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonModuleList \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                JsonUtil.readJsonFileStream(filePath, JsonSerializableModuleList.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!jsonModuleList.isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return Optional.of(jsonModuleList.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            //logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPrereqTreeNode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.PrereqTreeNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link PrereqTreeNode}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "@JsonInclude(JsonInclude.Include.NON_NULL)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class JsonPrereqTreeNode {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonPrereqTreeNode\u003e and;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonPrereqTreeNode\u003e or;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonPrereqTreeNode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonPrereqTreeNode(@JsonProperty(\"or\") List\u003cJsonPrereqTreeNode\u003e or,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"and\") List\u003cJsonPrereqTreeNode\u003e and) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (or !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.or \u003d or;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (and !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.and \u003d and;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean isModule() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.moduleCode !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean isOrNode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.or !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public boolean isAndNode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return this.and !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this Jackson-friendly module object into a {@code PrereqTreeNode} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the module."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public PrereqTreeNode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        PrereqTreeNode toReturn;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (isModule()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn \u003d new PrereqTreeNode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (isOrNode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn \u003d new PrereqTreeNode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn.setType(\"or\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (JsonPrereqTreeNode node: or) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                toReturn.addPrereqTreeNode(node.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (isAndNode()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn \u003d new PrereqTreeNode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            toReturn.setType(\"and\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (JsonPrereqTreeNode node: and) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                toReturn.addPrereqTreeNode(node.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(\"Error parsing prerequisite tree\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Grade;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Personal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link Profile}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "@JsonInclude(JsonInclude.Include.NON_NULL)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonProfile {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Profile\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private String courseName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String specialisation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String currentSemester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonSemesterRecord\u003e records;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonProfile(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            @JsonProperty(\"courseName\") String courseName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"specialisation\") String specialisation,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            @JsonProperty(\"currentSemester\") String currentSemester,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"records\") List\u003cJsonSemesterRecord\u003e records) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonProfile(Profile source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        courseName \u003d source.getCourseName().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        specialisation \u003d source.getFocusAreaString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        currentSemester \u003d Integer.toString(source.getCurrentSemester());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (Map.Entry\u003cInteger, ModuleList\u003e entry: source.getMappings()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            String sem \u003d entry.getKey().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            ModuleList modules \u003d entry.getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            records.add(new JsonSemesterRecord("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    sem, modules.stream().map(JsonPersonalModule::new).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this Jackson-friendly profile object into a {@code Profile} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the profile."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Profile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Handle uninitialised attributes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Note that some fields such as prerequisite and preclusion are optional fields and are thus omitted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        } else if (courseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                    CourseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (currentSemester \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"current semester\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (records \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"records\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Handle invalid values"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (!currentSemester.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(\"Semester number should be a positive integer\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // TODO: Validation for course - Completely alphabetical"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Name profileName \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        CourseName profileCourse \u003d new CourseName(courseName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        FocusArea profileFocusArea \u003d new FocusArea(specialisation);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Profile profile \u003d new Profile(profileName, profileCourse, Integer.parseInt(currentSemester),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                profileFocusArea);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (JsonSemesterRecord record : records) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            int semester \u003d Integer.parseInt(record.getSemester());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (JsonPersonalModule module : record.getModules()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                Module mod \u003d module.toModelType();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                profile.addModule(semester, mod);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profile.updateCap();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of a semester."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "@JsonInclude(JsonInclude.Include.NON_NULL)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonSemesterRecord {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String semester;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonPersonalModule\u003e modules;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSemesterRecord(@JsonProperty(\"semester\") String semester,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"modules\") List\u003cJsonPersonalModule\u003e modules) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public String getSemester() throws IllegalValueException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!semester.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(\"Semester number should be a positive integer\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public List\u003cJsonPersonalModule\u003e getModules() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "@JsonInclude(JsonInclude.Include.NON_NULL)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonPersonalModule extends JsonModule {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonDeadline\u003e deadlines;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonPersonalModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"moduleCredit\") String moduleCredit,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"semesterData\") List\u003cJsonSemesterData\u003e semesterData,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"prereqTree\") JsonPrereqTreeNode prereqTree,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"grade\") String grade,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"deadlines\") List\u003cJsonDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        super(moduleCode, title, description, moduleCredit, prerequisite, preclusion, semesterData, prereqTree);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonPersonalModule(Module module) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        super(module.getModuleCode().toString(), module.getTitle().toString(), module.getDescription().toString(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                module.getModularCredits().toString(), module.getPrereqs().toString(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                module.getPreclusions().toString(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                module.getSemesterData().getSemesters().stream()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        .map(JsonSemesterData::new).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                module.getPrereqTreeNode() !\u003d null ? module.getPrereqTreeNode().toJson() : null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        status \u003d module.getStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        grade \u003d module.getGrade();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (module.getDeadlines().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            deadlines \u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            deadlines \u003d module.getDeadlines().stream().map(JsonDeadline::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } else if (grade !\u003d null \u0026\u0026 !Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Module module \u003d super.toModelType();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Personal personal \u003d new Personal();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (grade !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            personal.setGrade(grade);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        personal.setStatus(status);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (deadlines !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (JsonDeadline deadline : deadlines) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                personal.addDeadline(deadline.toModelType());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        module.setPersonal(personal);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chanckben"
        },
        "content": "@JsonInclude(JsonInclude.Include.NON_NULL)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chanckben"
        },
        "content": "class JsonDeadline {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public JsonDeadline(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleCode \u003d deadline.getModuleCode();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        description \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (deadline.getDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            date \u003d deadline.getDate().toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (deadline.getTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            time \u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            time \u003d deadline.getTime().toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this Jackson-friendly deadline object into a {@code Deadline} object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the deadline."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    \"description\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (date !\u003d null \u0026\u0026 time !\u003d null) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                LocalDate.parse(date);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                LocalTime.parse(time);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            } catch (DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new IllegalValueException(\"Deadline\u0027s date field should be a valid date in the format YYYY-MM-DD \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        + \"and time field should be a valid time in the format HH:mm\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                return new Deadline(moduleCode, description, date, time);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new IllegalValueException(\"Unknown error occurred\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return new Deadline(moduleCode, description);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 247,
      "jadetayy": 9,
      "joycelynteo": 16,
      "wanxuanong": 1,
      "gyant6": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProfileListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * A class to access ProfileList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class JsonProfileListStorage implements ProfileListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonProfileListStorage(Path filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cProfileList\u003e readProfileList() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return readProfileList(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Similar to {@link #readProfileList()}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cProfileList\u003e readProfileList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Optional\u003cJsonSerializableProfileList\u003e jsonProfileList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                filePath, JsonSerializableProfileList.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (!jsonProfileList.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return Optional.of(jsonProfileList.get().toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void saveProfileList(ProfileList profileList) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        saveProfileList(profileList, filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Similar to {@link #saveProfileList(ProfileList)}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void saveProfileList(ProfileList profileList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(profileList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProfileList(profileList), filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCourseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gyant6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gyant6"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "public class JsonSerializableCourseList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Persons list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private final List\u003cJsonCourse\u003e courses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSerializableCourseList(@JsonProperty(\"courses\") List\u003cJsonCourse\u003e courses) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courses.addAll(courses);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Converts this course list into a {@code CourseList} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public CourseList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        CourseList courseList \u003d new CourseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        for (JsonCourse jsonCourse : courses) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            Course modelCourse \u003d jsonCourse.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            courseList.addCourse(modelCourse);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        return courseList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gyant6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 1,
      "gyant6": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Persons list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private final List\u003cJsonModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonModule\u003e modules) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this module list into a {@code ModuleList} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ModuleList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (JsonModule jsonModule : modules) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Module module \u003d jsonModule.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (moduleList.hasModule(module)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableProfileList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * An Immutable ProfileList that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class JsonSerializableProfileList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROFILE \u003d \"Profile list contains a profile with the same name.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private List\u003cJsonProfile\u003e profiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSerializableProfileList(@JsonProperty(\"profiles\") List\u003cJsonProfile\u003e profiles) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.profiles.addAll(profiles);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public JsonSerializableProfileList(ProfileList profileList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        profiles.addAll(profileList.getProfileList().stream().map(JsonProfile::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Converts this module list into a {@code ProfileList} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public ProfileList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ProfileList profileList \u003d new ProfileList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (JsonProfile jsonProfile: profiles) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Profile profile \u003d jsonProfile.toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            if (profileList.hasProfileWithName(profile.getName())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROFILE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            profileList.addProfile(profile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ProfileListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ProfileList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public interface ProfileListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Path getProfileListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Returns ProfileList data as a {@link ProfileList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Optional\u003cProfileList\u003e readProfileList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @see #getProfileListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Optional\u003cProfileList\u003e readProfileList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * Saves the given {@link ProfileList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @param profileList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void saveProfileList(ProfileList profileList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     * @see #saveProfileList(ProfileList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void saveProfileList(ProfileList profileList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public interface Storage extends ProfileListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Path getProfileListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    Optional\u003cProfileList\u003e readProfileList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    void saveProfileList(ProfileList profileList) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "/*public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "chanckben": 20,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    //private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ProfileListStorage profileListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public StorageManager(ProfileListStorage profileListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.profileListStorage \u003d profileListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProfileList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileListStorage.getProfileListFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cProfileList\u003e readProfileList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return readProfileList(profileListStorage.getProfileListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public Optional\u003cProfileList\u003e readProfileList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return profileListStorage.readProfileList(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void saveProfileList(ProfileList profileList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        saveProfileList(profileList, profileListStorage.getProfileListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void saveProfileList(ProfileList profileList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        profileListStorage.saveProfileList(profileList, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 41,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        } catch (CommandException | ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, DateTimeException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 3,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CourseFocusAreaCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code CourseRequirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class CourseFocusAreaCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"CourseFocusAreaCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label focusArea;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label primaries;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label electives;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CourseFocusAreaCard(CourseFocusArea courseFocusArea) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (courseFocusArea.getFocusAreaName() !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            focusArea.setText(courseFocusArea.getFocusAreaName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        primaries.setText(\"PRIMARIES: \\n\" + courseFocusArea.getPrimaries());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        electives.setText(\"\\nELECTIVES: \\n\" + courseFocusArea.getElectives());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CoursePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseRequirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing information related to Course."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class CoursePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"CoursePanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CoursePanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label courseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cCourseRequirement\u003e requirements;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cCourseFocusArea\u003e focusAreas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CoursePanel(Course course) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        courseName.setText(course.getCourseName().courseName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requirements.setItems(FXCollections.observableArrayList(course.getCourseRequirement()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requirements.setCellFactory(listView -\u003e new CoursePanel.CourseReqViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        focusAreas.setItems(FXCollections.observableArrayList(course.getCourseFocusArea()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        focusAreas.setCellFactory(listView -\u003e new CoursePanel.CourseFocusAreaCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CourseRequirement}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * using a {@code CourseRequirement}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class CourseReqViewCell extends ListCell\u003cCourseRequirement\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(CourseRequirement courseRequirement, boolean empty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(courseRequirement, empty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || courseRequirement \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new CourseRequirementCard(courseRequirement).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CourseFocusArea}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * using a {@code CourseFocusAreaCard}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class CourseFocusAreaCell extends ListCell\u003cCourseFocusArea\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(CourseFocusArea courseFocusArea, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(courseFocusArea, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || courseFocusArea \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new CourseFocusAreaCard(courseFocusArea).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CourseRequirementCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code CourseRequirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class CourseRequirementCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"CourseRequirementCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label requirement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label modularCredits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label requirementInfo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label modules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public CourseRequirementCard(CourseRequirement courseRequirement) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requirement.setText(courseRequirement.getRequirementName()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                + \" (\" + courseRequirement.getModularCredits().toString() + \" MCs)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        requirementInfo.setText(\"Requirements: \" + courseRequirement.getRequirementInfo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        modules.setText(\"\\nModules: \\n\" + courseRequirement.getModules());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeadlineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code Profile}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class DeadlineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public final Deadline deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Text module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Text date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Pane moduleColour;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public DeadlineCard(Deadline deadline, ModuleList moduleList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        //to colourise modules pane"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Module thisMod \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (Module mod : moduleList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (deadline.getModuleCode().equals(mod.getModuleCode().toString())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                thisMod \u003d mod;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        int tag \u003d thisMod.getTag();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (tag \u003d\u003d 0) { //up to 8 modules"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"84a9ac\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"d45d79\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"ff9933\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 3) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"f6d186\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 4) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"b590ca\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 5) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"ea9085\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (tag \u003d\u003d 6) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleColour.setStyle(\"-fx-background-color: \\\"cae8d5\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        //module name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        module.setText(deadline.getModuleCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        module.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        description.setText(\"Task: \" + deadline.getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (deadline.getDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            date.setText(\"Date: -\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            date.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            time.setText(\"Time: -\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            date.setText(\"Date: \" + deadline.getStringDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (deadline.getTag().equals(\"RED\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                date.setFill(Color.valueOf(\"F05B5B\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (deadline.getTag().equals(\"YELLOW\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                date.setFill(Color.YELLOW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                date.setFill(Color.LAWNGREEN);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            time.setText(\"Time: \" + deadline.getStringTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!(other instanceof ProfileCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        DeadlineCard card \u003d (DeadlineCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return deadline.equals(card.deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        ProfileManager pm \u003d new ProfileManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        Profile profile \u003d pm.getFirstProfile();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        for (Module mod : profile.getCurModules().getModuleList()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//            if (mod.getModuleCode().moduleCode.equals(deadline.getModuleCode())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                int tag \u003d mod.getTag();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                if (tag \u003d\u003d 0) { //up to 8 modules"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"84a9ac\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"d45d79\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"ff9933\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 3) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"f6d186\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 4) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"b590ca\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 5) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"ea9085\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else if (tag \u003d\u003d 6) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                    moduleColour.setStyle(\"-fx-background-color: \\\"cae8d5\\\"; -fx-border-color: #3a3a3a;\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        }"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeadlineListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing the list of deadlines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class DeadlineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static ProfileManager pm;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeadlineListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cDeadline\u003e deadlineListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public DeadlineListPanel(ObservableList\u003cDeadline\u003e deadlineList, ProfileManager pm) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.pm \u003d pm;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineListView.setItems(deadlineList); //sets an observable list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Profile} using a {@code DeadlineCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(Deadline deadline, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new DeadlineCard(deadline, pm.getFirstProfile().getCurModules()).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FocusAreaPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing information related to CourseFocusArea."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class FocusAreaPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"FocusAreaPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FocusAreaPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label focusArea;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cModuleCode\u003e primaries;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cModuleCode\u003e electives;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public FocusAreaPanel(CourseFocusArea courseFocusArea) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        focusArea.setText(courseFocusArea.getFocusAreaName().toUpperCase());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        primaries.setItems(FXCollections.observableArrayList(courseFocusArea.getPrim()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        primaries.setCellFactory(listView -\u003e new ModuleCodeListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        electives.setItems(FXCollections.observableArrayList(courseFocusArea.getElec()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        electives.setCellFactory(listView -\u003e new ModuleCodeListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class ModuleCodeListViewCell extends ListCell\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(ModuleCode moduleCode, boolean empty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(moduleCode, empty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new ModuleCodeCard(moduleCode).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w13-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IndividualModulePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing information related to specific Module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class IndividualModulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"IndividualModulePanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private VBox individualModulePanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label preReqs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private Label preclusions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label modularCredits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label semData;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public IndividualModulePanel(Module module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (module.getPrereqs().prereqs \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            preReqs.setVisible(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            preReqs.setManaged(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        if (module.getPreclusions().preclusions \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            preclusions.setVisible(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            preclusions.setManaged(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleCode.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleTitle.setText(module.getTitle().toString().toUpperCase());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        preReqs.setText(\"Prerequisite: \\n\" + module.getPrereqs().prereqs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        preclusions.setText(\"Preclusions: \\n\" + module.getPreclusions().preclusions);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        modularCredits.setText(\"Modular Credits: \" + module.getModularCredits().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        description.setText(\"Module Description: \\n\" + module.getDescription().description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        semData.setText(\"Semester Data: \\nThis module is available in Semesters \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                + module.getSemesterData().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 45,
      "chanckben": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ProfileListPanel profileListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private DeadlineListPanel deadlineListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    // Ui parts in the main panel (dynamic)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private WelcomeView welcomeViewPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private OverviewPanel overviewPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private IndividualModulePanel individualModulePanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private CoursePanel coursePanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private FocusAreaPanel focusAreaPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private WelcomeView homePanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private StackPane profileListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private StackPane deadlineListPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        welcomeViewPanel \u003d new WelcomeView();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(welcomeViewPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileListPanel \u003d new ProfileListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileListPanelPlaceholder.getChildren().add(profileListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineListPanel \u003d new DeadlineListPanel(logic.getFilteredDeadlineList(), logic.getProfileManager());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        deadlineListPanelPlaceholder.getChildren().add(deadlineListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getProfileListFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Handles show command by updating Main Panel."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private void handleShowCommand() throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Optional\u003cObject\u003e displayedView \u003d logic.getDisplayedView();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // Removes the current displayed view"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (displayedView !\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().remove(displayedView);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        WelcomeView home \u003d new WelcomeView();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        //return to home page"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (displayedView.isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(home.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (displayedView.get() instanceof FilteredList) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleListPanel \u003d new ModuleListPanel((ObservableList\u003cModule\u003e) displayedView.get());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (displayedView.get() instanceof Profile) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            overviewPanel \u003d new OverviewPanel(logic.getProfileList().getProfileList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().add(overviewPanel.getRoot());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (displayedView.get() instanceof Module) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            individualModulePanel \u003d new IndividualModulePanel((Module) displayedView.get());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().addAll(individualModulePanel.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (displayedView.get() instanceof Course) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            coursePanel \u003d new CoursePanel((Course) displayedView.get());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().addAll(coursePanel.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } else if (displayedView.get() instanceof CourseFocusArea) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            focusAreaPanel \u003d new FocusAreaPanel((CourseFocusArea) displayedView.get());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            mainPanelPlaceholder.getChildren().addAll(focusAreaPanel.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            DateTimeException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            //prints onto console"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            //prints on result display on ui"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (commandResult.isShowCommand()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                handleShowCommand();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 77,
      "chanckben": 1,
      "joycelynteo": 3,
      "-": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"ModuleCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ModuleCard(Module module) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleCode.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleName.setText(module.getTitle().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCodeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code ModuleCode}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class ModuleCodeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"ModuleCodeCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ModuleCodeCard(ModuleCode mc) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleCode.setText(mc.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing the list modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new ModuleCard(module).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OverviewModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * An UI component that displays information of a {@code Module} in Overview Panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class OverviewModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"OverviewModuleCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public OverviewModuleCard(Module module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleCode.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        moduleName.setText(module.getTitle().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        grade.setText(\"Grade: \" + module.getGrade());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (module.getGrade() \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            grade.setText(\"Grade: -\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OverviewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing the overview of a Profile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class OverviewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"OverviewPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cProfile\u003e profile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label cap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ScrollPane modulesPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cModule\u003e moduleSemesterPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public OverviewPanel(ObservableList\u003cProfile\u003e profileList) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profile.setItems(profileList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profile.setCellFactory(listView -\u003e new ProfileListViewCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        Profile profile \u003d profileList.get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        cap.setText(\"Current CAP: \\n\" + profile.getCap().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        //Modules panel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        HBox modPane \u003d new HBox();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        System.out.println(\"TEST:!!!\" + profile.getAllModules().get(2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        for (Integer i : profile.getAllModules().keySet()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (profile.getAllModules().get(i).getModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            HBox temp \u003d new HBox();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            temp.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            temp.setMaxWidth(40);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            temp.setBackground(new Background("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    new BackgroundFill(Color.valueOf(\"#383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            String yearSem;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 1 Semester 1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 1 Semester 2\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 3) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 2 Semester 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 4) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 2 Semester 2\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 5) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 3 Semester 1\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 6) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 3 Semester 2\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else if (i \u003d\u003d 7) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 4 Semester 1\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                yearSem \u003d \"Year 4 Semester 2\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            Label listTitle \u003d new Label(yearSem.toUpperCase());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            listTitle.setRotate(-90);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            listTitle.setWrapText(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            listTitle.setStyle(\"-fx-font-family: \\\"Segoe Pro Display\\\"; -fx-font-weight: bold; \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    + \"-fx-font-size: 15; -fx-text-fill: #f7c4bb;\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            temp.getChildren().addAll(new Group(listTitle));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            ListView\u003cModule\u003e moduleSemPanel \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleSemPanel.setItems(profile.getModules(i).getModuleList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            moduleSemPanel.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            modPane.setBackground(new Background("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    new BackgroundFill(Color.valueOf(\"#383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            modPane.setSpacing(5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            modPane.getChildren().addAll(temp, moduleSemPanel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        modulesPanel.setContent(modPane);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Profile} using a {@code DeadlineCard}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new OverviewModuleCard(module).getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Profile} using a {@code DeadlineCard}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    class ProfileListViewCell extends ListCell\u003cProfile\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        protected void updateItem(Profile profile, boolean empty) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            super.updateItem(profile, empty);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            if (empty || profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new ProfileCard(profile).getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * An UI component that displays information of a {@code Profile}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class ProfileCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"ProfileListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public final Profile profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label course;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private Label curSem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private Label focusArea;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ProfileCard(Profile profile) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        name.setText(profile.getName().fullName.toUpperCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        course.setText(\"Course: \" + profile.getCourseName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        curSem.setText(\"Current Semester: \" + profile.getCurrentSemester());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        if (profile.getFocusArea() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            focusArea.setText(\"Focus Area: \" + profile.getFocusAreaString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        if (!(other instanceof ProfileCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        ProfileCard card \u003d (ProfileCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                \u0026\u0026 profile.equals(card.profile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 14,
      "joycelynteo": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class ProfileListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"ProfileListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProfileListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private ListView\u003cProfile\u003e profileListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public ProfileListPanel(ObservableList\u003cProfile\u003e profileList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileListView.setItems(profileList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        profileListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Profile} using a {@code DeadlineCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cProfile\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        protected void updateItem(Profile profile, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            super.updateItem(profile, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "            if (empty || profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                setGraphic(new ProfileCard(profile).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 9,
      "joycelynteo": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        //saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/study_books.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WelcomeView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " * Panel containing the home page (when there is no active module being displayed)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class WelcomeView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    private static final String FXML \u003d \"WelcomeViewPanel.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public WelcomeView() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 14
    }
  },
  {
    "path": "src/main/resources/view/CourseFocusAreaCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"focusArea\" text\u003d\"\\$focusArea\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"primaries\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$primaries\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"electives\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$electives\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 33
    }
  },
  {
    "path": "src/main/resources/view/CoursePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cVBox fx:id\u003d\"coursePanel\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" spacing\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cInsets top\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"courseName\" text\u003d\"\\$courseName\" wrapText\u003d\"true\" styleClass\u003d\"module_code\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\" dividerPositions\u003d\"0.5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel text\u003d\"COURSE REQUIREMENT\" styleClass\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cListView fx:id\u003d\"requirements\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"320\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel text\u003d\"FOCUS AREA\" styleClass\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cListView fx:id\u003d\"focusAreas\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"320\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 33
    }
  },
  {
    "path": "src/main/resources/view/CourseRequirementCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"requirement\" text\u003d\"\\$requirement\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"requirementInfo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$requirementInfo\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"modules\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modules\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 33
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cPane fx:id\u003d\"moduleColour\" GridPane.columnIndex\u003d\"0\" minWidth\u003d\"10\" maxWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" GridPane.columnIndex\u003d\"0\" minWidth\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"15\" bottom\u003d\"5\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cText fx:id\u003d\"module\" text\u003d\"\\$module\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cText fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 42
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cListView fx:id\u003d\"deadlineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 8
    }
  },
  {
    "path": "src/main/resources/view/FocusAreaPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cVBox fx:id\u003d\"focusAreaPanel\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" spacing\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cInsets top\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"focusArea\" text\u003d\"\\$focusArea\" wrapText\u003d\"true\" styleClass\u003d\"module_code\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"PRIMARIES\" styleClass\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cListView fx:id\u003d\"primaries\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"ELECTIVES\" styleClass\u003d\"title\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cListView fx:id\u003d\"electives\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 28
    }
  },
  {
    "path": "src/main/resources/view/IndividualModulePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cScrollPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxWidth\u003d\"710\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"AS_NEEDED\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cVBox fx:id\u003d\"individualModulePanel\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"705\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cInsets top\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"\\$moduleCode\" wrapText\u003d\"true\" styleClass\u003d\"module_code\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleTitle\" text\u003d\"\\$moduleTitle\" wrapText\u003d\"true\" styleClass\u003d\"module_title\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"preReqs\" text\u003d\"\\$prereqs\" wrapText\u003d\"true\" styleClass\u003d\"module_others\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        \u003cLabel fx:id\u003d\"preclusions\" text\u003d\"\\$preclusions\" wrapText\u003d\"true\" styleClass\u003d\"module_others\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"modularCredits\" text\u003d\"\\$mcs\" wrapText\u003d\"true\" styleClass\u003d\"module_others\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" wrapText\u003d\"true\" styleClass\u003d\"module_others\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel fx:id\u003d\"semData\" text\u003d\"\\$semData\" wrapText\u003d\"true\" styleClass\u003d\"module_others\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 22,
      "chanckben": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "         title\u003d\"MODdy\" minWidth\u003d\"1000\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cImage url\u003d\"@/images/study_books.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "          \u003cSplitPane dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\" minHeight\u003d\"170\" prefHeight\u003d\"170\" maxHeight\u003d\"170\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cVBox \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                         minHeight\u003d\"110\" prefHeight\u003d\"110\" maxHeight\u003d\"110\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c!--Profile--\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cVBox fx:id\u003d\"profilePanel\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                  minWidth\u003d\"260\" prefWidth\u003d\"260\" maxWidth\u003d\"260\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cLabel text\u003d\"Profile\" styleClass\u003d\"title\" alignment\u003d\"TOP_LEFT\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cStackPane fx:id\u003d\"profileListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c!--Arrange main panel and deadline panel side-by-side--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "          \u003cSplitPane dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c!--Main result--\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" styleClass\u003d\"pane-with-border\" alignment\u003d\"CENTER_LEFT\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                  minWidth\u003d\"540\" prefWidth\u003d\"540\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c!--Deadline display--\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cVBox fx:id\u003d\"deadlineDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                       minWidth\u003d\"260\" prefWidth\u003d\"260\" maxWidth\u003d\"260\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cLabel text\u003d\"Deadline\" styleClass\u003d\"title\" alignment\u003d\"TOP_LEFT\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "              \u003cStackPane fx:id\u003d\"deadlineListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 41,
      "-": 54
    }
  },
  {
    "path": "src/main/resources/view/ModuleCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"\\$moduleCode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleName\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 33
    }
  },
  {
    "path": "src/main/resources/view/ModuleCodeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"\\$moduleCode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 31
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 8
    }
  },
  {
    "path": "src/main/resources/view/OverviewModuleCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"\\$moduleCode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleName\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"grade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$grade\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 35
    }
  },
  {
    "path": "src/main/resources/view/OverviewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cSplitPane minHeight\u003d\"100\" dividerPositions\u003d\"0.5\" maxHeight\u003d\"135\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cListView fx:id\u003d\"profile\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"3\" bottom\u003d\"3\" left\u003d\"5\" right\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/ListView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c!--        cap panel--\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" maxWidth\u003d\"200\" minHeight\u003d\"100\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                \u003cInsets top\u003d\"3\" bottom\u003d\"3\" left\u003d\"5\" right\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel fx:id\u003d\"cap\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"module_others\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cInsets top\u003d\"7\" right\u003d\"0\" bottom\u003d\"10\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"modulesPanel\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"420\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                vmax\u003d\"0\" vbarPolicy\u003d\"NEVER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 40
    }
  },
  {
    "path": "src/main/resources/view/ProfileListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"110\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "      \u003cLabel fx:id\u003d\"course\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$course\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "      \u003cLabel fx:id\u003d\"curSem\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$curSem\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "      \u003cLabel fx:id\u003d\"focusArea\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$focusArea\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 5,
      "joycelynteo": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/ProfileListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "  \u003cListView fx:id\u003d\"profileListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/WelcomeViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003cVBox styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"Welcome to \" styleClass\u003d\"welcomeTitle\" alignment\u003d\"TOP_LEFT\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"MODdy!\" styleClass\u003d\"fancyTitle\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\" Quick start:\" styleClass\u003d\"quickStart\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\" 1. No profile? Create using \" styleClass\u003d\"quickStart\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"`new`\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\"format: new n/NAME c/COURSE cs/CURRENT_SEMESTER [s/SPECIALISATION]\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\"    \" styleClass\u003d\"quickStart\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\" 2. Add modules using \" styleClass\u003d\"quickStart\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"`add`\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\"format: add m/MODULE y/SEMESTER_INDEX\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\"    \" styleClass\u003d\"quickStart\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\" 3. Add deadlines using \" styleClass\u003d\"quickStart\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cLabel text\u003d\"`add`\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cLabel text\u003d\"format: add m/MODULE y/SEMESTER_INDEX t/TASK d/DEADLINE\" styleClass\u003d\"command\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "            \u003cInsets top\u003d\"5\" bottom\u003d\"5\" right\u003d\"5\" left\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODCODE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODCODE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.logic.parser.AddCommandParserTest;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.AcceptedCourses;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.AcceptedFocusArea;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.Description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "//import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.Preclusions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.PrereqTreeNode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.Prereqs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.SemesterData;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.Title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.model.profile.course.module.personal.DeadlineList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddCommandParserTest.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private ProfileManager profileManager;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private CourseManager courseManager;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public AddCommandTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        String moduleListFilePath \u003d \"/data/modulesPrereq.json\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        JsonModuleListStorage modules \u003d new JsonModuleListStorage(moduleListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            Optional\u003cModuleList\u003e moduleListOptional \u003d modules.readModuleList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new ModuleManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                ModuleList moduleList \u003d moduleListOptional.get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new ModuleManager(moduleList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            new ModuleManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        moduleCode \u003d new ModuleCode(VALID_MODCODE_BOB);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        semester \u003d new Year(VALID_SEMESTER_BOB).getSemester();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        grade \u003d VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        task \u003d VALID_TASK_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        deadline \u003d VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    // No module code added, user inputs \"add m/\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new AddCommand(null, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        Profile validProfile;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        validProfile \u003d new Profile("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new Name(\"name\"), new CourseName(AcceptedCourses.COMPUTER_SCIENCE.getName()), 3,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                new FocusArea(AcceptedFocusArea.ALGORITHMS_AND_THEORY.getName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        Module module \u003d new Module(moduleCode, new Title(\"title\"), new Prereqs(\"prereq\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new Preclusions(\"preclusion\"), new ModularCredits(\"4\"), new Description(\"desc\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new SemesterData(Arrays.asList(\"1\", \"2\")), new PrereqTreeNode(moduleCode));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        String initialStatus \u003d module.getPersonal().getStatus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Create an AddCommand which attempts to add a module with the same module code"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleCode, semester, null, null, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Create a \"ProfileManager\" which contains validProfile, which contains module"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProfile(validProfile, module);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Executing addCommand.execute should raise CommandException with the duplicate module message"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        /*assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                String.format(AddCommand.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                        module.getPersonal().getStatus()), () -\u003e addCommand.execute("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                                profileManager, courseManager, moduleManager));*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Also make sure that the module\u0027s status does not change after failing to add duplicate module"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(module.getPersonal().getStatus().equals(initialStatus));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    public void execute_newModule_noChangeStatus() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        Profile validProfile;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        validProfile \u003d new Profile("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new Name(\"name\"), new CourseName(AcceptedCourses.COMPUTER_SCIENCE.getName()), 3,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                new FocusArea(AcceptedFocusArea.ALGORITHMS_AND_THEORY.getName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        Module module \u003d new Module(new ModuleCode(VALID_MODCODE_AMY), new Title(\"title\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new Prereqs(\"prereq\"), new Preclusions(\"preclusions\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new Description(\"desc\"), new SemesterData(Arrays.asList(\"1\", \"2\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                new PrereqTreeNode(new ModuleCode(VALID_MODCODE_AMY)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        String initialStatus \u003d module.getPersonal().getStatus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        String initialGrade \u003d module.getPersonal().getGrade();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        DeadlineList initialDeadlines \u003d module.getPersonal().getDeadlineList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Create an AddCommand which attempts to add a module with the same module code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(moduleCode, semester, null, null, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // Create a \"ProfileManager\" which contains validProfile, which contains module"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        //ProfileManager profileManager \u003d new ProfileManager(profileList, userPref);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "           addCommand.execute(profileManager, courseManager, moduleManager);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(module.getPersonal().getStatus().equals(initialStatus)); // Check if status is the same"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        boolean sameGrade \u003d (module.getPersonal().getGrade() \u003d\u003d null \u0026\u0026 initialGrade \u003d\u003d null)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                || (module.getPersonal().getGrade() !\u003d null \u0026\u0026 initialGrade !\u003d null"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "                \u0026\u0026 module.getPersonal().getGrade().equals(initialGrade));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(sameGrade); // Check if grade is the same"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(module.getPersonal().getDeadlineList().equals(initialDeadlines)); // Check if deadlines are same"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addAmyCommand \u003d new AddCommand(new ModuleCode(VALID_MODCODE_AMY),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new Year(VALID_SEMESTER_AMY).getSemester(), VALID_GRADE_AMY, VALID_TASK_AMY, VALID_DEADLINE_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(moduleCode, semester, grade, task, deadline);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(addAmyCommand.equals(addAmyCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addAmyCommandCopy \u003d new AddCommand(new ModuleCode(VALID_MODCODE_AMY),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new Year(VALID_SEMESTER_AMY).getSemester(), VALID_GRADE_AMY, VALID_TASK_AMY, VALID_DEADLINE_AMY);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(addAmyCommand.equals(addAmyCommandCopy));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        // same module code but remainder fields differ -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        AddCommand addBobCommandDiff \u003d new AddCommand(new ModuleCode(VALID_MODCODE_BOB),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new Year(VALID_SEMESTER_AMY).getSemester(), VALID_GRADE_AMY, VALID_TASK_AMY, VALID_DEADLINE_AMY);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertTrue(addBobCommand.equals(addBobCommandDiff));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertFalse(addAmyCommand.equals(1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertFalse(addAmyCommand.equals(null));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        assertFalse(addAmyCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "     * ModelStub acts as ProfileManager."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public Path getProfileListFilePath() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setProfileListFilePath(Path profileListFilePath) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setProfileList(ProfileList profileList) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public ProfileList getProfileList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public boolean hasPerson(Profile profile) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void deletePerson(Profile target) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void addPerson(Profile profile) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setPerson(Profile target, Profile editedProfile) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public ObservableList\u003cProfile\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public ObservableList\u003cDeadline\u003e getSortedDeadlineList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cProfile\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public boolean hasProfile(Name name) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public Profile getProfile(Name name) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public Profile getFirstProfile() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void deleteDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void clearDeadlineList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void loadDeadlines() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void deleteModuleDeadlines(ModuleCode mc) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public Optional\u003cObject\u003e getDisplayedView() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setDisplayedView(ObservableList\u003cModule\u003e toDisplay) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setDisplayedView(Profile toDisplay) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setDisplayedView(Module toDisplay) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setDisplayedView(Course toDisplay) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public void setDisplayedView(CourseFocusArea toDisplay) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    private class ModelStubWithProfile extends ModelStub {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        private final Profile profile;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        ModelStubWithProfile(Profile profile, Module module) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            requireNonNull(profile);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            this.profile \u003d profile;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            this.profile.addModule(1, module);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        public Profile getFirstProfile() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "            return this.profile;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wanxuanong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 5,
      "joycelynteo": 4,
      "wanxuanong": 228,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                        false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", false)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                                false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                            true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                                false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "                                            true, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 16,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_MODCODE_AMY \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_SEMESTER_AMY \u003d \"2.1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_GRADE_AMY \u003d \"A-\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_TASK_AMY \u003d \"homework\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_DEADLINE_AMY \u003d \"2020-03-23 23:59\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_MODCODE_BOB \u003d \"MA1521\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_SEMESTER_BOB \u003d \"1.1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_GRADE_BOB \u003d \"C+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_TASK_BOB \u003d \"assignment\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String VALID_DEADLINE_BOB \u003d \"2021-01-01 12:35\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String VALID_COURSE_CS \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MODCODE_DESC_AMY \u003d \" \" + PREFIX_MODULE + VALID_MODCODE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String SEMESTER_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_SEMESTER_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String GRADE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String TASK_DESC_AMY \u003d \" \" + PREFIX_TASK + VALID_TASK_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String DEADLINE_DESC_AMY \u003d \"  \" + PREFIX_DEADLINE + VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String MODCODE_DESC_BOB \u003d \" \" + PREFIX_MODULE + VALID_MODCODE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String SEMESTER_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_SEMESTER_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String GRADE_DESC_BOB \u003d \" \" + PREFIX_GRADE + VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String TASK_DESC_BOB \u003d \" \" + PREFIX_TASK + VALID_TASK_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String DEADLINE_DESC_BOB \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String INVALID_MODCODE_DESC \u003d \" \" + PREFIX_MODULE + \"123ABC\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String INVALID_SEMESTER_DESC \u003d \" \" + PREFIX_YEAR + \"a\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE + \"1\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"2021-15-30 23:59\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static void assertCommandSuccess(Command command, ProfileManager actualProfileManager,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            CourseManager actualCourseManager, ModuleManager actualModuleManager,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            CommandResult expectedCommandResult, ProfileManager expectedProfileManager,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            CourseManager expectedCourseManager, ModuleManager expectedModuleManager) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            CommandResult result \u003d command.execute(actualProfileManager, actualCourseManager, actualModuleManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            assertEquals(expectedProfileManager, actualProfileManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ProfileManager, CourseManager, ModuleManager,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gyant6"
        },
        "content": "     * CommandResult, ProfileManager, CourseManager, ModuleManager)}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static void assertCommandSuccess(Command command, ProfileManager actualProfileManager,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            CourseManager actualCourseManager, ModuleManager actualModuleManager,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            String expectedMessage, ProfileManager expectedProfileManager,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                                            CourseManager expectedCourseManager, ModuleManager expectedModuleManager) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        assertCommandSuccess(command, actualProfileManager, actualCourseManager, actualModuleManager,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                expectedCommandResult, expectedProfileManager, expectedCourseManager, expectedModuleManager);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the profile at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static void showPersonAtIndex(ProfileManager profileManager, Index targetIndex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c profileManager.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        Profile profile \u003d profileManager.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        final String[] splitName \u003d profile.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        profileManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        assertEquals(1, profileManager.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 29,
      "jadetayy": 1,
      "joycelynteo": 4,
      "gyant6": 23,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_PROFILE_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.ShowCommand.MESSAGE_SUCCESS_COURSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.ShowCommand.MESSAGE_SUCCESS_FOCUS_AREA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.ShowCommand.MESSAGE_SUCCESS_MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.ShowCommand.MESSAGE_SUCCESS_MODULE_LIST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.ShowCommand.MESSAGE_SUCCESS_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.CourseManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ModuleManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.AcceptedCourses;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.AcceptedFocusArea;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.Course;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.CourseFocusArea;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModularCredits;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Preclusions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.PrereqTreeNode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Prereqs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.SemesterData;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.Title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // No profile has been added, user inputs \"show n/John\" and \"show n/123\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_nameNoProfile_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandJohn \u003d new ShowCommand(new Name(\"John\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, \"Profile does not exist.\", () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                showCommandJohn.execute(new ProfileManagerStub(), new CourseManagerStub(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommand123 \u003d new ShowCommand(new Name(\"123\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, \"Profile does not exist.\", () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                showCommand123.execute(new ProfileManagerStub(), new CourseManagerStub(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // No profile has been added, user inputs \"show n/\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Note that the CommandException would have been thrown in ShowCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void constructor_nullNameNoProfile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ShowCommand(new Name(null)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid name, same capitalisation, e.g. show n/John"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid name, all capitalised, e.g. show n/JOHN"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid name, all non-caps, e.g. show n/john"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_validNameOneProfile_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandFirstLetterCap \u003d new ShowCommand(new Name(\"John\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandAllCap \u003d new ShowCommand(new Name(\"JOHN\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandNoCap \u003d new ShowCommand(new Name(\"john\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandFirstLetterCap.execute("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerWithEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandAllCap.execute("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerWithEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_NAME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandNoCap.execute("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerWithEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_NAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Invalid name, e.g. show n/Mark"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_invalidNameOneProfile_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand invalidName \u003d new ShowCommand(new Name(\"Mark\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, \"Profile with name does not exist.\", () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                invalidName.execute(new ProfileManagerWithEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        new ModuleManagerStub()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // No profile has been added, user inputs \"show y/1\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // One profile has been added but with no modules, user inputs \"show y/1\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_semesterNoModules_throwsCommandException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandSem \u003d new ShowCommand(new Year(\"1.1\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_EMPTY_PROFILE_LIST, () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                showCommandSem.execute(new ProfileManagerStub(), new CourseManagerStub(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_SEMESTER, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                showCommandSem.execute("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        new ProfileManagerWithEmptyProfile(), new CourseManagerStub(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // One profile has been added with a module. Valid semester, user inputs \"show y/1\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_validSemesterWithModules_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandSem \u003d new ShowCommand(new Year(\"1.1\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandSem.execute(new ProfileManagerWithNonEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_MODULE_LIST));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // One profile has been added with a module. Invalid semester, user inputs \"show y/2\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_invalidSemesterWithModules_throwsCommandException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandSem \u003d new ShowCommand(new Year(\"1.2\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_SEMESTER, () -\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                showCommandSem.execute(new ProfileManagerWithNonEmptyProfile(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                        new ModuleManagerStub()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid course, first letter of each word capitalised, e.g. show c/Computer Science"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid course, all words capitalised, e.g. show c/COMPUTER SCIENCE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid course, all words in non-caps, e.g. show c/computer science"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_validCourseName_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandFirstLetterCap \u003d new ShowCommand(new CourseName(\"Computer Science\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandAllCap \u003d new ShowCommand(new CourseName(\"COMPUTER SCIENCE\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandNoCap \u003d new ShowCommand(new CourseName(\"computer science\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandFirstLetterCap.execute("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_COURSE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandAllCap.execute("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_COURSE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandNoCap.execute("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_COURSE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // No profile has been added, user inputs \"show c/\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Note that the CommandException would have been thrown in ShowCommandParser"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void constructor_nullCourse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ShowCommand(new CourseName(null)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid focus area, first letter of each word capitalised, e.g. show f/Computer Security"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid focus area, all words capitalised, e.g. show c/COMPUTER SECURITY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid focus area, all words in non-caps, e.g. show c/computer security"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_validFocusArea_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandFirstLetterCap \u003d new ShowCommand(\"Computer Security\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandAllCap \u003d new ShowCommand(\"COMPUTER SECURITY\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandNoCap \u003d new ShowCommand(\"computer security\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandFirstLetterCap.execute("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_FOCUS_AREA));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandAllCap.execute("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_FOCUS_AREA));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandNoCap.execute("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStubCs(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStub()).getFeedbackToUser().equals(MESSAGE_SUCCESS_FOCUS_AREA));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Invalid focus area, e.g. show f/focus area x"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Integer focus area, e.g. show f/123"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_invalidFocusArea_throwsCommandException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand invalidFocusArea \u003d new ShowCommand(\"focus area x\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand integerFocusArea \u003d new ShowCommand(\"123\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_COURSE_FOCUS_AREA, () -\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                invalidFocusArea.execute(new ProfileManagerStub(), new CourseManagerStubCs(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_COURSE_FOCUS_AREA, () -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                integerFocusArea.execute(new ProfileManagerStub(), new CourseManagerStubCs(), new ModuleManagerStub()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid module code, all capitalised, e.g. CS1101S"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid module code, some in caps, some non-caps, e.g. Cs1101s"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Valid module code, all non-caps, e.g. cs1101s"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_validModuleCode_success() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandAllCap \u003d new ShowCommand(new ModuleCode(\"CS1101S\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandVariety \u003d new ShowCommand(new ModuleCode(\"Cs1101s\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand showCommandNoCap \u003d new ShowCommand(new ModuleCode(\"cs1101s\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandAllCap.execute("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStubCs()).getFeedbackToUser().equals(MESSAGE_SUCCESS_MODULE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandVariety.execute("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStubCs()).getFeedbackToUser().equals(MESSAGE_SUCCESS_MODULE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertTrue(showCommandNoCap.execute("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ProfileManagerStub(), new CourseManagerStub(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModuleManagerStubCs()).getFeedbackToUser().equals(MESSAGE_SUCCESS_MODULE));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    // Invalid module code, e.g. show m/CS1111"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void execute_invalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ShowCommand invalidCommand \u003d new ShowCommand(new ModuleCode(\"CS1111\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_MODULE, () -\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                invalidCommand.execute(new ProfileManagerStub(), new CourseManagerStub(), new ModuleManagerStubCs()));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class ModuleManagerStubCs extends ModuleManagerStub {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private ModuleManagerStubCs() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Module module \u003d new Module(new ModuleCode(\"CS1101S\"), new Title(\"\"), new Prereqs(\"\"), new Preclusions(\"\"),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModularCredits(\"4\"), new Description(\"\"), new SemesterData(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new PrereqTreeNode());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            moduleList.add(module);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class ModuleManagerStub extends ModuleManager {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        protected List\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private ModuleManagerStub(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            requireNonNull(moduleList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public ModuleManagerStub() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (Module module: moduleList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (Module mod: moduleList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (mod.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return mod;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            // Code should not reach this line"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class CourseManagerStubCs extends CourseManagerStub {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private CourseManagerStubCs() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            List\u003cCourse\u003e courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            List\u003cCourseFocusArea\u003e courseFocusAreaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            courseFocusAreaList.add("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new CourseFocusArea(\"Computer Security\", new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            courseList.add("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new Course(AcceptedCourses.COMPUTER_SCIENCE.getName(), new ArrayList\u003c\u003e(), courseFocusAreaList));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.courseList \u003d courseList;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class CourseManagerStub extends CourseManager {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        protected List\u003cCourse\u003e courseList;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private CourseManagerStub(List\u003cCourse\u003e courseList) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            requireNonNull(courseList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.courseList \u003d courseList;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public CourseManagerStub() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public Course getCourse(CourseName courseName) throws ParseException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (Course course: courseList) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                if (course.getCourseName().equals(courseName)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return course;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(\"Course does not exist\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public CourseFocusArea getCourseFocusArea(String focusAreaName) throws ParseException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            requireNonNull(focusAreaName);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            for (Course course: courseList) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    CourseFocusArea focusArea \u003d course.getCourseFocusArea(focusAreaName);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    return focusArea;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class ProfileManagerWithNonEmptyProfile extends ProfileManagerStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private ProfileManagerWithNonEmptyProfile() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Module module \u003d new Module(new ModuleCode(\"CS1101S\"), new Title(\"\"), new Prereqs(\"\"), new Preclusions(\"\"),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new ModularCredits(\"4\"), new Description(\"\"), new SemesterData(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                    new PrereqTreeNode());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            ObservableList\u003cProfile\u003e profileList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Profile profile \u003d new Profile(new Name(\"John\"), new CourseName("
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    AcceptedCourses.COMPUTER_SCIENCE.getName()), 1,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    new FocusArea(AcceptedFocusArea.COMPUTER_SECURITY.getName()));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            profile.addModule(1, module);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            profileList.add(profile);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.profileList \u003d profileList;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            filteredProfiles \u003d new FilteredList\u003c\u003e(this.profileList);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public boolean hasOneProfile() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class ProfileManagerWithEmptyProfile extends ProfileManagerStub {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private ProfileManagerWithEmptyProfile() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            ObservableList\u003cProfile\u003e profileList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            Profile profile \u003d new Profile(new Name(\"John\"), new CourseName("
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    AcceptedCourses.COMPUTER_SCIENCE.getName()), 1,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                    new FocusArea(AcceptedFocusArea.COMPUTER_SECURITY.getName()));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            profileList.add(profile);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.profileList \u003d profileList;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            filteredProfiles \u003d new FilteredList\u003c\u003e(this.profileList);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public boolean hasOneProfile() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private class ProfileManagerStub extends ProfileManager {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        protected ObservableList\u003cProfile\u003e profileList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        protected FilteredList\u003cProfile\u003e filteredProfiles;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        private ProfileManagerStub(List\u003cProfile\u003e profileList) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            requireNonNull(profileList);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this.profileList.setAll(profileList);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            filteredProfiles \u003d new FilteredList\u003c\u003e(this.profileList);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public ProfileManagerStub() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public Profile getFirstProfile() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return this.profileList.get(0);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        public ObservableList\u003cProfile\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            return filteredProfiles;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 389,
      "joycelynteo": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODCODE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODCODE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODCODE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODCODE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.personal.Grade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        //Profile expectedProfile \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODCODE_BOB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int semester \u003d new Year(VALID_SEMESTER_BOB).getSemester();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String grade \u003d VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String task \u003d VALID_TASK_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String deadline \u003d VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // multiple modules - last module accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_AMY + MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // multiple semesters - last semester accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_BOB + SEMESTER_DESC_AMY + SEMESTER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // multiple grades - last grade accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_AMY + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // multiple tasks - last task accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_BOB + TASK_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_BOB + TASK_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + DEADLINE_DESC_AMY + DEADLINE_DESC_BOB, new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODCODE_AMY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        int semester \u003d new Year(VALID_SEMESTER_AMY).getSemester();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String grade \u003d VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String task \u003d VALID_TASK_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String deadline \u003d VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // No grade"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_AMY + SEMESTER_DESC_AMY + TASK_DESC_AMY + DEADLINE_DESC_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // No task and deadline"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_AMY + SEMESTER_DESC_AMY + GRADE_DESC_AMY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // No grade, task and deadline"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, MODCODE_DESC_AMY + SEMESTER_DESC_AMY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new AddCommand(moduleCode, semester, grade, task, deadline));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_BOB + SEMESTER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // missing semester prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, MODCODE_DESC_BOB + VALID_SEMESTER_BOB, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_BOB + VALID_SEMESTER_BOB, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, INVALID_MODCODE_DESC + SEMESTER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // invalid semester (if error message differs, refer to parseSemester method under ParserUtil.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, MODCODE_DESC_BOB + INVALID_SEMESTER_DESC + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // invalid grade"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, MODCODE_DESC_BOB + SEMESTER_DESC_BOB + INVALID_GRADE_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + DEADLINE_DESC_BOB, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, MODCODE_DESC_BOB + SEMESTER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                + TASK_DESC_BOB + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 90,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.module.exceptions.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } catch (ParseException | DateTimeException | CommandException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        } catch (ParseException | DateTimeException | CommandException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            //assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 3,
      "joycelynteo": 1,
      "gyant6": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ModdyParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class ModdyParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private final ModdyParser parser \u003d new ModdyParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        assertEquals(1, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public void parseCommand_new() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        assertEquals(1, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 2,
      "joycelynteo": 8,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.AcceptedCourses;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private static final String VALID_NAME \u003d \"rachel walker\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseModuleCode_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_MISSING_MODULE, () -\u003e ParserUtil.parseModuleCode(\"\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String[] invalidModuleCodes \u003d {\"1101\", \"A1101\", \"1101X\", \"A1101X\", \"ABCDE1010\", \"ABC101\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        for (String moduleCode: invalidModuleCodes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            assertThrows(ParseException.class, MESSAGE_INVALID_MODULE, () -\u003e ParserUtil.parseModuleCode(moduleCode));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseSemester_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseSemester_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_MISSING_SEMESTER, () -\u003e ParserUtil.parseYear(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseSemester_string_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_SEMESTER, () -\u003e ParserUtil.parseYear(\"abc\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseCourseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCourseName(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseCourseName_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_MISSING_COURSE, () -\u003e ParserUtil.parseCourseName(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseCourseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_COURSE, () -\u003e ParserUtil.parseCourseName(\"course x\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseFocusArea_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFocusArea("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                new CourseName(AcceptedCourses.COMPUTER_SCIENCE.getName()), null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parseFocusArea_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_MISSING_COURSE_FOCUS_AREA, () -\u003e ParserUtil.parseFocusArea("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "                new CourseName(AcceptedCourses.COMPUTER_SCIENCE.getName()), \"\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 29,
      "joycelynteo": 7,
      "gyant6": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanckben"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COURSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_COURSE_FOCUS_AREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_SEMESTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOCUS_AREA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_SEMESTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.Year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.AcceptedCourses;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.profile.course.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanckben"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Semester field present"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        Year semester \u003d new Year(\"1.1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_YEAR + semester, new ShowCommand(semester));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Course field present"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        CourseName courseName \u003d new CourseName(AcceptedCourses.COMPUTER_SCIENCE.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COURSE_NAME + courseName, new ShowCommand(courseName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Module field present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"CS1101S\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_MODULE + moduleCode, new ShowCommand(moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Focus area field present"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String focusArea \u003d \"Computer Security\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FOCUS_AREA + focusArea,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                new ShowCommand(focusArea.toUpperCase()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Name field present"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        String name \u003d \"john\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + name, new ShowCommand(new Name(name)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Invalid semester"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        String semester \u003d \"abc\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + semester, MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR, MESSAGE_MISSING_SEMESTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Invalid course"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        CourseName courseName \u003d new CourseName(\"course\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COURSE_NAME + courseName, MESSAGE_INVALID_COURSE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COURSE_NAME, MESSAGE_MISSING_COURSE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Invalid module"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"1101\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MODULE + moduleCode, MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MODULE, MESSAGE_MISSING_MODULE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Invalid focus area"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_FOCUS_AREA, MESSAGE_MISSING_COURSE_FOCUS_AREA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // Invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME, MESSAGE_MISSING_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanckben"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 84,
      "joycelynteo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanckben"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // different profile -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 1,
      "joycelynteo": 1,
      "gyant6": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gyant6": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/ProfileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gyant6"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "public class ProfileTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "    public void isSameProfile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertTrue(ALICE.isSameProfile(ALICE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertFalse(ALICE.isSameProfile(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        Profile editedAlice \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        //        assertFalse(ALICE.isSameProfile(editedAlice));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withCourseName(\"Computer Science\").withCurrentSemester(\"1\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "        assertTrue(ALICE.isSameProfile(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        Profile aliceCopy \u003d new PersonBuilder(ALICE).withCourseName(\"Computer Science\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gyant6"
        },
        "content": "                .withCurrentSemester(\"1\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // different profile -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // Profile editedAlice \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        // assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 4,
      "chanckben": 1,
      "joycelynteo": 7,
      "gyant6": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/profile/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "package seedu.address.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import seedu.address.model.profile.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//import seedu.address.model.profile.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    private final UniquePersonList uniqueProfileList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertFalse(uniqueProfileList.contains(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertTrue(uniqueProfileList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniqueProfileList.add(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfile_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.setProfile(null, ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfile_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.setProfile(ALICE, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfile_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniqueProfileList.setProfile(ALICE, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfile_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        UniquePersonList expectedUniqueProfileList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        expectedUniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertEquals(expectedUniqueProfileList, uniqueProfileList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfile_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.setPersons(ALICE, BOB);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        UniquePersonList expectedUniqueProfileList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        expecteduniqueProfileList.add(BOB);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertEquals(expecteduniqueProfileList, uniqueProfileList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //    public void setProfile_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //        uniqueProfileList.add(BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //        assertThrows(DuplicatePersonException.class, () -\u003e uniqueProfileList.setProfile(ALICE, BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.remove(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniqueProfileList.remove(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.remove(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        UniquePersonList expecteduniqueProfileList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertEquals(expecteduniqueProfileList, uniqueProfileList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfiles_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.setProfiles((UniquePersonList) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfiles_uniqueProfileList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.setProfiles(expectedUniquePersonList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniqueProfileList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfiles_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniqueProfileList.setProfiles((List\u003cProfile\u003e) null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfiles_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.add(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        List\u003cProfile\u003e profileList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        uniqueProfileList.setProfiles(profileList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniqueProfileList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void setProfiles_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        List\u003cProfile\u003e listWithDuplicateProfiles \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniqueProfileList.setProfiles(listWithDuplicateProfiles));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//            -\u003e uniqueProfileList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jadetayy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import seedu.address.model.profile.course.CourseName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.course.FocusArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * A utility class to help with building Profile objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final String DEFAULT_COURSE_NAME \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String DEFAULT_CURRENT_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final String DEFAULT_FOCUS_AREA \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    private CourseName courseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private String currentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    private FocusArea focusArea;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        courseName \u003d new CourseName(DEFAULT_COURSE_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        currentSemester \u003d DEFAULT_CURRENT_SEMESTER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        focusArea \u003d new FocusArea(DEFAULT_FOCUS_AREA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code profileToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public PersonBuilder(Profile profileToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        name \u003d profileToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Sets the {@code Name} of the {@code Profile} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Sets the {@code Course} of the {@code Profile} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public PersonBuilder withCourseName(String courseName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        this.courseName \u003d new CourseName(courseName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Sets the {@code Current Semester} of the {@code Profile} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public PersonBuilder withCurrentSemester(String currentSemester) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        this.currentSemester \u003d \"1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public Profile build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return new Profile(name, courseName, Integer.parseInt(currentSemester), focusArea);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 19,
      "gyant6": 7,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gyant6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jadetayy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * A utility class for Profile."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns an add command string for adding the {@code profile}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * @param profile"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static String getNewCommand(Profile profile) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(profile);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns the part of command string for the given {@code profile}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static String getPersonDetails(Profile profile) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        sb.append(PREFIX_NAME + profile.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "        sb.append(PREFIX_COURSE_NAME + profile.getCourseName().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jadetayy": 1,
      "joycelynteo": 9,
      "gyant6": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns the middle index of the profile in the {@code model}\u0027s profile list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns the last index of the profile in the {@code model}\u0027s profile list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "     * Returns the profile in the {@code model}\u0027s profile list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static Profile getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joycelynteo": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COURSE_CS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanckben"
        },
        "content": "import seedu.address.model.ProfileList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "import seedu.address.model.profile.Profile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": " * A utility class containing a list of {@code Profile} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static final Profile IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(\"Computer Science\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    // Manually added - Profile\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final Profile AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(VALID_COURSE_CS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gyant6"
        },
        "content": "    public static final Profile BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gyant6"
        },
        "content": "            .withCourseName(VALID_COURSE_CS).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanckben"
        },
        "content": "    public static ProfileList getTypicalProfileList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        ProfileList pl \u003d new ProfileList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "        for (Profile profile : getTypicalPersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanckben"
        },
        "content": "            pl.addProfile(profile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanckben"
        },
        "content": "        return pl;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joycelynteo"
        },
        "content": "    public static List\u003cProfile\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanckben": 5,
      "joycelynteo": 16,
      "gyant6": 13,
      "-": 31
    }
  }
]
